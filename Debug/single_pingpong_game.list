
single_pingpong_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecc8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e14  0800ee78  0800ee78  0001ee78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c8c  08011c8c  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08011c8c  08011c8c  00021c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c94  08011c94  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c94  08011c94  00021c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c98  08011c98  00021c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08011c9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030350  2**0
                  CONTENTS
 10 .bss          00001fb4  20000350  20000350  00030350  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002304  20002304  00030350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002048d  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dbe  00000000  00000000  0005080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce8  00000000  00000000  000555d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa0  00000000  00000000  000572b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab8d  00000000  00000000  00058d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000269ea  00000000  00000000  000838e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4f9  00000000  00000000  000aa2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001967c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008a98  00000000  00000000  00196818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ee60 	.word	0x0800ee60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	0800ee60 	.word	0x0800ee60

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f002 f9d3 	bl	800327c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f8b1 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 f94f 	bl	800117c <MX_GPIO_Init>
  MX_TIM6_Init();
 8000ede:	f000 f917 	bl	8001110 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000ee2:	f00a fb8b 	bl	800b5fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
      BSP_LCD_Init();// khoi tao doi tuong man hinh LCD
 8000ee6:	f001 f9b7 	bl	8002258 <BSP_LCD_Init>
      BSP_LCD_LayerDefaultInit(1,SDRAM_DEVICE_ADDR); //dat dia chi buffer o lop man dau tien vao SDRAM
 8000eea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 fa34 	bl	800235c <BSP_LCD_LayerDefaultInit>
      BSP_LCD_SelectLayer(1); //chon lop layer chung se ghi len
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fa95 	bl	8002424 <BSP_LCD_SelectLayer>
      BSP_LCD_DisplayOn(); //bat man hinh lCD len
 8000efa:	f001 fdf7 	bl	8002aec <BSP_LCD_DisplayOn>
      BSP_LCD_Clear(LCD_COLOR_DARKGREEN); //clear man hinh LCD truoc khi bat dau hien thi
 8000efe:	4846      	ldr	r0, [pc, #280]	; (8001018 <main+0x14c>)
 8000f00:	f001 fb02 	bl	8002508 <BSP_LCD_Clear>
      BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN); //dat cho mau vien bong mau den
 8000f04:	4844      	ldr	r0, [pc, #272]	; (8001018 <main+0x14c>)
 8000f06:	f001 fab5 	bl	8002474 <BSP_LCD_SetBackColor>


      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); //mau cua bong mau trang
 8000f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0e:	f001 fa99 	bl	8002444 <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&Font20); //set kich thuoc font cho viec hien thi text ra man hinh LCD
 8000f12:	4842      	ldr	r0, [pc, #264]	; (800101c <main+0x150>)
 8000f14:	f001 fac8 	bl	80024a8 <BSP_LCD_SetFont>
      BSP_LCD_GetFont();
 8000f18:	f001 fae0 	bl	80024dc <BSP_LCD_GetFont>
  
      //khoi tao Gyroscope
      BSP_GYRO_Init();
 8000f1c:	f001 f922 	bl	8002164 <BSP_GYRO_Init>
  /* USER CODE END 2 */
       int count_score = 0; //khởi tạo biến tính điểm trò chơi
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
    	 char str[10]; //mang tam chua chuoi diem de chuyen doi int sang char
    	 uint8_t display_score[] = "Score:"; //chuỗi hiển thị điểm số đạt được ra màn hình LCD
 8000f24:	4a3e      	ldr	r2, [pc, #248]	; (8001020 <main+0x154>)
 8000f26:	463b      	mov	r3, r7
 8000f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2c:	6018      	str	r0, [r3, #0]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	8019      	strh	r1, [r3, #0]
 8000f32:	3302      	adds	r3, #2
 8000f34:	0c0a      	lsrs	r2, r1, #16
 8000f36:	701a      	strb	r2, [r3, #0]
    	     	  //----- BEGIN GIAO DIEN BAN DAU -----
    	     	  	  //o giao dien ban dau day la trang thai can bang cua bong
    	     	        

    	     	         //ve hinh tron
    	     	           BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 160, 30);
 8000f38:	f001 f9f8 	bl	800232c <BSP_LCD_GetXSize>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3b78      	subs	r3, #120	; 0x78
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	221e      	movs	r2, #30
 8000f46:	21a0      	movs	r1, #160	; 0xa0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fc45 	bl	80027d8 <BSP_LCD_DrawCircle>
    	     	           BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 120, 160, 30);
 8000f4e:	f001 f9ed 	bl	800232c <BSP_LCD_GetXSize>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	3b78      	subs	r3, #120	; 0x78
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	221e      	movs	r2, #30
 8000f5c:	21a0      	movs	r1, #160	; 0xa0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fd24 	bl	80029ac <BSP_LCD_FillCircle>
    	     	         //Test KIT de xem no ve hinh tron nhu nao roi minh se set lai gia tri cho no hop ly
    	     	           sprintf(str,"%d",count_score);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	492e      	ldr	r1, [pc, #184]	; (8001024 <main+0x158>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f00b fcfd 	bl	800c96c <siprintf>
    	     	         //hien thi diem dat duoc tren man hinh
    	     	         //noi ket chuoi
    	     	         //BSP_LCD_DisplayStringAtLine(1,display_score);
    	     	           BSP_LCD_DisplayStringAt(11,13,display_score,LEFT_MODE);
 8000f72:	463a      	mov	r2, r7
 8000f74:	2303      	movs	r3, #3
 8000f76:	210d      	movs	r1, #13
 8000f78:	200b      	movs	r0, #11
 8000f7a:	f001 fb31 	bl	80025e0 <BSP_LCD_DisplayStringAt>
    	     	           BSP_LCD_DisplayStringAt(100,13,(uint8_t*)str,LEFT_MODE);
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	2303      	movs	r3, #3
 8000f84:	210d      	movs	r1, #13
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f001 fb2a 	bl	80025e0 <BSP_LCD_DisplayStringAt>

    	     	           memset(str,0,sizeof(str));
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	220a      	movs	r2, #10
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00b f877 	bl	800c088 <memset>

    	     	           count_score++;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]

                      //----- END GIAO DIEN BAN DAU -----
    	               //lay truc goc toa do x y z cua Gyroscope
    	               BSP_GYRO_GetXYZ(valxyz);
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <main+0x15c>)
 8000fa2:	f001 f945 	bl	8002230 <BSP_GYRO_GetXYZ>

                     //--- BEGIN KIEM TRA TOC DO QUAY CUA GYRO --- 
    	               //hien thi truc quay qua USB COM UART
    	               //hien thi truc quay x
    	               	sprintf(buffer,"X rotation = %f; ",valxyz[0]);
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <main+0x15c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fadc 	bl	8000568 <__aeabi_f2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	491d      	ldr	r1, [pc, #116]	; (800102c <main+0x160>)
 8000fb6:	481e      	ldr	r0, [pc, #120]	; (8001030 <main+0x164>)
 8000fb8:	f00b fcd8 	bl	800c96c <siprintf>
    	               	CDC_Transmit_HS(buffer, sizeof(buffer));
 8000fbc:	21c8      	movs	r1, #200	; 0xc8
 8000fbe:	481c      	ldr	r0, [pc, #112]	; (8001030 <main+0x164>)
 8000fc0:	f00a fbda 	bl	800b778 <CDC_Transmit_HS>
    	               	HAL_Delay(50);
 8000fc4:	2032      	movs	r0, #50	; 0x32
 8000fc6:	f002 f9cb 	bl	8003360 <HAL_Delay>
    	               //hien thi truc quay y
    	               	sprintf(buffer,"Y rotation = %f; ",valxyz[1]);
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <main+0x15c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff faca 	bl	8000568 <__aeabi_f2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4916      	ldr	r1, [pc, #88]	; (8001034 <main+0x168>)
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <main+0x164>)
 8000fdc:	f00b fcc6 	bl	800c96c <siprintf>
    	               	CDC_Transmit_HS(buffer, sizeof(buffer));
 8000fe0:	21c8      	movs	r1, #200	; 0xc8
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <main+0x164>)
 8000fe4:	f00a fbc8 	bl	800b778 <CDC_Transmit_HS>
    	               	HAL_Delay(50);
 8000fe8:	2032      	movs	r0, #50	; 0x32
 8000fea:	f002 f9b9 	bl	8003360 <HAL_Delay>
    	               	sprintf(buffer,"Z rotation = %f\n",valxyz[2]);
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <main+0x15c>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fab8 	bl	8000568 <__aeabi_f2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	490e      	ldr	r1, [pc, #56]	; (8001038 <main+0x16c>)
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <main+0x164>)
 8001000:	f00b fcb4 	bl	800c96c <siprintf>
    	               	CDC_Transmit_HS(buffer, sizeof(buffer));
 8001004:	21c8      	movs	r1, #200	; 0xc8
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <main+0x164>)
 8001008:	f00a fbb6 	bl	800b778 <CDC_Transmit_HS>
                      //--- END KIEM TRA TOC DO QUAY CUA GYRO --- 
    	               	HAL_Delay(1200);
 800100c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001010:	f002 f9a6 	bl	8003360 <HAL_Delay>
    	     	           BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 160, 30);
 8001014:	e790      	b.n	8000f38 <main+0x6c>
 8001016:	bf00      	nop
 8001018:	ff008000 	.word	0xff008000
 800101c:	2000007c 	.word	0x2000007c
 8001020:	0800eeb8 	.word	0x0800eeb8
 8001024:	0800ee78 	.word	0x0800ee78
 8001028:	200003b4 	.word	0x200003b4
 800102c:	0800ee7c 	.word	0x0800ee7c
 8001030:	200003c0 	.word	0x200003c0
 8001034:	0800ee90 	.word	0x0800ee90
 8001038:	0800eea4 	.word	0x0800eea4

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00b f81c 	bl	800c088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <SystemClock_Config+0xcc>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <SystemClock_Config+0xcc>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <SystemClock_Config+0xd0>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <SystemClock_Config+0xd0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010ac:	2308      	movs	r3, #8
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ba:	2307      	movs	r3, #7
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fdf2 	bl	8005cac <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ce:	f000 f88b 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2302      	movs	r3, #2
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2105      	movs	r1, #5
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 f853 	bl	800619c <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010fc:	f000 f874 	bl	80011e8 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM6_Init+0x64>)
 8001120:	4a15      	ldr	r2, [pc, #84]	; (8001178 <MX_TIM6_Init+0x68>)
 8001122:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_TIM6_Init+0x64>)
 8001126:	f242 7210 	movw	r2, #10000	; 0x2710
 800112a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_TIM6_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_TIM6_Init+0x64>)
 8001134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001138:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_TIM6_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_TIM6_Init+0x64>)
 8001142:	f006 fa71 	bl	8007628 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800114c:	f000 f84c 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM6_Init+0x64>)
 800115e:	f006 fc8d 	bl	8007a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001168:	f000 f83e 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000036c 	.word	0x2000036c
 8001178:	40001000 	.word	0x40001000

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_GPIO_Init+0x68>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <MX_GPIO_Init+0x68>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_GPIO_Init+0x68>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_GPIO_Init+0x68>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <MX_GPIO_Init+0x68>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <MX_GPIO_Init+0x68>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_GPIO_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <MX_GPIO_Init+0x68>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_GPIO_Init+0x68>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x4c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_TIM_Base_MspInit+0x48>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d115      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_TIM_Base_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <HAL_TIM_Base_MspInit+0x4c>)
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_TIM_Base_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2036      	movs	r0, #54	; 0x36
 8001278:	f002 f971 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800127c:	2036      	movs	r0, #54	; 0x36
 800127e:	f002 f98a 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40001000 	.word	0x40001000
 8001290:	40023800 	.word	0x40023800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f002 f81e 	bl	8003320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM6_DAC_IRQHandler+0x10>)
 80012ee:	f006 f9ea 	bl	80076c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000036c 	.word	0x2000036c

080012fc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <OTG_HS_IRQHandler+0x10>)
 8001302:	f003 fba6 	bl	8004a52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001bc8 	.word	0x20001bc8

08001310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return 1;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_kill>:

int _kill(int pid, int sig)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800132a:	f00a fe83 	bl	800c034 <__errno>
 800132e:	4603      	mov	r3, r0
 8001330:	2216      	movs	r2, #22
 8001332:	601a      	str	r2, [r3, #0]
	return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_exit>:

void _exit (int status)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffe7 	bl	8001320 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001352:	e7fe      	b.n	8001352 <_exit+0x12>

08001354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
	}

return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
	}
	return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f00a fde8 	bl	800c034 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20030000 	.word	0x20030000
 8001490:	00000400 	.word	0x00000400
 8001494:	20000488 	.word	0x20000488
 8001498:	20002308 	.word	0x20002308

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <SystemInit+0x20>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <SystemInit+0x20>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c6:	490e      	ldr	r1, [pc, #56]	; (8001500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014dc:	4c0b      	ldr	r4, [pc, #44]	; (800150c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ea:	f7ff ffd7 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f00a fda7 	bl	800c040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff fceb 	bl	8000ecc <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001504:	08011c9c 	.word	0x08011c9c
  ldr r2, =_sbss
 8001508:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800150c:	20002304 	.word	0x20002304

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>

08001512 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001516:	f000 fc73 	bl	8001e00 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800151a:	20ca      	movs	r0, #202	; 0xca
 800151c:	f000 f95d 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001520:	20c3      	movs	r0, #195	; 0xc3
 8001522:	f000 f967 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001526:	2008      	movs	r0, #8
 8001528:	f000 f964 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800152c:	2050      	movs	r0, #80	; 0x50
 800152e:	f000 f961 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001532:	20cf      	movs	r0, #207	; 0xcf
 8001534:	f000 f951 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001538:	2000      	movs	r0, #0
 800153a:	f000 f95b 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800153e:	20c1      	movs	r0, #193	; 0xc1
 8001540:	f000 f958 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001544:	2030      	movs	r0, #48	; 0x30
 8001546:	f000 f955 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800154a:	20ed      	movs	r0, #237	; 0xed
 800154c:	f000 f945 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001550:	2064      	movs	r0, #100	; 0x64
 8001552:	f000 f94f 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001556:	2003      	movs	r0, #3
 8001558:	f000 f94c 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800155c:	2012      	movs	r0, #18
 800155e:	f000 f949 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001562:	2081      	movs	r0, #129	; 0x81
 8001564:	f000 f946 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001568:	20e8      	movs	r0, #232	; 0xe8
 800156a:	f000 f936 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800156e:	2085      	movs	r0, #133	; 0x85
 8001570:	f000 f940 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f93d 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 f93a 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001580:	20cb      	movs	r0, #203	; 0xcb
 8001582:	f000 f92a 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001586:	2039      	movs	r0, #57	; 0x39
 8001588:	f000 f934 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800158c:	202c      	movs	r0, #44	; 0x2c
 800158e:	f000 f931 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f92e 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001598:	2034      	movs	r0, #52	; 0x34
 800159a:	f000 f92b 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800159e:	2002      	movs	r0, #2
 80015a0:	f000 f928 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80015a4:	20f7      	movs	r0, #247	; 0xf7
 80015a6:	f000 f918 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80015aa:	2020      	movs	r0, #32
 80015ac:	f000 f922 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80015b0:	20ea      	movs	r0, #234	; 0xea
 80015b2:	f000 f912 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f91c 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 f919 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80015c2:	20b1      	movs	r0, #177	; 0xb1
 80015c4:	f000 f909 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f913 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80015ce:	201b      	movs	r0, #27
 80015d0:	f000 f910 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80015d4:	20b6      	movs	r0, #182	; 0xb6
 80015d6:	f000 f900 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80015da:	200a      	movs	r0, #10
 80015dc:	f000 f90a 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80015e0:	20a2      	movs	r0, #162	; 0xa2
 80015e2:	f000 f907 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80015e6:	20c0      	movs	r0, #192	; 0xc0
 80015e8:	f000 f8f7 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80015ec:	2010      	movs	r0, #16
 80015ee:	f000 f901 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80015f2:	20c1      	movs	r0, #193	; 0xc1
 80015f4:	f000 f8f1 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80015f8:	2010      	movs	r0, #16
 80015fa:	f000 f8fb 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80015fe:	20c5      	movs	r0, #197	; 0xc5
 8001600:	f000 f8eb 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001604:	2045      	movs	r0, #69	; 0x45
 8001606:	f000 f8f5 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800160a:	2015      	movs	r0, #21
 800160c:	f000 f8f2 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001610:	20c7      	movs	r0, #199	; 0xc7
 8001612:	f000 f8e2 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001616:	2090      	movs	r0, #144	; 0x90
 8001618:	f000 f8ec 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800161c:	2036      	movs	r0, #54	; 0x36
 800161e:	f000 f8dc 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001622:	20c8      	movs	r0, #200	; 0xc8
 8001624:	f000 f8e6 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001628:	20f2      	movs	r0, #242	; 0xf2
 800162a:	f000 f8d6 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f8e0 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001634:	20b0      	movs	r0, #176	; 0xb0
 8001636:	f000 f8d0 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800163a:	20c2      	movs	r0, #194	; 0xc2
 800163c:	f000 f8da 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001640:	20b6      	movs	r0, #182	; 0xb6
 8001642:	f000 f8ca 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001646:	200a      	movs	r0, #10
 8001648:	f000 f8d4 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800164c:	20a7      	movs	r0, #167	; 0xa7
 800164e:	f000 f8d1 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001652:	2027      	movs	r0, #39	; 0x27
 8001654:	f000 f8ce 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001658:	2004      	movs	r0, #4
 800165a:	f000 f8cb 	bl	80017f4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800165e:	202a      	movs	r0, #42	; 0x2a
 8001660:	f000 f8bb 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f8c5 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f8c2 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001670:	2000      	movs	r0, #0
 8001672:	f000 f8bf 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001676:	20ef      	movs	r0, #239	; 0xef
 8001678:	f000 f8bc 	bl	80017f4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800167c:	202b      	movs	r0, #43	; 0x2b
 800167e:	f000 f8ac 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f8b6 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f8b3 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800168e:	2001      	movs	r0, #1
 8001690:	f000 f8b0 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001694:	203f      	movs	r0, #63	; 0x3f
 8001696:	f000 f8ad 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800169a:	20f6      	movs	r0, #246	; 0xf6
 800169c:	f000 f89d 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f000 f8a7 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f8a4 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80016ac:	2006      	movs	r0, #6
 80016ae:	f000 f8a1 	bl	80017f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80016b2:	202c      	movs	r0, #44	; 0x2c
 80016b4:	f000 f891 	bl	80017da <ili9341_WriteReg>
  LCD_Delay(200);
 80016b8:	20c8      	movs	r0, #200	; 0xc8
 80016ba:	f000 fc8f 	bl	8001fdc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80016be:	2026      	movs	r0, #38	; 0x26
 80016c0:	f000 f88b 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f000 f895 	bl	80017f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80016ca:	20e0      	movs	r0, #224	; 0xe0
 80016cc:	f000 f885 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80016d0:	200f      	movs	r0, #15
 80016d2:	f000 f88f 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80016d6:	2029      	movs	r0, #41	; 0x29
 80016d8:	f000 f88c 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80016dc:	2024      	movs	r0, #36	; 0x24
 80016de:	f000 f889 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80016e2:	200c      	movs	r0, #12
 80016e4:	f000 f886 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f000 f883 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80016ee:	2009      	movs	r0, #9
 80016f0:	f000 f880 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80016f4:	204e      	movs	r0, #78	; 0x4e
 80016f6:	f000 f87d 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80016fa:	2078      	movs	r0, #120	; 0x78
 80016fc:	f000 f87a 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001700:	203c      	movs	r0, #60	; 0x3c
 8001702:	f000 f877 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001706:	2009      	movs	r0, #9
 8001708:	f000 f874 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800170c:	2013      	movs	r0, #19
 800170e:	f000 f871 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001712:	2005      	movs	r0, #5
 8001714:	f000 f86e 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001718:	2017      	movs	r0, #23
 800171a:	f000 f86b 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800171e:	2011      	movs	r0, #17
 8001720:	f000 f868 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 f865 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800172a:	20e1      	movs	r0, #225	; 0xe1
 800172c:	f000 f855 	bl	80017da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001730:	2000      	movs	r0, #0
 8001732:	f000 f85f 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001736:	2016      	movs	r0, #22
 8001738:	f000 f85c 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800173c:	201b      	movs	r0, #27
 800173e:	f000 f859 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001742:	2004      	movs	r0, #4
 8001744:	f000 f856 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001748:	2011      	movs	r0, #17
 800174a:	f000 f853 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800174e:	2007      	movs	r0, #7
 8001750:	f000 f850 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001754:	2031      	movs	r0, #49	; 0x31
 8001756:	f000 f84d 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800175a:	2033      	movs	r0, #51	; 0x33
 800175c:	f000 f84a 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001760:	2042      	movs	r0, #66	; 0x42
 8001762:	f000 f847 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001766:	2005      	movs	r0, #5
 8001768:	f000 f844 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800176c:	200c      	movs	r0, #12
 800176e:	f000 f841 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001772:	200a      	movs	r0, #10
 8001774:	f000 f83e 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001778:	2028      	movs	r0, #40	; 0x28
 800177a:	f000 f83b 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800177e:	202f      	movs	r0, #47	; 0x2f
 8001780:	f000 f838 	bl	80017f4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001784:	200f      	movs	r0, #15
 8001786:	f000 f835 	bl	80017f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800178a:	2011      	movs	r0, #17
 800178c:	f000 f825 	bl	80017da <ili9341_WriteReg>
  LCD_Delay(200);
 8001790:	20c8      	movs	r0, #200	; 0xc8
 8001792:	f000 fc23 	bl	8001fdc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001796:	2029      	movs	r0, #41	; 0x29
 8001798:	f000 f81f 	bl	80017da <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800179c:	202c      	movs	r0, #44	; 0x2c
 800179e:	f000 f81c 	bl	80017da <ili9341_WriteReg>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80017aa:	f000 fb29 	bl	8001e00 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80017ae:	2103      	movs	r1, #3
 80017b0:	20d3      	movs	r0, #211	; 0xd3
 80017b2:	f000 f82c 	bl	800180e <ili9341_ReadData>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29b      	uxth	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}

080017be <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80017c2:	2029      	movs	r0, #41	; 0x29
 80017c4:	f000 f809 	bl	80017da <ili9341_WriteReg>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80017d0:	2028      	movs	r0, #40	; 0x28
 80017d2:	f000 f802 	bl	80017da <ili9341_WriteReg>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}

080017da <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fba4 	bl	8001f34 <LCD_IO_WriteReg>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fb75 	bl	8001ef0 <LCD_IO_WriteData>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	460a      	mov	r2, r1
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	4613      	mov	r3, r2
 800181c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fba7 	bl	8001f78 <LCD_IO_ReadData>
 800182a:	4603      	mov	r3, r0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001838:	23f0      	movs	r3, #240	; 0xf0
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001848:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001864:	f000 fbc6 	bl	8001ff4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800186e:	f107 030f 	add.w	r3, r7, #15
 8001872:	2201      	movs	r2, #1
 8001874:	2120      	movs	r1, #32
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fc08 	bl	800208c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001886:	f107 030f 	add.w	r3, r7, #15
 800188a:	2201      	movs	r2, #1
 800188c:	2123      	movs	r1, #35	; 0x23
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fbfc 	bl	800208c <GYRO_IO_Write>
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80018b0:	f000 fba0 	bl	8001ff4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	2201      	movs	r2, #1
 80018b8:	210f      	movs	r1, #15
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fc18 	bl	80020f0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	2201      	movs	r2, #1
 80018d4:	2124      	movs	r1, #36	; 0x24
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fc0a 	bl	80020f0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	2201      	movs	r2, #1
 80018ea:	2124      	movs	r1, #36	; 0x24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fbcd 	bl	800208c <GYRO_IO_Write>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800190e:	f107 030f 	add.w	r3, r7, #15
 8001912:	2201      	movs	r2, #1
 8001914:	2120      	movs	r1, #32
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fbb8 	bl	800208c <GYRO_IO_Write>
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	2300      	movs	r3, #0
 8001934:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001936:	f107 030f 	add.w	r3, r7, #15
 800193a:	2201      	movs	r2, #1
 800193c:	2130      	movs	r1, #48	; 0x30
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fbd6 	bl	80020f0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001944:	f107 030e 	add.w	r3, r7, #14
 8001948:	2201      	movs	r2, #1
 800194a:	2122      	movs	r1, #34	; 0x22
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fbcf 	bl	80020f0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001958:	b2db      	uxtb	r3, r3
 800195a:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	121b      	asrs	r3, r3, #8
 8001962:	b25a      	sxtb	r2, r3
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	b25b      	sxtb	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b25b      	sxtb	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	f023 0320 	bic.w	r3, r3, #32
 8001976:	b2db      	uxtb	r3, r3
 8001978:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	4313      	orrs	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001986:	f107 030f 	add.w	r3, r7, #15
 800198a:	2201      	movs	r2, #1
 800198c:	2130      	movs	r1, #48	; 0x30
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fb7c 	bl	800208c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001994:	f107 030e 	add.w	r3, r7, #14
 8001998:	2201      	movs	r2, #1
 800199a:	2122      	movs	r1, #34	; 0x22
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fb75 	bl	800208c <GYRO_IO_Write>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80019b4:	f107 030f 	add.w	r3, r7, #15
 80019b8:	2201      	movs	r2, #1
 80019ba:	2122      	movs	r1, #34	; 0x22
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fb97 	bl	80020f0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e00c      	b.n	80019f8 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d109      	bne.n	80019f8 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	f023 0308 	bic.w	r3, r3, #8
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80019f8:	f107 030f 	add.w	r3, r7, #15
 80019fc:	2201      	movs	r2, #1
 80019fe:	2122      	movs	r1, #34	; 0x22
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fb43 	bl	800208c <GYRO_IO_Write>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001a18:	f107 030f 	add.w	r3, r7, #15
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2122      	movs	r1, #34	; 0x22
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fb65 	bl	80020f0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e009      	b.n	8001a50 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f023 0308 	bic.w	r3, r3, #8
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001a50:	f107 030f 	add.w	r3, r7, #15
 8001a54:	2201      	movs	r2, #1
 8001a56:	2122      	movs	r1, #34	; 0x22
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fb17 	bl	800208c <GYRO_IO_Write>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001a70:	f107 030f 	add.w	r3, r7, #15
 8001a74:	2201      	movs	r2, #1
 8001a76:	2121      	movs	r1, #33	; 0x21
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fb39 	bl	80020f0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001a92:	f107 030f 	add.w	r3, r7, #15
 8001a96:	2201      	movs	r2, #1
 8001a98:	2121      	movs	r1, #33	; 0x21
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 faf6 	bl	800208c <GYRO_IO_Write>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001ab2:	f107 030f 	add.w	r3, r7, #15
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2124      	movs	r1, #36	; 0x24
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fb18 	bl	80020f0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	f023 0310 	bic.w	r3, r3, #16
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001ad4:	f107 030f 	add.w	r3, r7, #15
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2124      	movs	r1, #36	; 0x24
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fad5 	bl	800208c <GYRO_IO_Write>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	2300      	movs	r3, #0
 8001afa:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001b14:	f107 030f 	add.w	r3, r7, #15
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2123      	movs	r1, #35	; 0x23
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fae7 	bl	80020f0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2206      	movs	r2, #6
 8001b28:	2128      	movs	r1, #40	; 0x28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fae0 	bl	80020f0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d123      	bne.n	8001b82 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	e01c      	b.n	8001b7a <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	3301      	adds	r3, #1
 8001b46:	3328      	adds	r3, #40	; 0x28
 8001b48:	443b      	add	r3, r7
 8001b4a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	3328      	adds	r3, #40	; 0x28
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	3328      	adds	r3, #40	; 0x28
 8001b6e:	443b      	add	r3, r7
 8001b70:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	3301      	adds	r3, #1
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	dddf      	ble.n	8001b40 <L3GD20_ReadXYZAngRate+0x54>
 8001b80:	e022      	b.n	8001bc8 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
 8001b86:	e01c      	b.n	8001bc2 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	3328      	adds	r3, #40	; 0x28
 8001b8e:	443b      	add	r3, r7
 8001b90:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	3328      	adds	r3, #40	; 0x28
 8001ba2:	443b      	add	r3, r7
 8001ba4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	3328      	adds	r3, #40	; 0x28
 8001bb6:	443b      	add	r3, r7
 8001bb8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	dddf      	ble.n	8001b88 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d00c      	beq.n	8001bec <L3GD20_ReadXYZAngRate+0x100>
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	dc0d      	bgt.n	8001bf2 <L3GD20_ReadXYZAngRate+0x106>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <L3GD20_ReadXYZAngRate+0xf4>
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d003      	beq.n	8001be6 <L3GD20_ReadXYZAngRate+0xfa>
 8001bde:	e008      	b.n	8001bf2 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <L3GD20_ReadXYZAngRate+0x14c>)
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001be4:	e005      	b.n	8001bf2 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <L3GD20_ReadXYZAngRate+0x150>)
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001bea:	e002      	b.n	8001bf2 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <L3GD20_ReadXYZAngRate+0x154>)
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001bf0:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	e016      	b.n	8001c26 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	3328      	adds	r3, #40	; 0x28
 8001bfe:	443b      	add	r3, r7
 8001c00:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	3301      	adds	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	dde5      	ble.n	8001bf8 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	410c0000 	.word	0x410c0000
 8001c3c:	418c0000 	.word	0x418c0000
 8001c40:	428c0000 	.word	0x428c0000

08001c44 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c48:	4819      	ldr	r0, [pc, #100]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c4a:	f005 fbae 	bl	80073aa <HAL_SPI_GetState>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d12b      	bne.n	8001cac <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <SPIx_Init+0x70>)
 8001c58:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c5c:	2218      	movs	r2, #24
 8001c5e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c90:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SPIx_Init+0x6c>)
 8001c9a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c9e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <SPIx_Init+0x6c>)
 8001ca2:	f000 f873 	bl	8001d8c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001ca6:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <SPIx_Init+0x6c>)
 8001ca8:	f004 fecb 	bl	8006a42 <HAL_SPI_Init>
  } 
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000048c 	.word	0x2000048c
 8001cb4:	40015000 	.word	0x40015000

08001cb8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <SPIx_Read+0x38>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f107 0108 	add.w	r1, r7, #8
 8001cd2:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <SPIx_Read+0x3c>)
 8001cd4:	f005 f8b6 	bl	8006e44 <HAL_SPI_Receive>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001ce2:	f000 f847 	bl	8001d74 <SPIx_Error>
  }
  
  return readvalue;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000070 	.word	0x20000070
 8001cf4:	2000048c 	.word	0x2000048c

08001cf8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <SPIx_Write+0x34>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1db9      	adds	r1, r7, #6
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4808      	ldr	r0, [pc, #32]	; (8001d30 <SPIx_Write+0x38>)
 8001d10:	f004 ff5c 	bl	8006bcc <HAL_SPI_Transmit>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001d1e:	f000 f829 	bl	8001d74 <SPIx_Error>
  }
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000070 	.word	0x20000070
 8001d30:	2000048c 	.word	0x2000048c

08001d34 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <SPIx_WriteRead+0x38>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f107 020f 	add.w	r2, r7, #15
 8001d4a:	1df9      	adds	r1, r7, #7
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4807      	ldr	r0, [pc, #28]	; (8001d70 <SPIx_WriteRead+0x3c>)
 8001d52:	f005 f988 	bl	8007066 <HAL_SPI_TransmitReceive>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001d5c:	f000 f80a 	bl	8001d74 <SPIx_Error>
  }
  
  return receivedbyte;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000070 	.word	0x20000070
 8001d70:	2000048c 	.word	0x2000048c

08001d74 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <SPIx_Error+0x14>)
 8001d7a:	f004 feeb 	bl	8006b54 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001d7e:	f7ff ff61 	bl	8001c44 <SPIx_Init>
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000048c 	.word	0x2000048c

08001d8c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <SPIx_MspInit+0x6c>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <SPIx_MspInit+0x6c>)
 8001d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001da2:	6453      	str	r3, [r2, #68]	; 0x44
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <SPIx_MspInit+0x6c>)
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <SPIx_MspInit+0x6c>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <SPIx_MspInit+0x6c>)
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <SPIx_MspInit+0x6c>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001dcc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001dde:	2305      	movs	r3, #5
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <SPIx_MspInit+0x70>)
 8001dea:	f002 f843 	bl	8003e74 <HAL_GPIO_Init>
}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40021400 	.word	0x40021400

08001e00 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <LCD_IO_Init+0xe0>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d164      	bne.n	8001ed8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <LCD_IO_Init+0xe0>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4a31      	ldr	r2, [pc, #196]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6313      	str	r3, [r2, #48]	; 0x30
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	4619      	mov	r1, r3
 8001e48:	4827      	ldr	r0, [pc, #156]	; (8001ee8 <LCD_IO_Init+0xe8>)
 8001e4a:	f002 f813 	bl	8003e74 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <LCD_IO_Init+0xe8>)
 8001e84:	f001 fff6 	bl	8003e74 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <LCD_IO_Init+0xe4>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480c      	ldr	r0, [pc, #48]	; (8001eec <LCD_IO_Init+0xec>)
 8001ebc:	f001 ffda 	bl	8003e74 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <LCD_IO_Init+0xec>)
 8001ec6:	f002 f981 	bl	80041cc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4807      	ldr	r0, [pc, #28]	; (8001eec <LCD_IO_Init+0xec>)
 8001ed0:	f002 f97c 	bl	80041cc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001ed4:	f7ff feb6 	bl	8001c44 <SPIx_Init>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200004e4 	.word	0x200004e4
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40020800 	.word	0x40020800

08001ef0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f00:	480a      	ldr	r0, [pc, #40]	; (8001f2c <LCD_IO_WriteData+0x3c>)
 8001f02:	f002 f963 	bl	80041cc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001f06:	2200      	movs	r2, #0
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <LCD_IO_WriteData+0x40>)
 8001f0c:	f002 f95e 	bl	80041cc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fef0 	bl	8001cf8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f18:	2201      	movs	r2, #1
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	4804      	ldr	r0, [pc, #16]	; (8001f30 <LCD_IO_WriteData+0x40>)
 8001f1e:	f002 f955 	bl	80041cc <HAL_GPIO_WritePin>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40020800 	.word	0x40020800

08001f34 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f44:	480a      	ldr	r0, [pc, #40]	; (8001f70 <LCD_IO_WriteReg+0x3c>)
 8001f46:	f002 f941 	bl	80041cc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <LCD_IO_WriteReg+0x40>)
 8001f50:	f002 f93c 	bl	80041cc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fecd 	bl	8001cf8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2104      	movs	r1, #4
 8001f62:	4804      	ldr	r0, [pc, #16]	; (8001f74 <LCD_IO_WriteReg+0x40>)
 8001f64:	f002 f932 	bl	80041cc <HAL_GPIO_WritePin>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40020800 	.word	0x40020800

08001f78 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460a      	mov	r2, r1
 8001f82:	80fb      	strh	r3, [r7, #6]
 8001f84:	4613      	mov	r3, r2
 8001f86:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2104      	movs	r1, #4
 8001f90:	4810      	ldr	r0, [pc, #64]	; (8001fd4 <LCD_IO_ReadData+0x5c>)
 8001f92:	f002 f91b 	bl	80041cc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f9c:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <LCD_IO_ReadData+0x60>)
 8001f9e:	f002 f915 	bl	80041cc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fea7 	bl	8001cf8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001faa:	797b      	ldrb	r3, [r7, #5]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fe83 	bl	8001cb8 <SPIx_Read>
 8001fb2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <LCD_IO_ReadData+0x60>)
 8001fbc:	f002 f906 	bl	80041cc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <LCD_IO_ReadData+0x5c>)
 8001fc6:	f002 f901 	bl	80041cc <HAL_GPIO_WritePin>
  
  return readvalue;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020c00 	.word	0x40020c00

08001fdc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f001 f9bb 	bl	8003360 <HAL_Delay>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <GYRO_IO_Init+0x8c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <GYRO_IO_Init+0x8c>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <GYRO_IO_Init+0x8c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002016:	2302      	movs	r3, #2
 8002018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	4619      	mov	r1, r3
 800202c:	4815      	ldr	r0, [pc, #84]	; (8002084 <GYRO_IO_Init+0x90>)
 800202e:	f001 ff21 	bl	8003e74 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002032:	2201      	movs	r2, #1
 8002034:	2102      	movs	r1, #2
 8002036:	4813      	ldr	r0, [pc, #76]	; (8002084 <GYRO_IO_Init+0x90>)
 8002038:	f002 f8c8 	bl	80041cc <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <GYRO_IO_Init+0x8c>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <GYRO_IO_Init+0x8c>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6313      	str	r3, [r2, #48]	; 0x30
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <GYRO_IO_Init+0x8c>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002058:	2306      	movs	r3, #6
 800205a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <GYRO_IO_Init+0x94>)
 8002070:	f001 ff00 	bl	8003e74 <HAL_GPIO_Init>

  SPIx_Init();
 8002074:	f7ff fde6 	bl	8001c44 <SPIx_Init>
}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	40020800 	.word	0x40020800
 8002088:	40020000 	.word	0x40020000

0800208c <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
 8002098:	4613      	mov	r3, r2
 800209a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800209c:	883b      	ldrh	r3, [r7, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d903      	bls.n	80020aa <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80020aa:	2200      	movs	r2, #0
 80020ac:	2102      	movs	r1, #2
 80020ae:	480f      	ldr	r0, [pc, #60]	; (80020ec <GYRO_IO_Write+0x60>)
 80020b0:	f002 f88c 	bl	80041cc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fe3c 	bl	8001d34 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80020bc:	e00a      	b.n	80020d4 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fe36 	bl	8001d34 <SPIx_WriteRead>
    NumByteToWrite--;
 80020c8:	883b      	ldrh	r3, [r7, #0]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3301      	adds	r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80020d4:	883b      	ldrh	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f1      	bne.n	80020be <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80020da:	2201      	movs	r2, #1
 80020dc:	2102      	movs	r1, #2
 80020de:	4803      	ldr	r0, [pc, #12]	; (80020ec <GYRO_IO_Write+0x60>)
 80020e0:	f002 f874 	bl	80041cc <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40020800 	.word	0x40020800

080020f0 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
 80020fc:	4613      	mov	r3, r2
 80020fe:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002100:	883b      	ldrh	r3, [r7, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d904      	bls.n	8002110 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800210c:	70fb      	strb	r3, [r7, #3]
 800210e:	e003      	b.n	8002118 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002116:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002118:	2200      	movs	r2, #0
 800211a:	2102      	movs	r1, #2
 800211c:	4810      	ldr	r0, [pc, #64]	; (8002160 <GYRO_IO_Read+0x70>)
 800211e:	f002 f855 	bl	80041cc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe05 	bl	8001d34 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800212a:	e00c      	b.n	8002146 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff fe01 	bl	8001d34 <SPIx_WriteRead>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800213a:	883b      	ldrh	r3, [r7, #0]
 800213c:	3b01      	subs	r3, #1
 800213e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3301      	adds	r3, #1
 8002144:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002146:	883b      	ldrh	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ef      	bne.n	800212c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800214c:	2201      	movs	r2, #1
 800214e:	2102      	movs	r1, #2
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <GYRO_IO_Read+0x70>)
 8002152:	f002 f83b 	bl	80041cc <HAL_GPIO_WritePin>
}  
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40020800 	.word	0x40020800

08002164 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800216e:	2300      	movs	r3, #0
 8002170:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002172:	2300      	movs	r3, #0
 8002174:	703b      	strb	r3, [r7, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <BSP_GYRO_Init+0xc4>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4798      	blx	r3
 8002180:	4603      	mov	r3, r0
 8002182:	2bd4      	cmp	r3, #212	; 0xd4
 8002184:	d005      	beq.n	8002192 <BSP_GYRO_Init+0x2e>
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <BSP_GYRO_Init+0xc4>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4798      	blx	r3
 800218c:	4603      	mov	r3, r0
 800218e:	2bd5      	cmp	r3, #213	; 0xd5
 8002190:	d145      	bne.n	800221e <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <BSP_GYRO_Init+0xc8>)
 8002194:	4a24      	ldr	r2, [pc, #144]	; (8002228 <BSP_GYRO_Init+0xc4>)
 8002196:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002198:	2308      	movs	r3, #8
 800219a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800219c:	2300      	movs	r3, #0
 800219e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80021a0:	2307      	movs	r3, #7
 80021a2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80021a4:	2330      	movs	r3, #48	; 0x30
 80021a6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80021a8:	2300      	movs	r3, #0
 80021aa:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80021ac:	2300      	movs	r3, #0
 80021ae:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80021b0:	2310      	movs	r3, #16
 80021b2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80021b4:	793a      	ldrb	r2, [r7, #4]
 80021b6:	797b      	ldrb	r3, [r7, #5]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80021bc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80021be:	4313      	orrs	r3, r2
 80021c0:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80021c2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80021ca:	7a3a      	ldrb	r2, [r7, #8]
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80021d2:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	b29b      	uxth	r3, r3
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b29a      	uxth	r2, r3
 80021de:	89bb      	ldrh	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <BSP_GYRO_Init+0xc8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	89ba      	ldrh	r2, [r7, #12]
 80021ec:	4610      	mov	r0, r2
 80021ee:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80021f0:	2300      	movs	r3, #0
 80021f2:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80021f8:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80021fa:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <BSP_GYRO_Init+0xc8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	89ba      	ldrh	r2, [r7, #12]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	4610      	mov	r0, r2
 800220e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <BSP_GYRO_Init+0xc8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	2010      	movs	r0, #16
 8002218:	4798      	blx	r3

    ret = GYRO_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000003c 	.word	0x2000003c
 800222c:	200004e8 	.word	0x200004e8

08002230 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <BSP_GYRO_GetXYZ+0x24>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <BSP_GYRO_GetXYZ+0x24>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200004e8 	.word	0x200004e8

08002258 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <BSP_LCD_Init+0xbc>)
 800225e:	4a2e      	ldr	r2, [pc, #184]	; (8002318 <BSP_LCD_Init+0xc0>)
 8002260:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <BSP_LCD_Init+0xbc>)
 8002264:	2209      	movs	r2, #9
 8002266:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <BSP_LCD_Init+0xbc>)
 800226a:	2201      	movs	r2, #1
 800226c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <BSP_LCD_Init+0xbc>)
 8002270:	221d      	movs	r2, #29
 8002272:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <BSP_LCD_Init+0xbc>)
 8002276:	2203      	movs	r2, #3
 8002278:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <BSP_LCD_Init+0xbc>)
 800227c:	f240 120d 	movw	r2, #269	; 0x10d
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <BSP_LCD_Init+0xbc>)
 8002284:	f240 1243 	movw	r2, #323	; 0x143
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <BSP_LCD_Init+0xbc>)
 800228c:	f240 1217 	movw	r2, #279	; 0x117
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <BSP_LCD_Init+0xbc>)
 8002294:	f240 1247 	movw	r2, #327	; 0x147
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <BSP_LCD_Init+0xbc>)
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <BSP_LCD_Init+0xbc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <BSP_LCD_Init+0xbc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <BSP_LCD_Init+0xc4>)
 80022b4:	2208      	movs	r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <BSP_LCD_Init+0xc4>)
 80022ba:	22c0      	movs	r2, #192	; 0xc0
 80022bc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <BSP_LCD_Init+0xc4>)
 80022c0:	2204      	movs	r2, #4
 80022c2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <BSP_LCD_Init+0xc4>)
 80022c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80022cc:	4813      	ldr	r0, [pc, #76]	; (800231c <BSP_LCD_Init+0xc4>)
 80022ce:	f004 f95d 	bl	800658c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <BSP_LCD_Init+0xbc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <BSP_LCD_Init+0xbc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <BSP_LCD_Init+0xbc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <BSP_LCD_Init+0xbc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80022ea:	f000 fc0f 	bl	8002b0c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80022ee:	4809      	ldr	r0, [pc, #36]	; (8002314 <BSP_LCD_Init+0xbc>)
 80022f0:	f001 ff86 	bl	8004200 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <BSP_LCD_Init+0xc8>)
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <BSP_LCD_Init+0xcc>)
 80022f8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <BSP_LCD_Init+0xc8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002302:	f000 fdf1 	bl	8002ee8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002306:	4808      	ldr	r0, [pc, #32]	; (8002328 <BSP_LCD_Init+0xd0>)
 8002308:	f000 f8ce 	bl	80024a8 <BSP_LCD_SetFont>

  return LCD_OK;
 800230c:	2300      	movs	r3, #0
}  
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200004ec 	.word	0x200004ec
 8002318:	40016800 	.word	0x40016800
 800231c:	200005d4 	.word	0x200005d4
 8002320:	20000620 	.word	0x20000620
 8002324:	20000004 	.word	0x20000004
 8002328:	20000074 	.word	0x20000074

0800232c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <BSP_LCD_GetXSize+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	4798      	blx	r3
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000620 	.word	0x20000620

08002344 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <BSP_LCD_GetYSize+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	4798      	blx	r3
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000620 	.word	0x20000620

0800235c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800235c:	b580      	push	{r7, lr}
 800235e:	b090      	sub	sp, #64	; 0x40
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800236c:	f7ff ffde 	bl	800232c <BSP_LCD_GetXSize>
 8002370:	4603      	mov	r3, r0
 8002372:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002378:	f7ff ffe4 	bl	8002344 <BSP_LCD_GetYSize>
 800237c:	4603      	mov	r3, r0
 800237e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002388:	23ff      	movs	r3, #255	; 0xff
 800238a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023a8:	2307      	movs	r3, #7
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80023ac:	f7ff ffbe 	bl	800232c <BSP_LCD_GetXSize>
 80023b0:	4603      	mov	r3, r0
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80023b4:	f7ff ffc6 	bl	8002344 <BSP_LCD_GetYSize>
 80023b8:	4603      	mov	r3, r0
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	4619      	mov	r1, r3
 80023c4:	4814      	ldr	r0, [pc, #80]	; (8002418 <BSP_LCD_LayerDefaultInit+0xbc>)
 80023c6:	f001 fff5 	bl	80043b4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	4913      	ldr	r1, [pc, #76]	; (800241c <BSP_LCD_LayerDefaultInit+0xc0>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3304      	adds	r3, #4
 80023da:	f04f 32ff 	mov.w	r2, #4294967295
 80023de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	490e      	ldr	r1, [pc, #56]	; (800241c <BSP_LCD_LayerDefaultInit+0xc0>)
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3308      	adds	r3, #8
 80023f0:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <BSP_LCD_LayerDefaultInit+0xc4>)
 80023f2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	4909      	ldr	r1, [pc, #36]	; (800241c <BSP_LCD_LayerDefaultInit+0xc0>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002406:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <BSP_LCD_LayerDefaultInit+0xbc>)
 800240a:	f002 f811 	bl	8004430 <HAL_LTDC_EnableDither>
}
 800240e:	bf00      	nop
 8002410:	3740      	adds	r7, #64	; 0x40
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200004ec 	.word	0x200004ec
 800241c:	20000608 	.word	0x20000608
 8002420:	20000074 	.word	0x20000074

08002424 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <BSP_LCD_SelectLayer+0x1c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000604 	.word	0x20000604

08002444 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <BSP_LCD_SetTextColor+0x28>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4907      	ldr	r1, [pc, #28]	; (8002470 <BSP_LCD_SetTextColor+0x2c>)
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	20000604 	.word	0x20000604
 8002470:	20000608 	.word	0x20000608

08002474 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <BSP_LCD_SetBackColor+0x2c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4908      	ldr	r1, [pc, #32]	; (80024a4 <BSP_LCD_SetBackColor+0x30>)
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	3304      	adds	r3, #4
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000604 	.word	0x20000604
 80024a4:	20000608 	.word	0x20000608

080024a8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <BSP_LCD_SetFont+0x2c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4908      	ldr	r1, [pc, #32]	; (80024d8 <BSP_LCD_SetFont+0x30>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3308      	adds	r3, #8
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000604 	.word	0x20000604
 80024d8:	20000608 	.word	0x20000608

080024dc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <BSP_LCD_GetFont+0x24>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <BSP_LCD_GetFont+0x28>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3308      	adds	r3, #8
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000604 	.word	0x20000604
 8002504:	20000608 	.word	0x20000608

08002508 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b085      	sub	sp, #20
 800250c:	af02      	add	r7, sp, #8
 800250e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <BSP_LCD_Clear+0x48>)
 8002512:	681c      	ldr	r4, [r3, #0]
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <BSP_LCD_Clear+0x48>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <BSP_LCD_Clear+0x4c>)
 800251a:	2134      	movs	r1, #52	; 0x34
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	335c      	adds	r3, #92	; 0x5c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461e      	mov	r6, r3
 8002528:	f7ff ff00 	bl	800232c <BSP_LCD_GetXSize>
 800252c:	4605      	mov	r5, r0
 800252e:	f7ff ff09 	bl	8002344 <BSP_LCD_GetYSize>
 8002532:	4602      	mov	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	462a      	mov	r2, r5
 8002540:	4631      	mov	r1, r6
 8002542:	4620      	mov	r0, r4
 8002544:	f000 fc98 	bl	8002e78 <FillBuffer>
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002550:	20000604 	.word	0x20000604
 8002554:	200004ec 	.word	0x200004ec

08002558 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
 8002562:	460b      	mov	r3, r1
 8002564:	80bb      	strh	r3, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <BSP_LCD_DisplayChar+0x80>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	491b      	ldr	r1, [pc, #108]	; (80025dc <BSP_LCD_DisplayChar+0x84>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3308      	adds	r3, #8
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <BSP_LCD_DisplayChar+0x80>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4c14      	ldr	r4, [pc, #80]	; (80025dc <BSP_LCD_DisplayChar+0x84>)
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4423      	add	r3, r4
 8002596:	3308      	adds	r3, #8
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800259c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <BSP_LCD_DisplayChar+0x80>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4c0d      	ldr	r4, [pc, #52]	; (80025dc <BSP_LCD_DisplayChar+0x84>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4423      	add	r3, r4
 80025b0:	3308      	adds	r3, #8
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	889b      	ldrh	r3, [r3, #4]
 80025b6:	3307      	adds	r3, #7
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da00      	bge.n	80025be <BSP_LCD_DisplayChar+0x66>
 80025bc:	3307      	adds	r3, #7
 80025be:	10db      	asrs	r3, r3, #3
 80025c0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80025c4:	18ca      	adds	r2, r1, r3
 80025c6:	88b9      	ldrh	r1, [r7, #4]
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fb9a 	bl	8002d04 <DrawChar>
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	20000604 	.word	0x20000604
 80025dc:	20000608 	.word	0x20000608

080025e0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60ba      	str	r2, [r7, #8]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	81fb      	strh	r3, [r7, #14]
 80025ee:	460b      	mov	r3, r1
 80025f0:	81bb      	strh	r3, [r7, #12]
 80025f2:	4613      	mov	r3, r2
 80025f4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80025f6:	2301      	movs	r3, #1
 80025f8:	83fb      	strh	r3, [r7, #30]
 80025fa:	2300      	movs	r3, #0
 80025fc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800260a:	e002      	b.n	8002612 <BSP_LCD_DisplayStringAt+0x32>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	3301      	adds	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	617a      	str	r2, [r7, #20]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f6      	bne.n	800260c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800261e:	f7ff fe85 	bl	800232c <BSP_LCD_GetXSize>
 8002622:	4601      	mov	r1, r0
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <BSP_LCD_DisplayStringAt+0x174>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	484b      	ldr	r0, [pc, #300]	; (8002758 <BSP_LCD_DisplayStringAt+0x178>)
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4403      	add	r3, r0
 8002634:	3308      	adds	r3, #8
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	889b      	ldrh	r3, [r3, #4]
 800263a:	fbb1 f3f3 	udiv	r3, r1, r3
 800263e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d01c      	beq.n	8002680 <BSP_LCD_DisplayStringAt+0xa0>
 8002646:	2b03      	cmp	r3, #3
 8002648:	dc33      	bgt.n	80026b2 <BSP_LCD_DisplayStringAt+0xd2>
 800264a:	2b01      	cmp	r3, #1
 800264c:	d002      	beq.n	8002654 <BSP_LCD_DisplayStringAt+0x74>
 800264e:	2b02      	cmp	r3, #2
 8002650:	d019      	beq.n	8002686 <BSP_LCD_DisplayStringAt+0xa6>
 8002652:	e02e      	b.n	80026b2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad1      	subs	r1, r2, r3
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <BSP_LCD_DisplayStringAt+0x174>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	483e      	ldr	r0, [pc, #248]	; (8002758 <BSP_LCD_DisplayStringAt+0x178>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4403      	add	r3, r0
 800266a:	3308      	adds	r3, #8
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	889b      	ldrh	r3, [r3, #4]
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	89fb      	ldrh	r3, [r7, #14]
 800267a:	4413      	add	r3, r2
 800267c:	83fb      	strh	r3, [r7, #30]
      break;
 800267e:	e01b      	b.n	80026b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	83fb      	strh	r3, [r7, #30]
      break;
 8002684:	e018      	b.n	80026b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	b299      	uxth	r1, r3
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <BSP_LCD_DisplayStringAt+0x174>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4831      	ldr	r0, [pc, #196]	; (8002758 <BSP_LCD_DisplayStringAt+0x178>)
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4403      	add	r3, r0
 800269e:	3308      	adds	r3, #8
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	889b      	ldrh	r3, [r3, #4]
 80026a4:	fb11 f303 	smulbb	r3, r1, r3
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	89fb      	ldrh	r3, [r7, #14]
 80026ac:	4413      	add	r3, r2
 80026ae:	83fb      	strh	r3, [r7, #30]
      break;
 80026b0:	e002      	b.n	80026b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80026b2:	89fb      	ldrh	r3, [r7, #14]
 80026b4:	83fb      	strh	r3, [r7, #30]
      break;
 80026b6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80026b8:	e01a      	b.n	80026f0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	89b9      	ldrh	r1, [r7, #12]
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff48 	bl	8002558 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <BSP_LCD_DisplayStringAt+0x174>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4922      	ldr	r1, [pc, #136]	; (8002758 <BSP_LCD_DisplayStringAt+0x178>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3308      	adds	r3, #8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	889a      	ldrh	r2, [r3, #4]
 80026de:	8bfb      	ldrh	r3, [r7, #30]
 80026e0:	4413      	add	r3, r2
 80026e2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3301      	adds	r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
    i++;
 80026ea:	8bbb      	ldrh	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2dc      	uxtb	r4, r3
 80026fe:	f7ff fe15 	bl	800232c <BSP_LCD_GetXSize>
 8002702:	8bb9      	ldrh	r1, [r7, #28]
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <BSP_LCD_DisplayStringAt+0x174>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4d13      	ldr	r5, [pc, #76]	; (8002758 <BSP_LCD_DisplayStringAt+0x178>)
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	442b      	add	r3, r5
 8002714:	3308      	adds	r3, #8
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	889b      	ldrh	r3, [r3, #4]
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	1ac3      	subs	r3, r0, r3
 8002720:	b299      	uxth	r1, r3
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <BSP_LCD_DisplayStringAt+0x174>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	480c      	ldr	r0, [pc, #48]	; (8002758 <BSP_LCD_DisplayStringAt+0x178>)
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4403      	add	r3, r0
 8002732:	3308      	adds	r3, #8
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	889b      	ldrh	r3, [r3, #4]
 8002738:	4299      	cmp	r1, r3
 800273a:	bf2c      	ite	cs
 800273c:	2301      	movcs	r3, #1
 800273e:	2300      	movcc	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4023      	ands	r3, r4
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1b7      	bne.n	80026ba <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bdb0      	pop	{r4, r5, r7, pc}
 8002754:	20000604 	.word	0x20000604
 8002758:	20000608 	.word	0x20000608

0800275c <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800275c:	b5b0      	push	{r4, r5, r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af02      	add	r7, sp, #8
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
 8002766:	460b      	mov	r3, r1
 8002768:	80bb      	strh	r3, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <BSP_LCD_DrawHLine+0x70>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <BSP_LCD_DrawHLine+0x74>)
 8002778:	2134      	movs	r1, #52	; 0x34
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	335c      	adds	r3, #92	; 0x5c
 8002782:	681c      	ldr	r4, [r3, #0]
 8002784:	f7ff fdd2 	bl	800232c <BSP_LCD_GetXSize>
 8002788:	4602      	mov	r2, r0
 800278a:	88bb      	ldrh	r3, [r7, #4]
 800278c:	fb03 f202 	mul.w	r2, r3, r2
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4423      	add	r3, r4
 8002798:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <BSP_LCD_DrawHLine+0x70>)
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	887c      	ldrh	r4, [r7, #2]
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <BSP_LCD_DrawHLine+0x70>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4d0b      	ldr	r5, [pc, #44]	; (80027d4 <BSP_LCD_DrawHLine+0x78>)
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	442b      	add	r3, r5
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	2300      	movs	r3, #0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2301      	movs	r3, #1
 80027bc:	4622      	mov	r2, r4
 80027be:	f000 fb5b 	bl	8002e78 <FillBuffer>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000604 	.word	0x20000604
 80027d0:	200004ec 	.word	0x200004ec
 80027d4:	20000608 	.word	0x20000608

080027d8 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
 80027e2:	460b      	mov	r3, r1
 80027e4:	80bb      	strh	r3, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	f1c3 0303 	rsb	r3, r3, #3
 80027f2:	617b      	str	r3, [r7, #20]
  curx = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80027fc:	e0c7      	b.n	800298e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	b29a      	uxth	r2, r3
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	4413      	add	r3, r2
 8002806:	b298      	uxth	r0, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	b29b      	uxth	r3, r3
 800280c:	88ba      	ldrh	r2, [r7, #4]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	b299      	uxth	r1, r3
 8002812:	4b64      	ldr	r3, [pc, #400]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4c64      	ldr	r4, [pc, #400]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4423      	add	r3, r4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	f000 fa47 	bl	8002cb8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	b29b      	uxth	r3, r3
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	b298      	uxth	r0, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	b29b      	uxth	r3, r3
 8002838:	88ba      	ldrh	r2, [r7, #4]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	b299      	uxth	r1, r3
 800283e:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4c59      	ldr	r4, [pc, #356]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4423      	add	r3, r4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f000 fa31 	bl	8002cb8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	b29a      	uxth	r2, r3
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	4413      	add	r3, r2
 800285e:	b298      	uxth	r0, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	b29b      	uxth	r3, r3
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	b299      	uxth	r1, r3
 800286a:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4c4e      	ldr	r4, [pc, #312]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4423      	add	r3, r4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	f000 fa1b 	bl	8002cb8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	b29b      	uxth	r3, r3
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b298      	uxth	r0, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	b29b      	uxth	r3, r3
 8002890:	88ba      	ldrh	r2, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	b299      	uxth	r1, r3
 8002896:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4c43      	ldr	r4, [pc, #268]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4423      	add	r3, r4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f000 fa05 	bl	8002cb8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	4413      	add	r3, r2
 80028b6:	b298      	uxth	r0, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	88bb      	ldrh	r3, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	b299      	uxth	r1, r3
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4c38      	ldr	r4, [pc, #224]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4423      	add	r3, r4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f000 f9ef 	bl	8002cb8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	88fa      	ldrh	r2, [r7, #6]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	b298      	uxth	r0, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	b299      	uxth	r1, r3
 80028ee:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4c2d      	ldr	r4, [pc, #180]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4423      	add	r3, r4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	f000 f9d9 	bl	8002cb8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	b29a      	uxth	r2, r3
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	4413      	add	r3, r2
 800290e:	b298      	uxth	r0, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	b29a      	uxth	r2, r3
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	b299      	uxth	r1, r3
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4c22      	ldr	r4, [pc, #136]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4423      	add	r3, r4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	f000 f9c3 	bl	8002cb8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	b29b      	uxth	r3, r3
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b298      	uxth	r0, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	b29a      	uxth	r2, r3
 8002940:	88bb      	ldrh	r3, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	b299      	uxth	r1, r3
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <BSP_LCD_DrawCircle+0x1cc>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4c17      	ldr	r4, [pc, #92]	; (80029a8 <BSP_LCD_DrawCircle+0x1d0>)
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4423      	add	r3, r4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	f000 f9ad 	bl	8002cb8 <BSP_LCD_DrawPixel>

    if (d < 0)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	da06      	bge.n	8002972 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	4413      	add	r3, r2
 800296c:	3306      	adds	r3, #6
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e00a      	b.n	8002988 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4413      	add	r3, r2
 800297e:	330a      	adds	r3, #10
 8002980:	617b      	str	r3, [r7, #20]
      cury--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3b01      	subs	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3301      	adds	r3, #1
 800298c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	429a      	cmp	r2, r3
 8002994:	f67f af33 	bls.w	80027fe <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000604 	.word	0x20000604
 80029a8:	20000608 	.word	0x20000608

080029ac <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
 80029b6:	460b      	mov	r3, r1
 80029b8:	80bb      	strh	r3, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	f1c3 0303 	rsb	r3, r3, #3
 80029c6:	617b      	str	r3, [r7, #20]

  curx = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80029d0:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <BSP_LCD_FillCircle+0x138>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4944      	ldr	r1, [pc, #272]	; (8002ae8 <BSP_LCD_FillCircle+0x13c>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fd2e 	bl	8002444 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80029e8:	e061      	b.n	8002aae <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d021      	beq.n	8002a34 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b298      	uxth	r0, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	88bb      	ldrh	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	b299      	uxth	r1, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f7ff fea5 	bl	800275c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	88ba      	ldrh	r2, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	b299      	uxth	r1, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f7ff fe94 	bl	800275c <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d021      	beq.n	8002a7e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	b298      	uxth	r0, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	88ba      	ldrh	r2, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	b299      	uxth	r1, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff fe80 	bl	800275c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	b298      	uxth	r0, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	88bb      	ldrh	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b299      	uxth	r1, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f7ff fe6f 	bl	800275c <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da06      	bge.n	8002a92 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	009a      	lsls	r2, r3, #2
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3306      	adds	r3, #6
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e00a      	b.n	8002aa8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	330a      	adds	r3, #10
 8002aa0:	617b      	str	r3, [r7, #20]
      cury--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d999      	bls.n	80029ea <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <BSP_LCD_FillCircle+0x138>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	490b      	ldr	r1, [pc, #44]	; (8002ae8 <BSP_LCD_FillCircle+0x13c>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fcbb 	bl	8002444 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	88b9      	ldrh	r1, [r7, #4]
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fe7f 	bl	80027d8 <BSP_LCD_DrawCircle>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000604 	.word	0x20000604
 8002ae8:	20000608 	.word	0x20000608

08002aec <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <BSP_LCD_DisplayOn+0x1c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002afa:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <BSP_LCD_DisplayOn+0x1c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4798      	blx	r3
  }
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000620 	.word	0x20000620

08002b0c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	4b61      	ldr	r3, [pc, #388]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a60      	ldr	r2, [pc, #384]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b5e      	ldr	r3, [pc, #376]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a59      	ldr	r2, [pc, #356]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a44      	ldr	r2, [pc, #272]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b42      	ldr	r3, [pc, #264]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a36      	ldr	r2, [pc, #216]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <BSP_LCD_MspInit+0x190>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002bf2:	f641 0358 	movw	r3, #6232	; 0x1858
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002c00:	2302      	movs	r3, #2
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002c04:	230e      	movs	r3, #14
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4824      	ldr	r0, [pc, #144]	; (8002ca0 <BSP_LCD_MspInit+0x194>)
 8002c10:	f001 f930 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002c14:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4820      	ldr	r0, [pc, #128]	; (8002ca4 <BSP_LCD_MspInit+0x198>)
 8002c22:	f001 f927 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002c26:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c30:	4619      	mov	r1, r3
 8002c32:	481d      	ldr	r0, [pc, #116]	; (8002ca8 <BSP_LCD_MspInit+0x19c>)
 8002c34:	f001 f91e 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002c38:	2348      	movs	r3, #72	; 0x48
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	481a      	ldr	r0, [pc, #104]	; (8002cac <BSP_LCD_MspInit+0x1a0>)
 8002c44:	f001 f916 	bl	8003e74 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c52:	4619      	mov	r1, r3
 8002c54:	4816      	ldr	r0, [pc, #88]	; (8002cb0 <BSP_LCD_MspInit+0x1a4>)
 8002c56:	f001 f90d 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002c5a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c64:	4619      	mov	r1, r3
 8002c66:	4813      	ldr	r0, [pc, #76]	; (8002cb4 <BSP_LCD_MspInit+0x1a8>)
 8002c68:	f001 f904 	bl	8003e74 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002c70:	2309      	movs	r3, #9
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	4619      	mov	r1, r3
 8002c7a:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <BSP_LCD_MspInit+0x198>)
 8002c7c:	f001 f8fa 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002c80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4809      	ldr	r0, [pc, #36]	; (8002cb4 <BSP_LCD_MspInit+0x1a8>)
 8002c8e:	f001 f8f1 	bl	8003e74 <HAL_GPIO_Init>
}
 8002c92:	bf00      	nop
 8002c94:	3738      	adds	r7, #56	; 0x38
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800

08002cb8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	603a      	str	r2, [r7, #0]
 8002cc2:	80fb      	strh	r3, [r7, #6]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <BSP_LCD_DrawPixel+0x44>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <BSP_LCD_DrawPixel+0x48>)
 8002cce:	2134      	movs	r1, #52	; 0x34
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	335c      	adds	r3, #92	; 0x5c
 8002cd8:	681c      	ldr	r4, [r3, #0]
 8002cda:	88bd      	ldrh	r5, [r7, #4]
 8002cdc:	f7ff fb26 	bl	800232c <BSP_LCD_GetXSize>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	fb03 f205 	mul.w	r2, r3, r5
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4423      	add	r3, r4
 8002cee:	461a      	mov	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfc:	20000604 	.word	0x20000604
 8002d00:	200004ec 	.word	0x200004ec

08002d04 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	603a      	str	r2, [r7, #0]
 8002d0e:	80fb      	strh	r3, [r7, #6]
 8002d10:	460b      	mov	r3, r1
 8002d12:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002d20:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <DrawChar+0x16c>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4953      	ldr	r1, [pc, #332]	; (8002e74 <DrawChar+0x170>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3308      	adds	r3, #8
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	88db      	ldrh	r3, [r3, #6]
 8002d36:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <DrawChar+0x16c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	494d      	ldr	r1, [pc, #308]	; (8002e74 <DrawChar+0x170>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3308      	adds	r3, #8
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002d50:	8a3b      	ldrh	r3, [r7, #16]
 8002d52:	3307      	adds	r3, #7
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da00      	bge.n	8002d5a <DrawChar+0x56>
 8002d58:	3307      	adds	r3, #7
 8002d5a:	10db      	asrs	r3, r3, #3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	8a3b      	ldrh	r3, [r7, #16]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e076      	b.n	8002e5e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002d70:	8a3b      	ldrh	r3, [r7, #16]
 8002d72:	3307      	adds	r3, #7
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da00      	bge.n	8002d7a <DrawChar+0x76>
 8002d78:	3307      	adds	r3, #7
 8002d7a:	10db      	asrs	r3, r3, #3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002d8a:	8a3b      	ldrh	r3, [r7, #16]
 8002d8c:	3307      	adds	r3, #7
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	da00      	bge.n	8002d94 <DrawChar+0x90>
 8002d92:	3307      	adds	r3, #7
 8002d94:	10db      	asrs	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d002      	beq.n	8002da0 <DrawChar+0x9c>
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d004      	beq.n	8002da8 <DrawChar+0xa4>
 8002d9e:	e00c      	b.n	8002dba <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
      break;
 8002da6:	e016      	b.n	8002dd6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	3201      	adds	r2, #1
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
      break;
 8002db8:	e00d      	b.n	8002dd6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	041a      	lsls	r2, r3, #16
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	3202      	adds	r2, #2
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
      break;
 8002dd4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e036      	b.n	8002e4a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002ddc:	8a3a      	ldrh	r2, [r7, #16]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad2      	subs	r2, r2, r3
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	4413      	add	r3, r2
 8002de6:	3b01      	subs	r3, #1
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	4413      	add	r3, r2
 8002e00:	b298      	uxth	r0, r3
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <DrawChar+0x16c>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <DrawChar+0x170>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	88bb      	ldrh	r3, [r7, #4]
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7ff ff4e 	bl	8002cb8 <BSP_LCD_DrawPixel>
 8002e1c:	e012      	b.n	8002e44 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	4413      	add	r3, r2
 8002e26:	b298      	uxth	r0, r3
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <DrawChar+0x16c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4911      	ldr	r1, [pc, #68]	; (8002e74 <DrawChar+0x170>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3304      	adds	r3, #4
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7ff ff3a 	bl	8002cb8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	8a3b      	ldrh	r3, [r7, #16]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d3c4      	bcc.n	8002ddc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	3301      	adds	r3, #1
 8002e56:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	8a7b      	ldrh	r3, [r7, #18]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d384      	bcc.n	8002d70 <DrawChar+0x6c>
  }
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000604 	.word	0x20000604
 8002e74:	20000608 	.word	0x20000608

08002e78 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <FillBuffer+0x68>)
 8002e88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e8c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <FillBuffer+0x68>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <FillBuffer+0x68>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <FillBuffer+0x68>)
 8002e9c:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <FillBuffer+0x6c>)
 8002e9e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002ea0:	480f      	ldr	r0, [pc, #60]	; (8002ee0 <FillBuffer+0x68>)
 8002ea2:	f000 fd51 	bl	8003948 <HAL_DMA2D_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <FillBuffer+0x68>)
 8002eb0:	f000 feb2 	bl	8003c18 <HAL_DMA2D_ConfigLayer>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10e      	bne.n	8002ed8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69f9      	ldr	r1, [r7, #28]
 8002ec4:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <FillBuffer+0x68>)
 8002ec6:	f000 fd92 	bl	80039ee <HAL_DMA2D_Start>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002ed0:	210a      	movs	r1, #10
 8002ed2:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <FillBuffer+0x68>)
 8002ed4:	f000 fdb6 	bl	8003a44 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000594 	.word	0x20000594
 8002ee4:	4002b000 	.word	0x4002b000

08002ee8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <BSP_SDRAM_Init+0xb0>)
 8002ef0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002efa:	2207      	movs	r2, #7
 8002efc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002f00:	2204      	movs	r2, #4
 8002f02:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002f06:	2207      	movs	r2, #7
 8002f08:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002f10:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002f12:	2202      	movs	r2, #2
 8002f14:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002f16:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002f18:	2202      	movs	r2, #2
 8002f1a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f30:	2210      	movs	r2, #16
 8002f32:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f3c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002f40:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f4e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002f5e:	2100      	movs	r1, #0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f62:	f000 f87f 	bl	8003064 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002f66:	490d      	ldr	r1, [pc, #52]	; (8002f9c <BSP_SDRAM_Init+0xb4>)
 8002f68:	480a      	ldr	r0, [pc, #40]	; (8002f94 <BSP_SDRAM_Init+0xac>)
 8002f6a:	f003 fccf 	bl	800690c <HAL_SDRAM_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <BSP_SDRAM_Init+0xb8>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e002      	b.n	8002f82 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <BSP_SDRAM_Init+0xb8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002f82:	f240 506a 	movw	r0, #1386	; 0x56a
 8002f86:	f000 f80d 	bl	8002fa4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <BSP_SDRAM_Init+0xb8>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000624 	.word	0x20000624
 8002f98:	a0000140 	.word	0xa0000140
 8002f9c:	20000658 	.word	0x20000658
 8002fa0:	20000084 	.word	0x20000084

08002fa4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fb8:	2208      	movs	r2, #8
 8002fba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fcc:	4923      	ldr	r1, [pc, #140]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fce:	4824      	ldr	r0, [pc, #144]	; (8003060 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002fd0:	f003 fcda 	bl	8006988 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f000 f9c3 	bl	8003360 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fdc:	2202      	movs	r2, #2
 8002fde:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ff6:	4919      	ldr	r1, [pc, #100]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ff8:	4819      	ldr	r0, [pc, #100]	; (8003060 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ffa:	f003 fcc5 	bl	8006988 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003000:	2203      	movs	r2, #3
 8003002:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003006:	2208      	movs	r2, #8
 8003008:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800300c:	2204      	movs	r2, #4
 800300e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301a:	4910      	ldr	r1, [pc, #64]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800301c:	4810      	ldr	r0, [pc, #64]	; (8003060 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800301e:	f003 fcb3 	bl	8006988 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003022:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003026:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800302a:	2204      	movs	r2, #4
 800302c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003030:	2208      	movs	r2, #8
 8003032:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003036:	2201      	movs	r2, #1
 8003038:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800303e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003044:	4905      	ldr	r1, [pc, #20]	; (800305c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003046:	4806      	ldr	r0, [pc, #24]	; (8003060 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003048:	f003 fc9e 	bl	8006988 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003050:	f003 fccf 	bl	80069f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000674 	.word	0x20000674
 8003060:	20000624 	.word	0x20000624

08003064 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b090      	sub	sp, #64	; 0x40
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80ec 	beq.w	800324e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
 800307a:	4b77      	ldr	r3, [pc, #476]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	4a76      	ldr	r2, [pc, #472]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6393      	str	r3, [r2, #56]	; 0x38
 8003086:	4b74      	ldr	r3, [pc, #464]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a6f      	ldr	r2, [pc, #444]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 800309c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
 80030b2:	4b69      	ldr	r3, [pc, #420]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a68      	ldr	r2, [pc, #416]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b66      	ldr	r3, [pc, #408]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	4b62      	ldr	r3, [pc, #392]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a61      	ldr	r2, [pc, #388]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a53      	ldr	r2, [pc, #332]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 800310c:	f043 0310 	orr.w	r3, r3, #16
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b51      	ldr	r3, [pc, #324]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003128:	f043 0320 	orr.w	r3, r3, #32
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a45      	ldr	r2, [pc, #276]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 8003144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b43      	ldr	r3, [pc, #268]	; (8003258 <BSP_SDRAM_MspInit+0x1f4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800315a:	2302      	movs	r3, #2
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003162:	230c      	movs	r3, #12
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003166:	2360      	movs	r3, #96	; 0x60
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800316a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800316e:	4619      	mov	r1, r3
 8003170:	483a      	ldr	r0, [pc, #232]	; (800325c <BSP_SDRAM_MspInit+0x1f8>)
 8003172:	f000 fe7f 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003176:	2301      	movs	r3, #1
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800317a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800317e:	4619      	mov	r1, r3
 8003180:	4837      	ldr	r0, [pc, #220]	; (8003260 <BSP_SDRAM_MspInit+0x1fc>)
 8003182:	f000 fe77 	bl	8003e74 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003186:	f24c 7303 	movw	r3, #50947	; 0xc703
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800318c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003190:	4619      	mov	r1, r3
 8003192:	4834      	ldr	r0, [pc, #208]	; (8003264 <BSP_SDRAM_MspInit+0x200>)
 8003194:	f000 fe6e 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003198:	f64f 7383 	movw	r3, #65411	; 0xff83
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800319e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a2:	4619      	mov	r1, r3
 80031a4:	4830      	ldr	r0, [pc, #192]	; (8003268 <BSP_SDRAM_MspInit+0x204>)
 80031a6:	f000 fe65 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80031aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80031b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b4:	4619      	mov	r1, r3
 80031b6:	482d      	ldr	r0, [pc, #180]	; (800326c <BSP_SDRAM_MspInit+0x208>)
 80031b8:	f000 fe5c 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80031bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80031c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c6:	4619      	mov	r1, r3
 80031c8:	4829      	ldr	r0, [pc, #164]	; (8003270 <BSP_SDRAM_MspInit+0x20c>)
 80031ca:	f000 fe53 	bl	8003e74 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 80031e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 80031ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031f0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 80031f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031f8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 8003202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003206:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 800320a:	2200      	movs	r2, #0
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 8003210:	2203      	movs	r2, #3
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 8003216:	2200      	movs	r2, #0
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <BSP_SDRAM_MspInit+0x214>)
 8003224:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
 800322c:	4a11      	ldr	r2, [pc, #68]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003232:	4810      	ldr	r0, [pc, #64]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 8003234:	f000 fa78 	bl	8003728 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003238:	480e      	ldr	r0, [pc, #56]	; (8003274 <BSP_SDRAM_MspInit+0x210>)
 800323a:	f000 f9c7 	bl	80035cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	210f      	movs	r1, #15
 8003242:	2038      	movs	r0, #56	; 0x38
 8003244:	f000 f98b 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003248:	2038      	movs	r0, #56	; 0x38
 800324a:	f000 f9a4 	bl	8003596 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800324e:	bf00      	nop
 8003250:	3740      	adds	r7, #64	; 0x40
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40020400 	.word	0x40020400
 8003260:	40020800 	.word	0x40020800
 8003264:	40020c00 	.word	0x40020c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40021400 	.word	0x40021400
 8003270:	40021800 	.word	0x40021800
 8003274:	20000684 	.word	0x20000684
 8003278:	40026410 	.word	0x40026410

0800327c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_Init+0x40>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <HAL_Init+0x40>)
 8003286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_Init+0x40>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <HAL_Init+0x40>)
 8003292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a07      	ldr	r2, [pc, #28]	; (80032bc <HAL_Init+0x40>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f000 f94f 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032aa:	200f      	movs	r0, #15
 80032ac:	f000 f808 	bl	80032c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b0:	f7fd ffa0 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00

080032c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_InitTick+0x54>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_InitTick+0x58>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f967 	bl	80035b2 <HAL_SYSTICK_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00e      	b.n	800330c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d80a      	bhi.n	800330a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f4:	2200      	movs	r2, #0
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f000 f92f 	bl	800355e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <HAL_InitTick+0x5c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	e000      	b.n	800330c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000000 	.word	0x20000000
 8003318:	2000008c 	.word	0x2000008c
 800331c:	20000088 	.word	0x20000088

08003320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_IncTick+0x20>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_IncTick+0x24>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_IncTick+0x24>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000008c 	.word	0x2000008c
 8003344:	200006e4 	.word	0x200006e4

08003348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return uwTick;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_GetTick+0x14>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	200006e4 	.word	0x200006e4

08003360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff ffee 	bl	8003348 <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d005      	beq.n	8003386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_Delay+0x44>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003386:	bf00      	nop
 8003388:	f7ff ffde 	bl	8003348 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d8f7      	bhi.n	8003388 <HAL_Delay+0x28>
  {
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	2000008c 	.word	0x2000008c

080033a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c4:	4013      	ands	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	60d3      	str	r3, [r2, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <__NVIC_GetPriorityGrouping+0x18>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 0307 	and.w	r3, r3, #7
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	2b00      	cmp	r3, #0
 800341c:	db0b      	blt.n	8003436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	4907      	ldr	r1, [pc, #28]	; (8003444 <__NVIC_EnableIRQ+0x38>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	2001      	movs	r0, #1
 800342e:	fa00 f202 	lsl.w	r2, r0, r2
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000e100 	.word	0xe000e100

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	; (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf28      	it	cs
 80034ba:	2304      	movcs	r3, #4
 80034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d902      	bls.n	80034cc <NVIC_EncodePriority+0x30>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3b03      	subs	r3, #3
 80034ca:	e000      	b.n	80034ce <NVIC_EncodePriority+0x32>
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	4313      	orrs	r3, r2
         );
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff8e 	bl	8003448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff29 	bl	80033a8 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003570:	f7ff ff3e 	bl	80033f0 <__NVIC_GetPriorityGrouping>
 8003574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff ff8e 	bl	800349c <NVIC_EncodePriority>
 8003580:	4602      	mov	r2, r0
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff5d 	bl	8003448 <__NVIC_SetPriority>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff31 	bl	800340c <__NVIC_EnableIRQ>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ffa2 	bl	8003504 <SysTick_Config>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7ff feb6 	bl	8003348 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e099      	b.n	800371c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003608:	e00f      	b.n	800362a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800360a:	f7ff fe9d 	bl	8003348 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b05      	cmp	r3, #5
 8003616:	d908      	bls.n	800362a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e078      	b.n	800371c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e8      	bne.n	800360a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4b38      	ldr	r3, [pc, #224]	; (8003724 <HAL_DMA_Init+0x158>)
 8003644:	4013      	ands	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2b04      	cmp	r3, #4
 8003682:	d107      	bne.n	8003694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4313      	orrs	r3, r2
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0307 	bic.w	r3, r3, #7
 80036aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d117      	bne.n	80036ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00e      	beq.n	80036ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8bd 	bl	8003850 <DMA_CheckFifoParam>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036ea:	2301      	movs	r3, #1
 80036ec:	e016      	b.n	800371c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f874 	bl	80037e4 <DMA_CalcBaseAndBitshift>
 80036fc:	4603      	mov	r3, r0
 80036fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	223f      	movs	r2, #63	; 0x3f
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	f010803f 	.word	0xf010803f

08003728 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e050      	b.n	80037dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d101      	bne.n	800374a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
 8003748:	e048      	b.n	80037dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2221      	movs	r2, #33	; 0x21
 8003788:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f82a 	bl	80037e4 <DMA_CalcBaseAndBitshift>
 8003790:	4603      	mov	r3, r0
 8003792:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	223f      	movs	r2, #63	; 0x3f
 80037be:	409a      	lsls	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	3b10      	subs	r3, #16
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <DMA_CalcBaseAndBitshift+0x64>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <DMA_CalcBaseAndBitshift+0x68>)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d909      	bls.n	8003826 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	659a      	str	r2, [r3, #88]	; 0x58
 8003824:	e007      	b.n	8003836 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	aaaaaaab 	.word	0xaaaaaaab
 800384c:	080118a8 	.word	0x080118a8

08003850 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11f      	bne.n	80038aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d856      	bhi.n	800391e <DMA_CheckFifoParam+0xce>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <DMA_CheckFifoParam+0x28>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	0800389b 	.word	0x0800389b
 8003880:	08003889 	.word	0x08003889
 8003884:	0800391f 	.word	0x0800391f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d046      	beq.n	8003922 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003898:	e043      	b.n	8003922 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a2:	d140      	bne.n	8003926 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e03d      	b.n	8003926 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b2:	d121      	bne.n	80038f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d837      	bhi.n	800392a <DMA_CheckFifoParam+0xda>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <DMA_CheckFifoParam+0x70>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038d7 	.word	0x080038d7
 80038c8:	080038d1 	.word	0x080038d1
 80038cc:	080038e9 	.word	0x080038e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e030      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d025      	beq.n	800392e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e6:	e022      	b.n	800392e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f0:	d11f      	bne.n	8003932 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038f6:	e01c      	b.n	8003932 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d903      	bls.n	8003906 <DMA_CheckFifoParam+0xb6>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d003      	beq.n	800390c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003904:	e018      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      break;
 800390a:	e015      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e00b      	b.n	8003936 <DMA_CheckFifoParam+0xe6>
      break;
 800391e:	bf00      	nop
 8003920:	e00a      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
 8003924:	e008      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003926:	bf00      	nop
 8003928:	e006      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
 800392c:	e004      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;   
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
    }
  } 
  
  return status; 
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop

08003948 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e03b      	b.n	80039d2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f833 	bl	80039da <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	f023 0107 	bic.w	r1, r3, #7
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68d1      	ldr	r1, [r2, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	430b      	orrs	r3, r1
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_DMA2D_Start+0x1c>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e018      	b.n	8003a3c <HAL_DMA2D_Start+0x4e>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f989 	bl	8003d3c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d056      	beq.n	8003b0e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a60:	f7ff fc72 	bl	8003348 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a66:	e04b      	b.n	8003b00 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2221      	movs	r2, #33	; 0x21
 8003aac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0a5      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d01a      	beq.n	8003b00 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7ff fc3d 	bl	8003348 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <HAL_DMA2D_PollForTransfer+0x9c>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10f      	bne.n	8003b00 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2203      	movs	r2, #3
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e086      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ac      	beq.n	8003a68 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d061      	beq.n	8003bf4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b30:	f7ff fc0a 	bl	8003348 <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b36:	e056      	b.n	8003be6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02e      	beq.n	8003ba8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2229      	movs	r2, #41	; 0x29
 8003b92:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2204      	movs	r2, #4
 8003b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d01a      	beq.n	8003be6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7ff fbca 	bl	8003348 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <HAL_DMA2D_PollForTransfer+0x182>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e013      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0a1      	beq.n	8003b38 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2212      	movs	r2, #18
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_DMA2D_ConfigLayer+0x20>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e079      	b.n	8003d2c <HAL_DMA2D_ConfigLayer+0x114>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c62:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c64:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b0a      	cmp	r3, #10
 8003c6c:	d003      	beq.n	8003c76 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d107      	bne.n	8003c86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e005      	b.n	8003c92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	ea02 0103 	and.w	r1, r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b0a      	cmp	r3, #10
 8003cc0:	d003      	beq.n	8003cca <HAL_DMA2D_ConfigLayer+0xb2>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b09      	cmp	r3, #9
 8003cc8:	d127      	bne.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd8:	e01f      	b.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	ea02 0103 	and.w	r1, r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d003      	beq.n	8003d0c <HAL_DMA2D_ConfigLayer+0xf4>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d106      	bne.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d18:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	ff03000f 	.word	0xff03000f

08003d3c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b08b      	sub	sp, #44	; 0x2c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	041a      	lsls	r2, r3, #16
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d74:	d174      	bne.n	8003e60 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d7c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d84:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d8c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	e053      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d106      	bne.n	8003dc4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	e048      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d111      	bne.n	8003df0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	0cdb      	lsrs	r3, r3, #19
 8003dd0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	0a9b      	lsrs	r3, r3, #10
 8003dd6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	02db      	lsls	r3, r3, #11
 8003de6:	4313      	orrs	r3, r2
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e032      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d117      	bne.n	8003e28 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	0fdb      	lsrs	r3, r3, #31
 8003dfc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	0cdb      	lsrs	r3, r3, #19
 8003e02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	08db      	lsrs	r3, r3, #3
 8003e0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	029b      	lsls	r3, r3, #10
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	03db      	lsls	r3, r3, #15
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	e016      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	0f1b      	lsrs	r3, r3, #28
 8003e2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	0d1b      	lsrs	r3, r3, #20
 8003e32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	0b1b      	lsrs	r3, r3, #12
 8003e38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	011a      	lsls	r2, r3, #4
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e5e:	e003      	b.n	8003e68 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	60da      	str	r2, [r3, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	372c      	adds	r7, #44	; 0x2c
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e177      	b.n	8004180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8166 	bne.w	800417a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d005      	beq.n	8003ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d130      	bne.n	8003f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0201 	and.w	r2, r3, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d017      	beq.n	8003f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80c0 	beq.w	800417a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b66      	ldr	r3, [pc, #408]	; (8004198 <HAL_GPIO_Init+0x324>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4a65      	ldr	r2, [pc, #404]	; (8004198 <HAL_GPIO_Init+0x324>)
 8004004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	4b63      	ldr	r3, [pc, #396]	; (8004198 <HAL_GPIO_Init+0x324>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004016:	4a61      	ldr	r2, [pc, #388]	; (800419c <HAL_GPIO_Init+0x328>)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3302      	adds	r3, #2
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a58      	ldr	r2, [pc, #352]	; (80041a0 <HAL_GPIO_Init+0x32c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d037      	beq.n	80040b2 <HAL_GPIO_Init+0x23e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a57      	ldr	r2, [pc, #348]	; (80041a4 <HAL_GPIO_Init+0x330>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d031      	beq.n	80040ae <HAL_GPIO_Init+0x23a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a56      	ldr	r2, [pc, #344]	; (80041a8 <HAL_GPIO_Init+0x334>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <HAL_GPIO_Init+0x236>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a55      	ldr	r2, [pc, #340]	; (80041ac <HAL_GPIO_Init+0x338>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x232>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a54      	ldr	r2, [pc, #336]	; (80041b0 <HAL_GPIO_Init+0x33c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x22e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a53      	ldr	r2, [pc, #332]	; (80041b4 <HAL_GPIO_Init+0x340>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x22a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a52      	ldr	r2, [pc, #328]	; (80041b8 <HAL_GPIO_Init+0x344>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x226>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a51      	ldr	r2, [pc, #324]	; (80041bc <HAL_GPIO_Init+0x348>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x222>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_GPIO_Init+0x34c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x21e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4f      	ldr	r2, [pc, #316]	; (80041c4 <HAL_GPIO_Init+0x350>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x21a>
 800408a:	2309      	movs	r3, #9
 800408c:	e012      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 800408e:	230a      	movs	r3, #10
 8004090:	e010      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 8004092:	2308      	movs	r3, #8
 8004094:	e00e      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 8004096:	2307      	movs	r3, #7
 8004098:	e00c      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 800409a:	2306      	movs	r3, #6
 800409c:	e00a      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 800409e:	2305      	movs	r3, #5
 80040a0:	e008      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040b2:	2300      	movs	r3, #0
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	f002 0203 	and.w	r2, r2, #3
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c4:	4935      	ldr	r1, [pc, #212]	; (800419c <HAL_GPIO_Init+0x328>)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <HAL_GPIO_Init+0x354>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f6:	4a34      	ldr	r2, [pc, #208]	; (80041c8 <HAL_GPIO_Init+0x354>)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040fc:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <HAL_GPIO_Init+0x354>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004120:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <HAL_GPIO_Init+0x354>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004126:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <HAL_GPIO_Init+0x354>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800414a:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_GPIO_Init+0x354>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_GPIO_Init+0x354>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <HAL_GPIO_Init+0x354>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	f67f ae84 	bls.w	8003e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40013800 	.word	0x40013800
 80041a0:	40020000 	.word	0x40020000
 80041a4:	40020400 	.word	0x40020400
 80041a8:	40020800 	.word	0x40020800
 80041ac:	40020c00 	.word	0x40020c00
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40021400 	.word	0x40021400
 80041b8:	40021800 	.word	0x40021800
 80041bc:	40021c00 	.word	0x40021c00
 80041c0:	40022000 	.word	0x40022000
 80041c4:	40022400 	.word	0x40022400
 80041c8:	40013c00 	.word	0x40013c00

080041cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
 80041d8:	4613      	mov	r3, r2
 80041da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e8:	e003      	b.n	80041f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	041a      	lsls	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0bf      	b.n	8004392 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8ba 	bl	80043a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004242:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004258:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <HAL_LTDC_Init+0x19c>)
 8004274:	400b      	ands	r3, r1
 8004276:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6899      	ldr	r1, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68d9      	ldr	r1, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_LTDC_Init+0x19c>)
 80042a2:	400b      	ands	r3, r1
 80042a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68d9      	ldr	r1, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6919      	ldr	r1, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_LTDC_Init+0x19c>)
 80042d0:	400b      	ands	r3, r1
 80042d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6919      	ldr	r1, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6959      	ldr	r1, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_LTDC_Init+0x19c>)
 80042fe:	400b      	ands	r3, r1
 8004300:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6959      	ldr	r1, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0206 	orr.w	r2, r2, #6
 800436e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	f000f800 	.word	0xf000f800

080043a0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_LTDC_ConfigLayer+0x1a>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e02c      	b.n	8004428 <HAL_LTDC_ConfigLayer+0x74>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2134      	movs	r1, #52	; 0x34
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4614      	mov	r4, r2
 80043f2:	461d      	mov	r5, r3
 80043f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f83b 	bl	8004484 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2201      	movs	r2, #1
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bdb0      	pop	{r4, r5, r7, pc}

08004430 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_LTDC_EnableDither+0x16>
 8004442:	2302      	movs	r3, #2
 8004444:	e016      	b.n	8004474 <HAL_LTDC_EnableDither+0x44>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_LTDC_EnableDither+0x50>)
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	4a09      	ldr	r2, [pc, #36]	; (8004480 <HAL_LTDC_EnableDither+0x50>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40016800 	.word	0x40016800

08004484 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a0:	4413      	add	r3, r2
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	01db      	lsls	r3, r3, #7
 80044b0:	4413      	add	r3, r2
 80044b2:	3384      	adds	r3, #132	; 0x84
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	4611      	mov	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	01d2      	lsls	r2, r2, #7
 80044c0:	440a      	add	r2, r1
 80044c2:	3284      	adds	r2, #132	; 0x84
 80044c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044da:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044dc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	01db      	lsls	r3, r3, #7
 80044e8:	440b      	add	r3, r1
 80044ea:	3384      	adds	r3, #132	; 0x84
 80044ec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004502:	4413      	add	r3, r2
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4413      	add	r3, r2
 8004514:	3384      	adds	r3, #132	; 0x84
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	4611      	mov	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	01d2      	lsls	r2, r2, #7
 8004522:	440a      	add	r2, r1
 8004524:	3284      	adds	r2, #132	; 0x84
 8004526:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800452a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800453a:	4413      	add	r3, r2
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4619      	mov	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	01db      	lsls	r3, r3, #7
 8004548:	440b      	add	r3, r1
 800454a:	3384      	adds	r3, #132	; 0x84
 800454c:	4619      	mov	r1, r3
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	3384      	adds	r3, #132	; 0x84
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4611      	mov	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	01d2      	lsls	r2, r2, #7
 800456e:	440a      	add	r2, r1
 8004570:	3284      	adds	r2, #132	; 0x84
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	01db      	lsls	r3, r3, #7
 8004582:	4413      	add	r3, r2
 8004584:	3384      	adds	r3, #132	; 0x84
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4413      	add	r3, r2
 80045b6:	3384      	adds	r3, #132	; 0x84
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	4413      	add	r3, r2
 80045c6:	3384      	adds	r3, #132	; 0x84
 80045c8:	461a      	mov	r2, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045d4:	461a      	mov	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	431a      	orrs	r2, r3
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4619      	mov	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	01db      	lsls	r3, r3, #7
 80045e8:	440b      	add	r3, r1
 80045ea:	3384      	adds	r3, #132	; 0x84
 80045ec:	4619      	mov	r1, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	01db      	lsls	r3, r3, #7
 80045fe:	4413      	add	r3, r2
 8004600:	3384      	adds	r3, #132	; 0x84
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	4611      	mov	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	01d2      	lsls	r2, r2, #7
 800460e:	440a      	add	r2, r1
 8004610:	3284      	adds	r2, #132	; 0x84
 8004612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004616:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	01db      	lsls	r3, r3, #7
 8004622:	4413      	add	r3, r2
 8004624:	3384      	adds	r3, #132	; 0x84
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	01db      	lsls	r3, r3, #7
 8004638:	4413      	add	r3, r2
 800463a:	3384      	adds	r3, #132	; 0x84
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	4611      	mov	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	01d2      	lsls	r2, r2, #7
 8004648:	440a      	add	r2, r1
 800464a:	3284      	adds	r2, #132	; 0x84
 800464c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	6809      	ldr	r1, [r1, #0]
 8004662:	4608      	mov	r0, r1
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	01c9      	lsls	r1, r1, #7
 8004668:	4401      	add	r1, r0
 800466a:	3184      	adds	r1, #132	; 0x84
 800466c:	4313      	orrs	r3, r2
 800466e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	01db      	lsls	r3, r3, #7
 800467a:	4413      	add	r3, r2
 800467c:	3384      	adds	r3, #132	; 0x84
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	01db      	lsls	r3, r3, #7
 800468a:	4413      	add	r3, r2
 800468c:	3384      	adds	r3, #132	; 0x84
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	01db      	lsls	r3, r3, #7
 800469e:	4413      	add	r3, r2
 80046a0:	3384      	adds	r3, #132	; 0x84
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80046b2:	2304      	movs	r3, #4
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	e01b      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80046c0:	2303      	movs	r3, #3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e014      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00b      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d007      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d003      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046e2:	2b07      	cmp	r3, #7
 80046e4:	d102      	bne.n	80046ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80046e6:	2302      	movs	r3, #2
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e001      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046ec:	2301      	movs	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4611      	mov	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	01d2      	lsls	r2, r2, #7
 800470a:	440a      	add	r2, r1
 800470c:	3284      	adds	r2, #132	; 0x84
 800470e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	1acb      	subs	r3, r1, r3
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	6809      	ldr	r1, [r1, #0]
 8004736:	4608      	mov	r0, r1
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	01c9      	lsls	r1, r1, #7
 800473c:	4401      	add	r1, r0
 800473e:	3184      	adds	r1, #132	; 0x84
 8004740:	4313      	orrs	r3, r2
 8004742:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	4413      	add	r3, r2
 8004750:	3384      	adds	r3, #132	; 0x84
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	4611      	mov	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	01d2      	lsls	r2, r2, #7
 800475e:	440a      	add	r2, r1
 8004760:	3284      	adds	r2, #132	; 0x84
 8004762:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	01db      	lsls	r3, r3, #7
 8004776:	4413      	add	r3, r2
 8004778:	3384      	adds	r3, #132	; 0x84
 800477a:	461a      	mov	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	01db      	lsls	r3, r3, #7
 800478c:	4413      	add	r3, r2
 800478e:	3384      	adds	r3, #132	; 0x84
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	4611      	mov	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	01d2      	lsls	r2, r2, #7
 800479c:	440a      	add	r2, r1
 800479e:	3284      	adds	r2, #132	; 0x84
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6013      	str	r3, [r2, #0]
}
 80047a6:	bf00      	nop
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b4:	b08f      	sub	sp, #60	; 0x3c
 80047b6:	af0a      	add	r7, sp, #40	; 0x28
 80047b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e10f      	b.n	80049e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f007 f912 	bl	800ba08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2203      	movs	r2, #3
 80047e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f003 fbf9 	bl	8007ffa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	687e      	ldr	r6, [r7, #4]
 8004810:	466d      	mov	r5, sp
 8004812:	f106 0410 	add.w	r4, r6, #16
 8004816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800481a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800481e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004822:	e885 0003 	stmia.w	r5, {r0, r1}
 8004826:	1d33      	adds	r3, r6, #4
 8004828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800482a:	6838      	ldr	r0, [r7, #0]
 800482c:	f003 fad0 	bl	8007dd0 <USB_CoreInit>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0d0      	b.n	80049e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f003 fbe7 	bl	800801c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	e04a      	b.n	80048ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	333d      	adds	r3, #61	; 0x3d
 8004864:	2201      	movs	r2, #1
 8004866:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004868:	7bfa      	ldrb	r2, [r7, #15]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	333c      	adds	r3, #60	; 0x3c
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800487c:	7bfa      	ldrb	r2, [r7, #15]
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	b298      	uxth	r0, r3
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	3344      	adds	r3, #68	; 0x44
 8004890:	4602      	mov	r2, r0
 8004892:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	3340      	adds	r3, #64	; 0x40
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	3348      	adds	r3, #72	; 0x48
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048bc:	7bfa      	ldrb	r2, [r7, #15]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	334c      	adds	r3, #76	; 0x4c
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048d0:	7bfa      	ldrb	r2, [r7, #15]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	3354      	adds	r3, #84	; 0x54
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	3301      	adds	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d3af      	bcc.n	8004854 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
 80048f8:	e044      	b.n	8004984 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004968:	7bfa      	ldrb	r2, [r7, #15]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	3301      	adds	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
 8004984:	7bfa      	ldrb	r2, [r7, #15]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d3b5      	bcc.n	80048fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	687e      	ldr	r6, [r7, #4]
 8004996:	466d      	mov	r5, sp
 8004998:	f106 0410 	add.w	r4, r6, #16
 800499c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800499e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80049ac:	1d33      	adds	r3, r6, #4
 80049ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b0:	6838      	ldr	r0, [r7, #0]
 80049b2:	f003 fb7f 	bl	80080b4 <USB_DevInit>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e00d      	b.n	80049e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f004 fcce 	bl	800937e <USB_DevDisconnect>

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_PCD_Start+0x1c>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e020      	b.n	8004a4a <HAL_PCD_Start+0x5e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d109      	bne.n	8004a2c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d005      	beq.n	8004a2c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f003 fad1 	bl	8007fd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f004 fc7e 	bl	800933c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a52:	b590      	push	{r4, r7, lr}
 8004a54:	b08d      	sub	sp, #52	; 0x34
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f004 fd3c 	bl	80094e6 <USB_GetMode>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 848a 	bne.w	800538a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 fca0 	bl	80093c0 <USB_ReadInterrupts>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8480 	beq.w	8005388 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	0a1b      	lsrs	r3, r3, #8
 8004a92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f004 fc8d 	bl	80093c0 <USB_ReadInterrupts>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d107      	bne.n	8004ac0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f002 0202 	and.w	r2, r2, #2
 8004abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f004 fc7b 	bl	80093c0 <USB_ReadInterrupts>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d161      	bne.n	8004b98 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0210 	bic.w	r2, r2, #16
 8004ae2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	4413      	add	r3, r2
 8004b00:	3304      	adds	r3, #4
 8004b02:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	0c5b      	lsrs	r3, r3, #17
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d124      	bne.n	8004b5a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d035      	beq.n	8004b88 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6a38      	ldr	r0, [r7, #32]
 8004b30:	f004 fab2 	bl	8009098 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b40:	441a      	add	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6a1a      	ldr	r2, [r3, #32]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b52:	441a      	add	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
 8004b58:	e016      	b.n	8004b88 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	0c5b      	lsrs	r3, r3, #17
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d110      	bne.n	8004b88 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6a38      	ldr	r0, [r7, #32]
 8004b72:	f004 fa91 	bl	8009098 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	6a1a      	ldr	r2, [r3, #32]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b82:	441a      	add	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0210 	orr.w	r2, r2, #16
 8004b96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f004 fc0f 	bl	80093c0 <USB_ReadInterrupts>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bac:	f040 80a7 	bne.w	8004cfe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f004 fc14 	bl	80093e6 <USB_ReadDevAllOutEpInterrupt>
 8004bbe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004bc0:	e099      	b.n	8004cf6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 808e 	beq.w	8004cea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f004 fc38 	bl	800944e <USB_ReadDevOutEPInterrupt>
 8004bde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fec2 	bl	8005988 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 ff98 	bl	8005b58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2310      	movs	r3, #16
 8004c42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d030      	beq.n	8004cb0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d109      	bne.n	8004c6e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c6c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	4613      	mov	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	3304      	adds	r3, #4
 8004c82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	78db      	ldrb	r3, [r3, #3]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d108      	bne.n	8004c9e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f006 ffb7 	bl	800bc0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	461a      	mov	r2, r3
 8004cac:	2302      	movs	r3, #2
 8004cae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2320      	movs	r3, #32
 8004cca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	3301      	adds	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f af62 	bne.w	8004bc2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f004 fb5c 	bl	80093c0 <USB_ReadInterrupts>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d12:	f040 80db 	bne.w	8004ecc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f004 fb7d 	bl	800941a <USB_ReadDevAllInEpInterrupt>
 8004d20:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d26:	e0cd      	b.n	8004ec4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80c2 	beq.w	8004eb8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f004 fba3 	bl	800948a <USB_ReadDevInEPInterrupt>
 8004d44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d057      	beq.n	8004e00 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	2201      	movs	r2, #1
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69f9      	ldr	r1, [r7, #28]
 8004d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d70:	4013      	ands	r3, r2
 8004d72:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	461a      	mov	r2, r3
 8004d82:	2301      	movs	r3, #1
 8004d84:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d132      	bne.n	8004df4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	334c      	adds	r3, #76	; 0x4c
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4403      	add	r3, r0
 8004dae:	3348      	adds	r3, #72	; 0x48
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4419      	add	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4403      	add	r3, r0
 8004dc2:	334c      	adds	r3, #76	; 0x4c
 8004dc4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d113      	bne.n	8004df4 <HAL_PCD_IRQHandler+0x3a2>
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	3354      	adds	r3, #84	; 0x54
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d108      	bne.n	8004df4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dec:	461a      	mov	r2, r3
 8004dee:	2101      	movs	r1, #1
 8004df0:	f004 fbaa 	bl	8009548 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f006 fe81 	bl	800bb02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e16:	461a      	mov	r2, r3
 8004e18:	2308      	movs	r3, #8
 8004e1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	461a      	mov	r2, r3
 8004e34:	2310      	movs	r3, #16
 8004e36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	461a      	mov	r2, r3
 8004e50:	2340      	movs	r3, #64	; 0x40
 8004e52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d023      	beq.n	8004ea6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e60:	6a38      	ldr	r0, [r7, #32]
 8004e62:	f003 fa8b 	bl	800837c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3338      	adds	r3, #56	; 0x38
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	78db      	ldrb	r3, [r3, #3]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d108      	bne.n	8004e94 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f006 fece 	bl	800bc30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fcdb 	bl	800586e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	3301      	adds	r3, #1
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f47f af2e 	bne.w	8004d28 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 fa75 	bl	80093c0 <USB_ReadInterrupts>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee0:	d122      	bne.n	8004f28 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d108      	bne.n	8004f12 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fec2 	bl	8005c94 <HAL_PCDEx_LPM_Callback>
 8004f10:	e002      	b.n	8004f18 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f006 fe6c 	bl	800bbf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f004 fa47 	bl	80093c0 <USB_ReadInterrupts>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3c:	d112      	bne.n	8004f64 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d102      	bne.n	8004f54 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f006 fe28 	bl	800bba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f62:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f004 fa29 	bl	80093c0 <USB_ReadInterrupts>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	f040 80b7 	bne.w	80050ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2110      	movs	r1, #16
 8004f96:	4618      	mov	r0, r3
 8004f98:	f003 f9f0 	bl	800837c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa0:	e046      	b.n	8005030 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fb4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fe8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005004:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005008:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005024:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005028:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	3301      	adds	r3, #1
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005036:	429a      	cmp	r2, r3
 8005038:	d3b3      	bcc.n	8004fa2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005048:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800504c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005066:	f043 030b 	orr.w	r3, r3, #11
 800506a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800507c:	f043 030b 	orr.w	r3, r3, #11
 8005080:	6453      	str	r3, [r2, #68]	; 0x44
 8005082:	e015      	b.n	80050b0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005096:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800509a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050aa:	f043 030b 	orr.w	r3, r3, #11
 80050ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050d4:	461a      	mov	r2, r3
 80050d6:	f004 fa37 	bl	8009548 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f004 f966 	bl	80093c0 <USB_ReadInterrupts>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fe:	d124      	bne.n	800514a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f004 f9fc 	bl	8009502 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f003 f9b1 	bl	8008476 <USB_GetDevSpeed>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681c      	ldr	r4, [r3, #0]
 8005120:	f001 fa28 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 8005124:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	4620      	mov	r0, r4
 8005130:	f002 feb0 	bl	8007e94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f006 fd0c 	bl	800bb52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005148:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f004 f936 	bl	80093c0 <USB_ReadInterrupts>
 8005154:	4603      	mov	r3, r0
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b08      	cmp	r3, #8
 800515c:	d10a      	bne.n	8005174 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f006 fce9 	bl	800bb36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f002 0208 	and.w	r2, r2, #8
 8005172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f004 f921 	bl	80093c0 <USB_ReadInterrupts>
 800517e:	4603      	mov	r3, r0
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d122      	bne.n	80051ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005194:	2301      	movs	r3, #1
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	e014      	b.n	80051c4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fb27 	bl	800580c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3e5      	bcc.n	800519a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f004 f8f4 	bl	80093c0 <USB_ReadInterrupts>
 80051d8:	4603      	mov	r3, r0
 80051da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e2:	d13b      	bne.n	800525c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051e4:	2301      	movs	r3, #1
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
 80051e8:	e02b      	b.n	8005242 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3340      	adds	r3, #64	; 0x40
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d115      	bne.n	800523c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005210:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005212:	2b00      	cmp	r3, #0
 8005214:	da12      	bge.n	800523c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	4613      	mov	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	333f      	adds	r3, #63	; 0x3f
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005232:	b2db      	uxtb	r3, r3
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fae8 	bl	800580c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	3301      	adds	r3, #1
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	429a      	cmp	r2, r3
 800524a:	d3ce      	bcc.n	80051ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800525a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f004 f8ad 	bl	80093c0 <USB_ReadInterrupts>
 8005266:	4603      	mov	r3, r0
 8005268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005270:	d155      	bne.n	800531e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005272:	2301      	movs	r3, #1
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	e045      	b.n	8005304 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d12e      	bne.n	80052fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da2b      	bge.n	80052fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80052b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d121      	bne.n	80052fe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052be:	4613      	mov	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fa:	6053      	str	r3, [r2, #4]
            break;
 80052fc:	e007      	b.n	800530e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	3301      	adds	r3, #1
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530a:	429a      	cmp	r2, r3
 800530c:	d3b4      	bcc.n	8005278 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800531c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f004 f84c 	bl	80093c0 <USB_ReadInterrupts>
 8005328:	4603      	mov	r3, r0
 800532a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d10a      	bne.n	800534a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f006 fc8d 	bl	800bc54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005348:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f004 f836 	bl	80093c0 <USB_ReadInterrupts>
 8005354:	4603      	mov	r3, r0
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d115      	bne.n	800538a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f006 fc7d 	bl	800bc70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e000      	b.n	800538a <HAL_PCD_IRQHandler+0x938>
      return;
 8005388:	bf00      	nop
    }
  }
}
 800538a:	3734      	adds	r7, #52	; 0x34
 800538c:	46bd      	mov	sp, r7
 800538e:	bd90      	pop	{r4, r7, pc}

08005390 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_PCD_SetAddress+0x1a>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e013      	b.n	80053d2 <HAL_PCD_SetAddress+0x42>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	4611      	mov	r1, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f003 ff94 	bl	80092f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	4608      	mov	r0, r1
 80053e4:	4611      	mov	r1, r2
 80053e6:	461a      	mov	r2, r3
 80053e8:	4603      	mov	r3, r0
 80053ea:	70fb      	strb	r3, [r7, #3]
 80053ec:	460b      	mov	r3, r1
 80053ee:	803b      	strh	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da0f      	bge.n	8005420 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	f003 020f 	and.w	r2, r3, #15
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	3338      	adds	r3, #56	; 0x38
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	3304      	adds	r3, #4
 8005416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	705a      	strb	r2, [r3, #1]
 800541e:	e00f      	b.n	8005440 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	f003 020f 	and.w	r2, r3, #15
 8005426:	4613      	mov	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	3304      	adds	r3, #4
 8005438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800544c:	883a      	ldrh	r2, [r7, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	78ba      	ldrb	r2, [r7, #2]
 8005456:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800546a:	78bb      	ldrb	r3, [r7, #2]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d102      	bne.n	8005476 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_PCD_EP_Open+0xaa>
 8005480:	2302      	movs	r3, #2
 8005482:	e00e      	b.n	80054a2 <HAL_PCD_EP_Open+0xc8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	4618      	mov	r0, r3
 8005494:	f003 f814 	bl	80084c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80054a0:	7afb      	ldrb	r3, [r7, #11]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da0f      	bge.n	80054de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	3338      	adds	r3, #56	; 0x38
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	3304      	adds	r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	705a      	strb	r2, [r3, #1]
 80054dc:	e00f      	b.n	80054fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 020f 	and.w	r2, r3, #15
 80054e4:	4613      	mov	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	3304      	adds	r3, #4
 80054f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_PCD_EP_Close+0x6e>
 8005514:	2302      	movs	r3, #2
 8005516:	e00e      	b.n	8005536 <HAL_PCD_EP_Close+0x8c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	4618      	mov	r0, r3
 8005528:	f003 f852 	bl	80085d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b086      	sub	sp, #24
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	460b      	mov	r3, r1
 800554c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800554e:	7afb      	ldrb	r3, [r7, #11]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	3304      	adds	r3, #4
 8005566:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	b2da      	uxtb	r2, r3
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d102      	bne.n	800559a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	f003 fb31 	bl	8008c18 <USB_EP0StartXfer>
 80055b6:	e008      	b.n	80055ca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	6979      	ldr	r1, [r7, #20]
 80055c6:	f003 f8df 	bl	8008788 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	f003 020f 	and.w	r2, r3, #15
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80055f6:	681b      	ldr	r3, [r3, #0]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	460b      	mov	r3, r1
 8005612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	f003 020f 	and.w	r2, r3, #15
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	3338      	adds	r3, #56	; 0x38
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	3304      	adds	r3, #4
 800562a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2200      	movs	r2, #0
 800563c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2201      	movs	r2, #1
 8005642:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005644:	7afb      	ldrb	r3, [r7, #11]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	b2da      	uxtb	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d102      	bne.n	800565e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800565e:	7afb      	ldrb	r3, [r7, #11]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	f003 facf 	bl	8008c18 <USB_EP0StartXfer>
 800567a:	e008      	b.n	800568e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	f003 f87d 	bl	8008788 <USB_EPStartXfer>
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d901      	bls.n	80056b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e050      	b.n	8005758 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	da0f      	bge.n	80056de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	f003 020f 	and.w	r2, r3, #15
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	3338      	adds	r3, #56	; 0x38
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	705a      	strb	r2, [r3, #1]
 80056dc:	e00d      	b.n	80056fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056de:	78fa      	ldrb	r2, [r7, #3]
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	3304      	adds	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_PCD_EP_SetStall+0x82>
 8005716:	2302      	movs	r3, #2
 8005718:	e01e      	b.n	8005758 <HAL_PCD_EP_SetStall+0xc0>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	4618      	mov	r0, r3
 800572a:	f003 fd0d 	bl	8009148 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	b2d9      	uxtb	r1, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005748:	461a      	mov	r2, r3
 800574a:	f003 fefd 	bl	8009548 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	f003 020f 	and.w	r2, r3, #15
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	429a      	cmp	r2, r3
 8005778:	d901      	bls.n	800577e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e042      	b.n	8005804 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800577e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005782:	2b00      	cmp	r3, #0
 8005784:	da0f      	bge.n	80057a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	4613      	mov	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	3338      	adds	r3, #56	; 0x38
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4413      	add	r3, r2
 800579a:	3304      	adds	r3, #4
 800579c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	705a      	strb	r2, [r3, #1]
 80057a4:	e00f      	b.n	80057c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	4413      	add	r3, r2
 80057bc:	3304      	adds	r3, #4
 80057be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_PCD_EP_ClrStall+0x86>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e00e      	b.n	8005804 <HAL_PCD_EP_ClrStall+0xa4>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f003 fd15 	bl	8009224 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800581c:	2b00      	cmp	r3, #0
 800581e:	da0c      	bge.n	800583a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	f003 020f 	and.w	r2, r3, #15
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	3338      	adds	r3, #56	; 0x38
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	4413      	add	r3, r2
 8005834:	3304      	adds	r3, #4
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e00c      	b.n	8005854 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	4618      	mov	r0, r3
 800585c:	f003 fb34 	bl	8008ec8 <USB_EPStopXfer>
 8005860:	4603      	mov	r3, r0
 8005862:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005864:	7afb      	ldrb	r3, [r7, #11]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b08a      	sub	sp, #40	; 0x28
 8005872:	af02      	add	r7, sp, #8
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	3338      	adds	r3, #56	; 0x38
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	3304      	adds	r3, #4
 8005894:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d901      	bls.n	80058a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e06c      	b.n	8005980 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d902      	bls.n	80058c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3303      	adds	r3, #3
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058ca:	e02b      	b.n	8005924 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d902      	bls.n	80058e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3303      	adds	r3, #3
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6919      	ldr	r1, [r3, #16]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005900:	b2db      	uxtb	r3, r3
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	4603      	mov	r3, r0
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f003 fb88 	bl	800901c <USB_WritePacket>

    ep->xfer_buff  += len;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	441a      	add	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	441a      	add	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	b29b      	uxth	r3, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d809      	bhi.n	800594e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1a      	ldr	r2, [r3, #32]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005942:	429a      	cmp	r2, r3
 8005944:	d203      	bcs.n	800594e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1be      	bne.n	80058cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	429a      	cmp	r2, r3
 8005958:	d811      	bhi.n	800597e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	2201      	movs	r2, #1
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	43db      	mvns	r3, r3
 8005974:	6939      	ldr	r1, [r7, #16]
 8005976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597a:	4013      	ands	r3, r2
 800597c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	333c      	adds	r3, #60	; 0x3c
 80059a0:	3304      	adds	r3, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d17b      	bne.n	8005ab6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4a61      	ldr	r2, [pc, #388]	; (8005b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	f240 80b9 	bls.w	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80b3 	beq.w	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f0:	6093      	str	r3, [r2, #8]
 80059f2:	e0a7      	b.n	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	6093      	str	r3, [r2, #8]
 8005a10:	e098      	b.n	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 8093 	bne.w	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4a4b      	ldr	r2, [pc, #300]	; (8005b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d90f      	bls.n	8005a46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a42:	6093      	str	r3, [r2, #8]
 8005a44:	e07e      	b.n	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	4413      	add	r3, r2
 8005a58:	3304      	adds	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	0159      	lsls	r1, r3, #5
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	440b      	add	r3, r1
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d114      	bne.n	8005aa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a90:	461a      	mov	r2, r3
 8005a92:	2101      	movs	r1, #1
 8005a94:	f003 fd58 	bl	8009548 <USB_EP0_OutStart>
 8005a98:	e006      	b.n	8005aa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	441a      	add	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f006 f80c 	bl	800bacc <HAL_PCD_DataOutStageCallback>
 8005ab4:	e046      	b.n	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d124      	bne.n	8005b08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ada:	6093      	str	r3, [r2, #8]
 8005adc:	e032      	b.n	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	461a      	mov	r2, r3
 8005af6:	2320      	movs	r3, #32
 8005af8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f005 ffe3 	bl	800bacc <HAL_PCD_DataOutStageCallback>
 8005b06:	e01d      	b.n	8005b44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d114      	bne.n	8005b38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d108      	bne.n	8005b38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b30:	461a      	mov	r2, r3
 8005b32:	2100      	movs	r1, #0
 8005b34:	f003 fd08 	bl	8009548 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f005 ffc4 	bl	800bacc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	4f54300a 	.word	0x4f54300a
 8005b54:	4f54310a 	.word	0x4f54310a

08005b58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	333c      	adds	r3, #60	; 0x3c
 8005b70:	3304      	adds	r3, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a15      	ldr	r2, [pc, #84]	; (8005be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d90e      	bls.n	8005bac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005baa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f005 ff7b 	bl	800baa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d90c      	bls.n	8005bd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d108      	bne.n	8005bd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2101      	movs	r1, #1
 8005bd0:	f003 fcba 	bl	8009548 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	4f54300a 	.word	0x4f54300a

08005be4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c02:	883b      	ldrh	r3, [r7, #0]
 8005c04:	0419      	lsls	r1, r3, #16
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c10:	e028      	b.n	8005c64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c20:	2300      	movs	r3, #0
 8005c22:	73fb      	strb	r3, [r7, #15]
 8005c24:	e00d      	b.n	8005c42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	3340      	adds	r3, #64	; 0x40
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
 8005c42:	7bfa      	ldrb	r2, [r7, #15]
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d3ec      	bcc.n	8005c26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c4c:	883b      	ldrh	r3, [r7, #0]
 8005c4e:	0418      	lsls	r0, r3, #16
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6819      	ldr	r1, [r3, #0]
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	4302      	orrs	r2, r0
 8005c5c:	3340      	adds	r3, #64	; 0x40
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	887a      	ldrh	r2, [r7, #2]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e267      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d075      	beq.n	8005db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cca:	4b88      	ldr	r3, [pc, #544]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d00c      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cd6:	4b85      	ldr	r3, [pc, #532]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d112      	bne.n	8005d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce2:	4b82      	ldr	r3, [pc, #520]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cee:	d10b      	bne.n	8005d08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf0:	4b7e      	ldr	r3, [pc, #504]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d05b      	beq.n	8005db4 <HAL_RCC_OscConfig+0x108>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d157      	bne.n	8005db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e242      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d106      	bne.n	8005d20 <HAL_RCC_OscConfig+0x74>
 8005d12:	4b76      	ldr	r3, [pc, #472]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a75      	ldr	r2, [pc, #468]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e01d      	b.n	8005d5c <HAL_RCC_OscConfig+0xb0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x98>
 8005d2a:	4b70      	ldr	r3, [pc, #448]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a6f      	ldr	r2, [pc, #444]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	4b6d      	ldr	r3, [pc, #436]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a6c      	ldr	r2, [pc, #432]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e00b      	b.n	8005d5c <HAL_RCC_OscConfig+0xb0>
 8005d44:	4b69      	ldr	r3, [pc, #420]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a68      	ldr	r2, [pc, #416]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	4b66      	ldr	r3, [pc, #408]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a65      	ldr	r2, [pc, #404]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d013      	beq.n	8005d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d64:	f7fd faf0 	bl	8003348 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d6c:	f7fd faec 	bl	8003348 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b64      	cmp	r3, #100	; 0x64
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e207      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7e:	4b5b      	ldr	r3, [pc, #364]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0xc0>
 8005d8a:	e014      	b.n	8005db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8c:	f7fd fadc 	bl	8003348 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d94:	f7fd fad8 	bl	8003348 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b64      	cmp	r3, #100	; 0x64
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e1f3      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005da6:	4b51      	ldr	r3, [pc, #324]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f0      	bne.n	8005d94 <HAL_RCC_OscConfig+0xe8>
 8005db2:	e000      	b.n	8005db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d063      	beq.n	8005e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dc2:	4b4a      	ldr	r3, [pc, #296]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dce:	4b47      	ldr	r3, [pc, #284]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d11c      	bne.n	8005e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dda:	4b44      	ldr	r3, [pc, #272]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d116      	bne.n	8005e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005de6:	4b41      	ldr	r3, [pc, #260]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_RCC_OscConfig+0x152>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d001      	beq.n	8005dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e1c7      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfe:	4b3b      	ldr	r3, [pc, #236]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4937      	ldr	r1, [pc, #220]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e12:	e03a      	b.n	8005e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d020      	beq.n	8005e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e1c:	4b34      	ldr	r3, [pc, #208]	; (8005ef0 <HAL_RCC_OscConfig+0x244>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e22:	f7fd fa91 	bl	8003348 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e2a:	f7fd fa8d 	bl	8003348 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e1a8      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3c:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e48:	4b28      	ldr	r3, [pc, #160]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4925      	ldr	r1, [pc, #148]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	600b      	str	r3, [r1, #0]
 8005e5c:	e015      	b.n	8005e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e5e:	4b24      	ldr	r3, [pc, #144]	; (8005ef0 <HAL_RCC_OscConfig+0x244>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e64:	f7fd fa70 	bl	8003348 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e6c:	f7fd fa6c 	bl	8003348 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e187      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d036      	beq.n	8005f04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d016      	beq.n	8005ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <HAL_RCC_OscConfig+0x248>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fd fa50 	bl	8003348 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eac:	f7fd fa4c 	bl	8003348 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e167      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_OscConfig+0x240>)
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0x200>
 8005eca:	e01b      	b.n	8005f04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ecc:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <HAL_RCC_OscConfig+0x248>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed2:	f7fd fa39 	bl	8003348 <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed8:	e00e      	b.n	8005ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eda:	f7fd fa35 	bl	8003348 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d907      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e150      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	42470000 	.word	0x42470000
 8005ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef8:	4b88      	ldr	r3, [pc, #544]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ea      	bne.n	8005eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8097 	beq.w	8006040 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f16:	4b81      	ldr	r3, [pc, #516]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	4b7d      	ldr	r3, [pc, #500]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	4a7c      	ldr	r2, [pc, #496]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f30:	6413      	str	r3, [r2, #64]	; 0x40
 8005f32:	4b7a      	ldr	r3, [pc, #488]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	60bb      	str	r3, [r7, #8]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f42:	4b77      	ldr	r3, [pc, #476]	; (8006120 <HAL_RCC_OscConfig+0x474>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d118      	bne.n	8005f80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f4e:	4b74      	ldr	r3, [pc, #464]	; (8006120 <HAL_RCC_OscConfig+0x474>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a73      	ldr	r2, [pc, #460]	; (8006120 <HAL_RCC_OscConfig+0x474>)
 8005f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f5a:	f7fd f9f5 	bl	8003348 <HAL_GetTick>
 8005f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f60:	e008      	b.n	8005f74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f62:	f7fd f9f1 	bl	8003348 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e10c      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f74:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <HAL_RCC_OscConfig+0x474>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0f0      	beq.n	8005f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d106      	bne.n	8005f96 <HAL_RCC_OscConfig+0x2ea>
 8005f88:	4b64      	ldr	r3, [pc, #400]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8c:	4a63      	ldr	r2, [pc, #396]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005f8e:	f043 0301 	orr.w	r3, r3, #1
 8005f92:	6713      	str	r3, [r2, #112]	; 0x70
 8005f94:	e01c      	b.n	8005fd0 <HAL_RCC_OscConfig+0x324>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x30c>
 8005f9e:	4b5f      	ldr	r3, [pc, #380]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	4a5e      	ldr	r2, [pc, #376]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fa4:	f043 0304 	orr.w	r3, r3, #4
 8005fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8005faa:	4b5c      	ldr	r3, [pc, #368]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a5b      	ldr	r2, [pc, #364]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	e00b      	b.n	8005fd0 <HAL_RCC_OscConfig+0x324>
 8005fb8:	4b58      	ldr	r3, [pc, #352]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbc:	4a57      	ldr	r2, [pc, #348]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fbe:	f023 0301 	bic.w	r3, r3, #1
 8005fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc4:	4b55      	ldr	r3, [pc, #340]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	4a54      	ldr	r2, [pc, #336]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005fca:	f023 0304 	bic.w	r3, r3, #4
 8005fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d015      	beq.n	8006004 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fd f9b6 	bl	8003348 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fde:	e00a      	b.n	8005ff6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe0:	f7fd f9b2 	bl	8003348 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e0cb      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff6:	4b49      	ldr	r3, [pc, #292]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0ee      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x334>
 8006002:	e014      	b.n	800602e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006004:	f7fd f9a0 	bl	8003348 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600a:	e00a      	b.n	8006022 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800600c:	f7fd f99c 	bl	8003348 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	f241 3288 	movw	r2, #5000	; 0x1388
 800601a:	4293      	cmp	r3, r2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e0b5      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006022:	4b3e      	ldr	r3, [pc, #248]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1ee      	bne.n	800600c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d105      	bne.n	8006040 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006034:	4b39      	ldr	r3, [pc, #228]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	4a38      	ldr	r2, [pc, #224]	; (800611c <HAL_RCC_OscConfig+0x470>)
 800603a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a1 	beq.w	800618c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800604a:	4b34      	ldr	r3, [pc, #208]	; (800611c <HAL_RCC_OscConfig+0x470>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 030c 	and.w	r3, r3, #12
 8006052:	2b08      	cmp	r3, #8
 8006054:	d05c      	beq.n	8006110 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d141      	bne.n	80060e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605e:	4b31      	ldr	r3, [pc, #196]	; (8006124 <HAL_RCC_OscConfig+0x478>)
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006064:	f7fd f970 	bl	8003348 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800606c:	f7fd f96c 	bl	8003348 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e087      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607e:	4b27      	ldr	r3, [pc, #156]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f0      	bne.n	800606c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	019b      	lsls	r3, r3, #6
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	3b01      	subs	r3, #1
 80060a4:	041b      	lsls	r3, r3, #16
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	061b      	lsls	r3, r3, #24
 80060ae:	491b      	ldr	r1, [pc, #108]	; (800611c <HAL_RCC_OscConfig+0x470>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b4:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <HAL_RCC_OscConfig+0x478>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ba:	f7fd f945 	bl	8003348 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c2:	f7fd f941 	bl	8003348 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e05c      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d4:	4b11      	ldr	r3, [pc, #68]	; (800611c <HAL_RCC_OscConfig+0x470>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x416>
 80060e0:	e054      	b.n	800618c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e2:	4b10      	ldr	r3, [pc, #64]	; (8006124 <HAL_RCC_OscConfig+0x478>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e8:	f7fd f92e 	bl	8003348 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f0:	f7fd f92a 	bl	8003348 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e045      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	4b06      	ldr	r3, [pc, #24]	; (800611c <HAL_RCC_OscConfig+0x470>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x444>
 800610e:	e03d      	b.n	800618c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d107      	bne.n	8006128 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e038      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
 800611c:	40023800 	.word	0x40023800
 8006120:	40007000 	.word	0x40007000
 8006124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006128:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <HAL_RCC_OscConfig+0x4ec>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d028      	beq.n	8006188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006140:	429a      	cmp	r2, r3
 8006142:	d121      	bne.n	8006188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614e:	429a      	cmp	r2, r3
 8006150:	d11a      	bne.n	8006188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006158:	4013      	ands	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800615e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006160:	4293      	cmp	r3, r2
 8006162:	d111      	bne.n	8006188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	3b01      	subs	r3, #1
 8006172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d107      	bne.n	8006188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d001      	beq.n	800618c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800

0800619c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0cc      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061b0:	4b68      	ldr	r3, [pc, #416]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d90c      	bls.n	80061d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061be:	4b65      	ldr	r3, [pc, #404]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c6:	4b63      	ldr	r3, [pc, #396]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0b8      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d020      	beq.n	8006226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061f0:	4b59      	ldr	r3, [pc, #356]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	4a58      	ldr	r2, [pc, #352]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006208:	4b53      	ldr	r3, [pc, #332]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4a52      	ldr	r2, [pc, #328]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006214:	4b50      	ldr	r3, [pc, #320]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	494d      	ldr	r1, [pc, #308]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	4313      	orrs	r3, r2
 8006224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d044      	beq.n	80062bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d107      	bne.n	800624a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623a:	4b47      	ldr	r3, [pc, #284]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d119      	bne.n	800627a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e07f      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d003      	beq.n	800625a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006256:	2b03      	cmp	r3, #3
 8006258:	d107      	bne.n	800626a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625a:	4b3f      	ldr	r3, [pc, #252]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e06f      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626a:	4b3b      	ldr	r3, [pc, #236]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e067      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800627a:	4b37      	ldr	r3, [pc, #220]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f023 0203 	bic.w	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4934      	ldr	r1, [pc, #208]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	4313      	orrs	r3, r2
 800628a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800628c:	f7fd f85c 	bl	8003348 <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006292:	e00a      	b.n	80062aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006294:	f7fd f858 	bl	8003348 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e04f      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062aa:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 020c 	and.w	r2, r3, #12
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d1eb      	bne.n	8006294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d20c      	bcs.n	80062e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4b22      	ldr	r3, [pc, #136]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d2:	4b20      	ldr	r3, [pc, #128]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d001      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e032      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4916      	ldr	r1, [pc, #88]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800630e:	4b12      	ldr	r3, [pc, #72]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	490e      	ldr	r1, [pc, #56]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	4313      	orrs	r3, r2
 8006320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006322:	f000 f821 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8006326:	4602      	mov	r2, r0
 8006328:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	490a      	ldr	r1, [pc, #40]	; (800635c <HAL_RCC_ClockConfig+0x1c0>)
 8006334:	5ccb      	ldrb	r3, [r1, r3]
 8006336:	fa22 f303 	lsr.w	r3, r2, r3
 800633a:	4a09      	ldr	r2, [pc, #36]	; (8006360 <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <HAL_RCC_ClockConfig+0x1c8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f7fc ffbc 	bl	80032c0 <HAL_InitTick>

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40023c00 	.word	0x40023c00
 8006358:	40023800 	.word	0x40023800
 800635c:	0800ef08 	.word	0x0800ef08
 8006360:	20000000 	.word	0x20000000
 8006364:	20000088 	.word	0x20000088

08006368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800636c:	b094      	sub	sp, #80	; 0x50
 800636e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	647b      	str	r3, [r7, #68]	; 0x44
 8006374:	2300      	movs	r3, #0
 8006376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006378:	2300      	movs	r3, #0
 800637a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006380:	4b79      	ldr	r3, [pc, #484]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	2b08      	cmp	r3, #8
 800638a:	d00d      	beq.n	80063a8 <HAL_RCC_GetSysClockFreq+0x40>
 800638c:	2b08      	cmp	r3, #8
 800638e:	f200 80e1 	bhi.w	8006554 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_RCC_GetSysClockFreq+0x34>
 8006396:	2b04      	cmp	r3, #4
 8006398:	d003      	beq.n	80063a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800639a:	e0db      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800639c:	4b73      	ldr	r3, [pc, #460]	; (800656c <HAL_RCC_GetSysClockFreq+0x204>)
 800639e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063a0:	e0db      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063a2:	4b73      	ldr	r3, [pc, #460]	; (8006570 <HAL_RCC_GetSysClockFreq+0x208>)
 80063a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063a6:	e0d8      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063a8:	4b6f      	ldr	r3, [pc, #444]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063b2:	4b6d      	ldr	r3, [pc, #436]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d063      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063be:	4b6a      	ldr	r3, [pc, #424]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	099b      	lsrs	r3, r3, #6
 80063c4:	2200      	movs	r2, #0
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
 80063d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063da:	4622      	mov	r2, r4
 80063dc:	462b      	mov	r3, r5
 80063de:	f04f 0000 	mov.w	r0, #0
 80063e2:	f04f 0100 	mov.w	r1, #0
 80063e6:	0159      	lsls	r1, r3, #5
 80063e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ec:	0150      	lsls	r0, r2, #5
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4621      	mov	r1, r4
 80063f4:	1a51      	subs	r1, r2, r1
 80063f6:	6139      	str	r1, [r7, #16]
 80063f8:	4629      	mov	r1, r5
 80063fa:	eb63 0301 	sbc.w	r3, r3, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800640c:	4659      	mov	r1, fp
 800640e:	018b      	lsls	r3, r1, #6
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006416:	4651      	mov	r1, sl
 8006418:	018a      	lsls	r2, r1, #6
 800641a:	4651      	mov	r1, sl
 800641c:	ebb2 0801 	subs.w	r8, r2, r1
 8006420:	4659      	mov	r1, fp
 8006422:	eb63 0901 	sbc.w	r9, r3, r1
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800643a:	4690      	mov	r8, r2
 800643c:	4699      	mov	r9, r3
 800643e:	4623      	mov	r3, r4
 8006440:	eb18 0303 	adds.w	r3, r8, r3
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	462b      	mov	r3, r5
 8006448:	eb49 0303 	adc.w	r3, r9, r3
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800645a:	4629      	mov	r1, r5
 800645c:	024b      	lsls	r3, r1, #9
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006464:	4621      	mov	r1, r4
 8006466:	024a      	lsls	r2, r1, #9
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
 800646c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646e:	2200      	movs	r2, #0
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
 8006472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006478:	f7fa fba6 	bl	8000bc8 <__aeabi_uldivmod>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4613      	mov	r3, r2
 8006482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006484:	e058      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006486:	4b38      	ldr	r3, [pc, #224]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	099b      	lsrs	r3, r3, #6
 800648c:	2200      	movs	r2, #0
 800648e:	4618      	mov	r0, r3
 8006490:	4611      	mov	r1, r2
 8006492:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006496:	623b      	str	r3, [r7, #32]
 8006498:	2300      	movs	r3, #0
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
 800649c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	f04f 0000 	mov.w	r0, #0
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	0159      	lsls	r1, r3, #5
 80064ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b2:	0150      	lsls	r0, r2, #5
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4641      	mov	r1, r8
 80064ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80064be:	4649      	mov	r1, r9
 80064c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064d8:	ebb2 040a 	subs.w	r4, r2, sl
 80064dc:	eb63 050b 	sbc.w	r5, r3, fp
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	00eb      	lsls	r3, r5, #3
 80064ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ee:	00e2      	lsls	r2, r4, #3
 80064f0:	4614      	mov	r4, r2
 80064f2:	461d      	mov	r5, r3
 80064f4:	4643      	mov	r3, r8
 80064f6:	18e3      	adds	r3, r4, r3
 80064f8:	603b      	str	r3, [r7, #0]
 80064fa:	464b      	mov	r3, r9
 80064fc:	eb45 0303 	adc.w	r3, r5, r3
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800650e:	4629      	mov	r1, r5
 8006510:	028b      	lsls	r3, r1, #10
 8006512:	4621      	mov	r1, r4
 8006514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006518:	4621      	mov	r1, r4
 800651a:	028a      	lsls	r2, r1, #10
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006522:	2200      	movs	r2, #0
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	61fa      	str	r2, [r7, #28]
 8006528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800652c:	f7fa fb4c 	bl	8000bc8 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	3301      	adds	r3, #1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800654a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006552:	e002      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_GetSysClockFreq+0x204>)
 8006556:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800655c:	4618      	mov	r0, r3
 800655e:	3750      	adds	r7, #80	; 0x50
 8006560:	46bd      	mov	sp, r7
 8006562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	00f42400 	.word	0x00f42400
 8006570:	007a1200 	.word	0x007a1200

08006574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <HAL_RCC_GetHCLKFreq+0x14>)
 800657a:	681b      	ldr	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000000 	.word	0x20000000

0800658c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d075      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065c0:	4b91      	ldr	r3, [pc, #580]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065c6:	f7fc febf 	bl	8003348 <HAL_GetTick>
 80065ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065cc:	e008      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065ce:	f7fc febb 	bl	8003348 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e189      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065e0:	4b8a      	ldr	r3, [pc, #552]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f0      	bne.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	019a      	lsls	r2, r3, #6
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	071b      	lsls	r3, r3, #28
 8006604:	4981      	ldr	r1, [pc, #516]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01f      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006618:	4b7c      	ldr	r3, [pc, #496]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800661a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800661e:	0f1b      	lsrs	r3, r3, #28
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	019a      	lsls	r2, r3, #6
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	431a      	orrs	r2, r3
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	071b      	lsls	r3, r3, #28
 8006638:	4974      	ldr	r1, [pc, #464]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006640:	4b72      	ldr	r3, [pc, #456]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006646:	f023 021f 	bic.w	r2, r3, #31
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	3b01      	subs	r3, #1
 8006650:	496e      	ldr	r1, [pc, #440]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00d      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	019a      	lsls	r2, r3, #6
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	071b      	lsls	r3, r3, #28
 8006678:	4964      	ldr	r1, [pc, #400]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006680:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006686:	f7fc fe5f 	bl	8003348 <HAL_GetTick>
 800668a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800668c:	e008      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800668e:	f7fc fe5b 	bl	8003348 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e129      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066a0:	4b5a      	ldr	r3, [pc, #360]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d079      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066c4:	4b52      	ldr	r3, [pc, #328]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ca:	f7fc fe3d 	bl	8003348 <HAL_GetTick>
 80066ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066d0:	e008      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066d2:	f7fc fe39 	bl	8003348 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e107      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066e4:	4b49      	ldr	r3, [pc, #292]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f0:	d0ef      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d020      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066fe:	4b43      	ldr	r3, [pc, #268]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	0f1b      	lsrs	r3, r3, #28
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	019a      	lsls	r2, r3, #6
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	061b      	lsls	r3, r3, #24
 8006718:	431a      	orrs	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	071b      	lsls	r3, r3, #28
 800671e:	493b      	ldr	r1, [pc, #236]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006726:	4b39      	ldr	r3, [pc, #228]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	3b01      	subs	r3, #1
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	4934      	ldr	r1, [pc, #208]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01e      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800674c:	4b2f      	ldr	r3, [pc, #188]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006752:	0e1b      	lsrs	r3, r3, #24
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	019a      	lsls	r2, r3, #6
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	061b      	lsls	r3, r3, #24
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	071b      	lsls	r3, r3, #28
 800676c:	4927      	ldr	r1, [pc, #156]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	4922      	ldr	r1, [pc, #136]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800678a:	4b21      	ldr	r3, [pc, #132]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006790:	f7fc fdda 	bl	8003348 <HAL_GetTick>
 8006794:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006798:	f7fc fdd6 	bl	8003348 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e0a4      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067aa:	4b18      	ldr	r3, [pc, #96]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b6:	d1ef      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 808b 	beq.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	4a0f      	ldr	r2, [pc, #60]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d4:	6413      	str	r3, [r2, #64]	; 0x40
 80067d6:	4b0d      	ldr	r3, [pc, #52]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a0b      	ldr	r2, [pc, #44]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80067e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067ee:	f7fc fdab 	bl	8003348 <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067f4:	e010      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067f6:	f7fc fda7 	bl	8003348 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d909      	bls.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e075      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006808:	42470068 	.word	0x42470068
 800680c:	40023800 	.word	0x40023800
 8006810:	42470070 	.word	0x42470070
 8006814:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006818:	4b38      	ldr	r3, [pc, #224]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0e8      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006824:	4b36      	ldr	r3, [pc, #216]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d02f      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	d028      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006842:	4b2f      	ldr	r3, [pc, #188]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800684c:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006852:	4b2c      	ldr	r3, [pc, #176]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006858:	4a29      	ldr	r2, [pc, #164]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800685e:	4b28      	ldr	r3, [pc, #160]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b01      	cmp	r3, #1
 8006868:	d114      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800686a:	f7fc fd6d 	bl	8003348 <HAL_GetTick>
 800686e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006870:	e00a      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006872:	f7fc fd69 	bl	8003348 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e035      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006888:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0ee      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a0:	d10d      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80068a2:	4b17      	ldr	r3, [pc, #92]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b6:	4912      	ldr	r1, [pc, #72]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	608b      	str	r3, [r1, #8]
 80068bc:	e005      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80068be:	4b10      	ldr	r3, [pc, #64]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068c8:	6093      	str	r3, [r2, #8]
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d6:	490a      	ldr	r1, [pc, #40]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80068f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40007000 	.word	0x40007000
 8006900:	40023800 	.word	0x40023800
 8006904:	42470e40 	.word	0x42470e40
 8006908:	424711e0 	.word	0x424711e0

0800690c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e025      	b.n	800696c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f81d 	bl	8006974 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f001 f925 	bl	8007b9c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	461a      	mov	r2, r3
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	f001 f97a 	bl	8007c56 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800699a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d101      	bne.n	80069a6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80069a2:	2302      	movs	r3, #2
 80069a4:	e021      	b.n	80069ea <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d002      	beq.n	80069b2 <HAL_SDRAM_SendCommand+0x2a>
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d118      	bne.n	80069e4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 f9b0 	bl	8007d28 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d104      	bne.n	80069da <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2205      	movs	r2, #5
 80069d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80069d8:	e006      	b.n	80069e8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80069e2:	e001      	b.n	80069e8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d101      	bne.n	8006a0c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e016      	b.n	8006a3a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10f      	bne.n	8006a38 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 f9bb 	bl	8007da2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e000      	b.n	8006a3a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e07b      	b.n	8006b4c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d108      	bne.n	8006a6e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a64:	d009      	beq.n	8006a7a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	e005      	b.n	8006a7a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f885 	bl	8006ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	ea42 0103 	orr.w	r1, r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	0c1b      	lsrs	r3, r3, #16
 8006b18:	f003 0104 	and.w	r1, r3, #4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	f003 0210 	and.w	r2, r3, #16
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e01a      	b.n	8006b9c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f81a 	bl	8006bb8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_SPI_Transmit+0x22>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e126      	b.n	8006e3c <HAL_SPI_Transmit+0x270>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bf6:	f7fc fba7 	bl	8003348 <HAL_GetTick>
 8006bfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d002      	beq.n	8006c12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c10:	e10b      	b.n	8006e2a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <HAL_SPI_Transmit+0x52>
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d102      	bne.n	8006c24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c22:	e102      	b.n	8006e2a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2203      	movs	r2, #3
 8006c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6a:	d10f      	bne.n	8006c8c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c96:	2b40      	cmp	r3, #64	; 0x40
 8006c98:	d007      	beq.n	8006caa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb2:	d14b      	bne.n	8006d4c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_SPI_Transmit+0xf6>
 8006cbc:	8afb      	ldrh	r3, [r7, #22]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d13e      	bne.n	8006d40 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	881a      	ldrh	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	1c9a      	adds	r2, r3, #2
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ce6:	e02b      	b.n	8006d40 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d112      	bne.n	8006d1c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	881a      	ldrh	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	1c9a      	adds	r2, r3, #2
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d1a:	e011      	b.n	8006d40 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d1c:	f7fc fb14 	bl	8003348 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d803      	bhi.n	8006d34 <HAL_SPI_Transmit+0x168>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d102      	bne.n	8006d3a <HAL_SPI_Transmit+0x16e>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d3e:	e074      	b.n	8006e2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1ce      	bne.n	8006ce8 <HAL_SPI_Transmit+0x11c>
 8006d4a:	e04c      	b.n	8006de6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_SPI_Transmit+0x18e>
 8006d54:	8afb      	ldrh	r3, [r7, #22]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d140      	bne.n	8006ddc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	330c      	adds	r3, #12
 8006d64:	7812      	ldrb	r2, [r2, #0]
 8006d66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d80:	e02c      	b.n	8006ddc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d113      	bne.n	8006db8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	86da      	strh	r2, [r3, #54]	; 0x36
 8006db6:	e011      	b.n	8006ddc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006db8:	f7fc fac6 	bl	8003348 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d803      	bhi.n	8006dd0 <HAL_SPI_Transmit+0x204>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	d102      	bne.n	8006dd6 <HAL_SPI_Transmit+0x20a>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dda:	e026      	b.n	8006e2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1cd      	bne.n	8006d82 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fbda 	bl	80075a4 <SPI_EndRxTxTransaction>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e000      	b.n	8006e2a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e60:	d112      	bne.n	8006e88 <HAL_SPI_Receive+0x44>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10e      	bne.n	8006e88 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f8f1 	bl	8007066 <HAL_SPI_TransmitReceive>
 8006e84:	4603      	mov	r3, r0
 8006e86:	e0ea      	b.n	800705e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_SPI_Receive+0x52>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e0e3      	b.n	800705e <HAL_SPI_Receive+0x21a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e9e:	f7fc fa53 	bl	8003348 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eb4:	e0ca      	b.n	800704c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_SPI_Receive+0x7e>
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ec6:	e0c1      	b.n	800704c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	88fa      	ldrh	r2, [r7, #6]
 8006ee6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0e:	d10f      	bne.n	8006f30 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b40      	cmp	r3, #64	; 0x40
 8006f3c:	d007      	beq.n	8006f4e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d162      	bne.n	800701c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f56:	e02e      	b.n	8006fb6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d115      	bne.n	8006f92 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f103 020c 	add.w	r2, r3, #12
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	7812      	ldrb	r2, [r2, #0]
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f90:	e011      	b.n	8006fb6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f92:	f7fc f9d9 	bl	8003348 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d803      	bhi.n	8006faa <HAL_SPI_Receive+0x166>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d102      	bne.n	8006fb0 <HAL_SPI_Receive+0x16c>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fb4:	e04a      	b.n	800704c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1cb      	bne.n	8006f58 <HAL_SPI_Receive+0x114>
 8006fc0:	e031      	b.n	8007026 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d113      	bne.n	8006ff8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	1c9a      	adds	r2, r3, #2
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ff6:	e011      	b.n	800701c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff8:	f7fc f9a6 	bl	8003348 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d803      	bhi.n	8007010 <HAL_SPI_Receive+0x1cc>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d102      	bne.n	8007016 <HAL_SPI_Receive+0x1d2>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	75fb      	strb	r3, [r7, #23]
          goto error;
 800701a:	e017      	b.n	800704c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1cd      	bne.n	8006fc2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 fa54 	bl	80074d8 <SPI_EndRxTransaction>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
 8007048:	e000      	b.n	800704c <HAL_SPI_Receive+0x208>
  }

error :
 800704a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b08c      	sub	sp, #48	; 0x30
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007074:	2301      	movs	r3, #1
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_SPI_TransmitReceive+0x26>
 8007088:	2302      	movs	r3, #2
 800708a:	e18a      	b.n	80073a2 <HAL_SPI_TransmitReceive+0x33c>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007094:	f7fc f958 	bl	8003348 <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070aa:	887b      	ldrh	r3, [r7, #2]
 80070ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d00f      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x70>
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070bc:	d107      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x68>
 80070c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d003      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070ce:	2302      	movs	r3, #2
 80070d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070d4:	e15b      	b.n	800738e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x82>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x82>
 80070e2:	887b      	ldrh	r3, [r7, #2]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070ee:	e14e      	b.n	800738e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d003      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2205      	movs	r2, #5
 8007100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	887a      	ldrh	r2, [r7, #2]
 8007114:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	887a      	ldrh	r2, [r7, #2]
 800711a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	887a      	ldrh	r2, [r7, #2]
 8007126:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	887a      	ldrh	r2, [r7, #2]
 800712c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d007      	beq.n	8007158 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007160:	d178      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_SPI_TransmitReceive+0x10a>
 800716a:	8b7b      	ldrh	r3, [r7, #26]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d166      	bne.n	800723e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007174:	881a      	ldrh	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007194:	e053      	b.n	800723e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d11b      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x176>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d016      	beq.n	80071dc <HAL_SPI_TransmitReceive+0x176>
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d113      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	1c9a      	adds	r2, r3, #2
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d119      	bne.n	800721e <HAL_SPI_TransmitReceive+0x1b8>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d014      	beq.n	800721e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	b292      	uxth	r2, r2
 8007200:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	1c9a      	adds	r2, r3, #2
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800721a:	2301      	movs	r3, #1
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800721e:	f7fc f893 	bl	8003348 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800722a:	429a      	cmp	r2, r3
 800722c:	d807      	bhi.n	800723e <HAL_SPI_TransmitReceive+0x1d8>
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d003      	beq.n	800723e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800723c:	e0a7      	b.n	800738e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1a6      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x130>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1a1      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x130>
 8007252:	e07c      	b.n	800734e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_SPI_TransmitReceive+0x1fc>
 800725c:	8b7b      	ldrh	r3, [r7, #26]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d16b      	bne.n	800733a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	330c      	adds	r3, #12
 800726c:	7812      	ldrb	r2, [r2, #0]
 800726e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007288:	e057      	b.n	800733a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b02      	cmp	r3, #2
 8007296:	d11c      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x26c>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d017      	beq.n	80072d2 <HAL_SPI_TransmitReceive+0x26c>
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d114      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	7812      	ldrb	r2, [r2, #0]
 80072b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d119      	bne.n	8007314 <HAL_SPI_TransmitReceive+0x2ae>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007310:	2301      	movs	r3, #1
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007314:	f7fc f818 	bl	8003348 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007320:	429a      	cmp	r2, r3
 8007322:	d803      	bhi.n	800732c <HAL_SPI_TransmitReceive+0x2c6>
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732a:	d102      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x2cc>
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007338:	e029      	b.n	800738e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1a2      	bne.n	800728a <HAL_SPI_TransmitReceive+0x224>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d19d      	bne.n	800728a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800734e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007350:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 f926 	bl	80075a4 <SPI_EndRxTxTransaction>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d006      	beq.n	800736c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2220      	movs	r2, #32
 8007368:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800736a:	e010      	b.n	800738e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10b      	bne.n	800738c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	e000      	b.n	800738e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800738c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800739e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3730      	adds	r7, #48	; 0x30
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073b8:	b2db      	uxtb	r3, r3
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	4613      	mov	r3, r2
 80073d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073d8:	f7fb ffb6 	bl	8003348 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073e8:	f7fb ffae 	bl	8003348 <HAL_GetTick>
 80073ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073ee:	4b39      	ldr	r3, [pc, #228]	; (80074d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	015b      	lsls	r3, r3, #5
 80073f4:	0d1b      	lsrs	r3, r3, #20
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	fb02 f303 	mul.w	r3, r2, r3
 80073fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073fe:	e054      	b.n	80074aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d050      	beq.n	80074aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007408:	f7fb ff9e 	bl	8003348 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	429a      	cmp	r2, r3
 8007416:	d902      	bls.n	800741e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d13d      	bne.n	800749a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800742c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007436:	d111      	bne.n	800745c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007440:	d004      	beq.n	800744c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800744a:	d107      	bne.n	800745c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007464:	d10f      	bne.n	8007486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e017      	b.n	80074ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d19b      	bne.n	8007400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20000000 	.word	0x20000000

080074d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af02      	add	r7, sp, #8
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ec:	d111      	bne.n	8007512 <SPI_EndRxTransaction+0x3a>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f6:	d004      	beq.n	8007502 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007500:	d107      	bne.n	8007512 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007510:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800751a:	d12a      	bne.n	8007572 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007524:	d012      	beq.n	800754c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2200      	movs	r2, #0
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff ff49 	bl	80073c8 <SPI_WaitFlagStateUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d02d      	beq.n	8007598 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007540:	f043 0220 	orr.w	r2, r3, #32
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e026      	b.n	800759a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2200      	movs	r2, #0
 8007554:	2101      	movs	r1, #1
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff ff36 	bl	80073c8 <SPI_WaitFlagStateUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01a      	beq.n	8007598 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	f043 0220 	orr.w	r2, r3, #32
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e013      	b.n	800759a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	2101      	movs	r1, #1
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7ff ff23 	bl	80073c8 <SPI_WaitFlagStateUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758c:	f043 0220 	orr.w	r2, r3, #32
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e000      	b.n	800759a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075b0:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <SPI_EndRxTxTransaction+0x7c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <SPI_EndRxTxTransaction+0x80>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	0d5b      	lsrs	r3, r3, #21
 80075bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ce:	d112      	bne.n	80075f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2200      	movs	r2, #0
 80075d8:	2180      	movs	r1, #128	; 0x80
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fef4 	bl	80073c8 <SPI_WaitFlagStateUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d016      	beq.n	8007614 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	f043 0220 	orr.w	r2, r3, #32
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e00f      	b.n	8007616 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3b01      	subs	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760c:	2b80      	cmp	r3, #128	; 0x80
 800760e:	d0f2      	beq.n	80075f6 <SPI_EndRxTxTransaction+0x52>
 8007610:	e000      	b.n	8007614 <SPI_EndRxTxTransaction+0x70>
        break;
 8007612:	bf00      	nop
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000000 	.word	0x20000000
 8007624:	165e9f81 	.word	0x165e9f81

08007628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e041      	b.n	80076be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7f9 fdf8 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f000 f968 	bl	800793c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d122      	bne.n	8007722 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d11b      	bne.n	8007722 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f06f 0202 	mvn.w	r2, #2
 80076f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f003 0303 	and.w	r3, r3, #3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f8f8 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 800770e:	e005      	b.n	800771c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f8ea 	bl	80078ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f8fb 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b04      	cmp	r3, #4
 800772e:	d122      	bne.n	8007776 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b04      	cmp	r3, #4
 800773c:	d11b      	bne.n	8007776 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f06f 0204 	mvn.w	r2, #4
 8007746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f8ce 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 8007762:	e005      	b.n	8007770 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f8c0 	bl	80078ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f8d1 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b08      	cmp	r3, #8
 8007782:	d122      	bne.n	80077ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b08      	cmp	r3, #8
 8007790:	d11b      	bne.n	80077ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f06f 0208 	mvn.w	r2, #8
 800779a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2204      	movs	r2, #4
 80077a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f8a4 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 80077b6:	e005      	b.n	80077c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f896 	bl	80078ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8a7 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d122      	bne.n	800781e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d11b      	bne.n	800781e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f06f 0210 	mvn.w	r2, #16
 80077ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2208      	movs	r2, #8
 80077f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f87a 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 800780a:	e005      	b.n	8007818 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f86c 	bl	80078ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f87d 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b01      	cmp	r3, #1
 800782a:	d10e      	bne.n	800784a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b01      	cmp	r3, #1
 8007838:	d107      	bne.n	800784a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f06f 0201 	mvn.w	r2, #1
 8007842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f846 	bl	80078d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d10e      	bne.n	8007876 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d107      	bne.n	8007876 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800786e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f989 	bl	8007b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d10e      	bne.n	80078a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d107      	bne.n	80078a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800789a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f842 	bl	8007926 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	d10e      	bne.n	80078ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d107      	bne.n	80078ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f06f 0220 	mvn.w	r2, #32
 80078c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f953 	bl	8007b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ce:	bf00      	nop
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a40      	ldr	r2, [pc, #256]	; (8007a50 <TIM_Base_SetConfig+0x114>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d013      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795a:	d00f      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a3d      	ldr	r2, [pc, #244]	; (8007a54 <TIM_Base_SetConfig+0x118>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d00b      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a3c      	ldr	r2, [pc, #240]	; (8007a58 <TIM_Base_SetConfig+0x11c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d007      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a3b      	ldr	r2, [pc, #236]	; (8007a5c <TIM_Base_SetConfig+0x120>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a3a      	ldr	r2, [pc, #232]	; (8007a60 <TIM_Base_SetConfig+0x124>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d108      	bne.n	800798e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a2f      	ldr	r2, [pc, #188]	; (8007a50 <TIM_Base_SetConfig+0x114>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d02b      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799c:	d027      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a2c      	ldr	r2, [pc, #176]	; (8007a54 <TIM_Base_SetConfig+0x118>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d023      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a2b      	ldr	r2, [pc, #172]	; (8007a58 <TIM_Base_SetConfig+0x11c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01f      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2a      	ldr	r2, [pc, #168]	; (8007a5c <TIM_Base_SetConfig+0x120>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d01b      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a29      	ldr	r2, [pc, #164]	; (8007a60 <TIM_Base_SetConfig+0x124>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d017      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a28      	ldr	r2, [pc, #160]	; (8007a64 <TIM_Base_SetConfig+0x128>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a27      	ldr	r2, [pc, #156]	; (8007a68 <TIM_Base_SetConfig+0x12c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00f      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a26      	ldr	r2, [pc, #152]	; (8007a6c <TIM_Base_SetConfig+0x130>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00b      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a25      	ldr	r2, [pc, #148]	; (8007a70 <TIM_Base_SetConfig+0x134>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d007      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a24      	ldr	r2, [pc, #144]	; (8007a74 <TIM_Base_SetConfig+0x138>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d003      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a23      	ldr	r2, [pc, #140]	; (8007a78 <TIM_Base_SetConfig+0x13c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d108      	bne.n	8007a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <TIM_Base_SetConfig+0x114>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_Base_SetConfig+0xf8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <TIM_Base_SetConfig+0x124>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d103      	bne.n	8007a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	615a      	str	r2, [r3, #20]
}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40010000 	.word	0x40010000
 8007a54:	40000400 	.word	0x40000400
 8007a58:	40000800 	.word	0x40000800
 8007a5c:	40000c00 	.word	0x40000c00
 8007a60:	40010400 	.word	0x40010400
 8007a64:	40014000 	.word	0x40014000
 8007a68:	40014400 	.word	0x40014400
 8007a6c:	40014800 	.word	0x40014800
 8007a70:	40001800 	.word	0x40001800
 8007a74:	40001c00 	.word	0x40001c00
 8007a78:	40002000 	.word	0x40002000

08007a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e05a      	b.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a21      	ldr	r2, [pc, #132]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d022      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d01d      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1d      	ldr	r2, [pc, #116]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d018      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1b      	ldr	r2, [pc, #108]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00e      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a17      	ldr	r2, [pc, #92]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10c      	bne.n	8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40010400 	.word	0x40010400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40001800 	.word	0x40001800

08007b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d123      	bne.n	8007bf6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007bb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	6851      	ldr	r1, [r2, #4]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	6892      	ldr	r2, [r2, #8]
 8007bc2:	4311      	orrs	r1, r2
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	68d2      	ldr	r2, [r2, #12]
 8007bc8:	4311      	orrs	r1, r2
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	6912      	ldr	r2, [r2, #16]
 8007bce:	4311      	orrs	r1, r2
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	6952      	ldr	r2, [r2, #20]
 8007bd4:	4311      	orrs	r1, r2
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	6992      	ldr	r2, [r2, #24]
 8007bda:	4311      	orrs	r1, r2
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	69d2      	ldr	r2, [r2, #28]
 8007be0:	4311      	orrs	r1, r2
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	6a12      	ldr	r2, [r2, #32]
 8007be6:	4311      	orrs	r1, r2
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bec:	430a      	orrs	r2, r1
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e028      	b.n	8007c48 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	69d9      	ldr	r1, [r3, #28]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	4319      	orrs	r1, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	6851      	ldr	r1, [r2, #4]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	6892      	ldr	r2, [r2, #8]
 8007c28:	4311      	orrs	r1, r2
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	68d2      	ldr	r2, [r2, #12]
 8007c2e:	4311      	orrs	r1, r2
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	6912      	ldr	r2, [r2, #16]
 8007c34:	4311      	orrs	r1, r2
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	6952      	ldr	r2, [r2, #20]
 8007c3a:	4311      	orrs	r1, r2
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	6992      	ldr	r2, [r2, #24]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d128      	bne.n	8007cba <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	1e59      	subs	r1, r3, #1
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	4319      	orrs	r1, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	4319      	orrs	r1, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	031b      	lsls	r3, r3, #12
 8007c92:	4319      	orrs	r1, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	041b      	lsls	r3, r3, #16
 8007c9c:	4319      	orrs	r1, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	051b      	lsls	r3, r3, #20
 8007ca6:	4319      	orrs	r1, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	061b      	lsls	r3, r3, #24
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	609a      	str	r2, [r3, #8]
 8007cb8:	e02f      	b.n	8007d1a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	68d2      	ldr	r2, [r2, #12]
 8007cca:	3a01      	subs	r2, #1
 8007ccc:	0311      	lsls	r1, r2, #12
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	6952      	ldr	r2, [r2, #20]
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	0512      	lsls	r2, r2, #20
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	1e59      	subs	r1, r3, #1
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	4319      	orrs	r1, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	4319      	orrs	r1, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	041b      	lsls	r3, r3, #16
 8007d08:	4319      	orrs	r1, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	430b      	orrs	r3, r1
 8007d14:	431a      	orrs	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	0d9b      	lsrs	r3, r3, #22
 8007d3e:	059b      	lsls	r3, r3, #22
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	6811      	ldr	r1, [r2, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	6852      	ldr	r2, [r2, #4]
 8007d48:	4311      	orrs	r1, r2
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	6892      	ldr	r2, [r2, #8]
 8007d4e:	3a01      	subs	r2, #1
 8007d50:	0152      	lsls	r2, r2, #5
 8007d52:	4311      	orrs	r1, r2
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	68d2      	ldr	r2, [r2, #12]
 8007d58:	0252      	lsls	r2, r2, #9
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8007d62:	f7fb faf1 	bl	8003348 <HAL_GetTick>
 8007d66:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007d68:	e010      	b.n	8007d8c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d00c      	beq.n	8007d8c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <FMC_SDRAM_SendCommand+0x60>
 8007d78:	f7fb fae6 	bl	8003348 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d201      	bcs.n	8007d8c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e006      	b.n	8007d9a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d0e8      	beq.n	8007d6a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007db4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	0052      	lsls	r2, r2, #1
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	f107 001c 	add.w	r0, r7, #28
 8007dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d122      	bne.n	8007e2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d105      	bne.n	8007e22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fbee 	bl	8009604 <USB_CoreReset>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	e01a      	b.n	8007e64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 fbe2 	bl	8009604 <USB_CoreReset>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
 8007e56:	e005      	b.n	8007e64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10b      	bne.n	8007e82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f043 0206 	orr.w	r2, r3, #6
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e8e:	b004      	add	sp, #16
 8007e90:	4770      	bx	lr
	...

08007e94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d165      	bne.n	8007f74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4a41      	ldr	r2, [pc, #260]	; (8007fb0 <USB_SetTurnaroundTime+0x11c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d906      	bls.n	8007ebe <USB_SetTurnaroundTime+0x2a>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4a40      	ldr	r2, [pc, #256]	; (8007fb4 <USB_SetTurnaroundTime+0x120>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d202      	bcs.n	8007ebe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007eb8:	230f      	movs	r3, #15
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	e062      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a3c      	ldr	r2, [pc, #240]	; (8007fb4 <USB_SetTurnaroundTime+0x120>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d306      	bcc.n	8007ed4 <USB_SetTurnaroundTime+0x40>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	4a3b      	ldr	r2, [pc, #236]	; (8007fb8 <USB_SetTurnaroundTime+0x124>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d202      	bcs.n	8007ed4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ece:	230e      	movs	r3, #14
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	e057      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4a38      	ldr	r2, [pc, #224]	; (8007fb8 <USB_SetTurnaroundTime+0x124>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d306      	bcc.n	8007eea <USB_SetTurnaroundTime+0x56>
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	4a37      	ldr	r2, [pc, #220]	; (8007fbc <USB_SetTurnaroundTime+0x128>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d202      	bcs.n	8007eea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ee4:	230d      	movs	r3, #13
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e04c      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4a33      	ldr	r2, [pc, #204]	; (8007fbc <USB_SetTurnaroundTime+0x128>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d306      	bcc.n	8007f00 <USB_SetTurnaroundTime+0x6c>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	4a32      	ldr	r2, [pc, #200]	; (8007fc0 <USB_SetTurnaroundTime+0x12c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d802      	bhi.n	8007f00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007efa:	230c      	movs	r3, #12
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	e041      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a2f      	ldr	r2, [pc, #188]	; (8007fc0 <USB_SetTurnaroundTime+0x12c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d906      	bls.n	8007f16 <USB_SetTurnaroundTime+0x82>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	4a2e      	ldr	r2, [pc, #184]	; (8007fc4 <USB_SetTurnaroundTime+0x130>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d802      	bhi.n	8007f16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f10:	230b      	movs	r3, #11
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	e036      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4a2a      	ldr	r2, [pc, #168]	; (8007fc4 <USB_SetTurnaroundTime+0x130>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d906      	bls.n	8007f2c <USB_SetTurnaroundTime+0x98>
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	4a29      	ldr	r2, [pc, #164]	; (8007fc8 <USB_SetTurnaroundTime+0x134>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d802      	bhi.n	8007f2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f26:	230a      	movs	r3, #10
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e02b      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4a26      	ldr	r2, [pc, #152]	; (8007fc8 <USB_SetTurnaroundTime+0x134>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d906      	bls.n	8007f42 <USB_SetTurnaroundTime+0xae>
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	4a25      	ldr	r2, [pc, #148]	; (8007fcc <USB_SetTurnaroundTime+0x138>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d202      	bcs.n	8007f42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f3c:	2309      	movs	r3, #9
 8007f3e:	617b      	str	r3, [r7, #20]
 8007f40:	e020      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4a21      	ldr	r2, [pc, #132]	; (8007fcc <USB_SetTurnaroundTime+0x138>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d306      	bcc.n	8007f58 <USB_SetTurnaroundTime+0xc4>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <USB_SetTurnaroundTime+0x13c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d802      	bhi.n	8007f58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f52:	2308      	movs	r3, #8
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	e015      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4a1d      	ldr	r2, [pc, #116]	; (8007fd0 <USB_SetTurnaroundTime+0x13c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d906      	bls.n	8007f6e <USB_SetTurnaroundTime+0xda>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4a1c      	ldr	r2, [pc, #112]	; (8007fd4 <USB_SetTurnaroundTime+0x140>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d202      	bcs.n	8007f6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f68:	2307      	movs	r3, #7
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	e00a      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f6e:	2306      	movs	r3, #6
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	e007      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d102      	bne.n	8007f80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f7a:	2309      	movs	r3, #9
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	e001      	b.n	8007f84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f80:	2309      	movs	r3, #9
 8007f82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	029b      	lsls	r3, r3, #10
 8007f98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	00d8acbf 	.word	0x00d8acbf
 8007fb4:	00e4e1c0 	.word	0x00e4e1c0
 8007fb8:	00f42400 	.word	0x00f42400
 8007fbc:	01067380 	.word	0x01067380
 8007fc0:	011a499f 	.word	0x011a499f
 8007fc4:	01312cff 	.word	0x01312cff
 8007fc8:	014ca43f 	.word	0x014ca43f
 8007fcc:	016e3600 	.word	0x016e3600
 8007fd0:	01a6ab1f 	.word	0x01a6ab1f
 8007fd4:	01e84800 	.word	0x01e84800

08007fd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f043 0201 	orr.w	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f023 0201 	bic.w	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d115      	bne.n	800806a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800804a:	2001      	movs	r0, #1
 800804c:	f7fb f988 	bl	8003360 <HAL_Delay>
      ms++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fa45 	bl	80094e6 <USB_GetMode>
 800805c:	4603      	mov	r3, r0
 800805e:	2b01      	cmp	r3, #1
 8008060:	d01e      	beq.n	80080a0 <USB_SetCurrentMode+0x84>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b31      	cmp	r3, #49	; 0x31
 8008066:	d9f0      	bls.n	800804a <USB_SetCurrentMode+0x2e>
 8008068:	e01a      	b.n	80080a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d115      	bne.n	800809c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800807c:	2001      	movs	r0, #1
 800807e:	f7fb f96f 	bl	8003360 <HAL_Delay>
      ms++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fa2c 	bl	80094e6 <USB_GetMode>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <USB_SetCurrentMode+0x84>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b31      	cmp	r3, #49	; 0x31
 8008098:	d9f0      	bls.n	800807c <USB_SetCurrentMode+0x60>
 800809a:	e001      	b.n	80080a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e005      	b.n	80080ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b32      	cmp	r3, #50	; 0x32
 80080a4:	d101      	bne.n	80080aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080b4:	b084      	sub	sp, #16
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080ce:	2300      	movs	r3, #0
 80080d0:	613b      	str	r3, [r7, #16]
 80080d2:	e009      	b.n	80080e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	3340      	adds	r3, #64	; 0x40
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	3301      	adds	r3, #1
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2b0e      	cmp	r3, #14
 80080ec:	d9f2      	bls.n	80080d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d11c      	bne.n	800812e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008102:	f043 0302 	orr.w	r3, r3, #2
 8008106:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	639a      	str	r2, [r3, #56]	; 0x38
 800812c:	e00b      	b.n	8008146 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800814c:	461a      	mov	r2, r3
 800814e:	2300      	movs	r3, #0
 8008150:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008158:	4619      	mov	r1, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008160:	461a      	mov	r2, r3
 8008162:	680b      	ldr	r3, [r1, #0]
 8008164:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10c      	bne.n	8008186 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d104      	bne.n	800817c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008172:	2100      	movs	r1, #0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f965 	bl	8008444 <USB_SetDevSpeed>
 800817a:	e008      	b.n	800818e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800817c:	2101      	movs	r1, #1
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f960 	bl	8008444 <USB_SetDevSpeed>
 8008184:	e003      	b.n	800818e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008186:	2103      	movs	r1, #3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f95b 	bl	8008444 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800818e:	2110      	movs	r1, #16
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8f3 	bl	800837c <USB_FlushTxFifo>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f91f 	bl	80083e4 <USB_FlushRxFifo>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b6:	461a      	mov	r2, r3
 80081b8:	2300      	movs	r3, #0
 80081ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ce:	461a      	mov	r2, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081d4:	2300      	movs	r3, #0
 80081d6:	613b      	str	r3, [r7, #16]
 80081d8:	e043      	b.n	8008262 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f0:	d118      	bne.n	8008224 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008204:	461a      	mov	r2, r3
 8008206:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	e013      	b.n	8008236 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821a:	461a      	mov	r2, r3
 800821c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	e008      	b.n	8008236 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	461a      	mov	r2, r3
 8008232:	2300      	movs	r3, #0
 8008234:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	461a      	mov	r2, r3
 8008244:	2300      	movs	r3, #0
 8008246:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	461a      	mov	r2, r3
 8008256:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800825a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3301      	adds	r3, #1
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	d3b7      	bcc.n	80081da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	e043      	b.n	80082f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008286:	d118      	bne.n	80082ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	461a      	mov	r2, r3
 800829c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	e013      	b.n	80082cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	461a      	mov	r2, r3
 80082b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	e008      	b.n	80082cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	2300      	movs	r3, #0
 80082ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	461a      	mov	r2, r3
 80082da:	2300      	movs	r3, #0
 80082dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	461a      	mov	r2, r3
 80082ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	3301      	adds	r3, #1
 80082f6:	613b      	str	r3, [r7, #16]
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d3b7      	bcc.n	8008270 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800830e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008312:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008320:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	2b00      	cmp	r3, #0
 8008326:	d105      	bne.n	8008334 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f043 0210 	orr.w	r2, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <USB_DevInit+0x2c4>)
 800833a:	4313      	orrs	r3, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f043 0208 	orr.w	r2, r3, #8
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d107      	bne.n	8008368 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008360:	f043 0304 	orr.w	r3, r3, #4
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008374:	b004      	add	sp, #16
 8008376:	4770      	bx	lr
 8008378:	803c3800 	.word	0x803c3800

0800837c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <USB_FlushTxFifo+0x64>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d901      	bls.n	800839c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e01b      	b.n	80083d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	daf2      	bge.n	800838a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	019b      	lsls	r3, r3, #6
 80083ac:	f043 0220 	orr.w	r2, r3, #32
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4a08      	ldr	r2, [pc, #32]	; (80083e0 <USB_FlushTxFifo+0x64>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d901      	bls.n	80083c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e006      	b.n	80083d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d0f0      	beq.n	80083b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	00030d40 	.word	0x00030d40

080083e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4a11      	ldr	r2, [pc, #68]	; (8008440 <USB_FlushRxFifo+0x5c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d901      	bls.n	8008402 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e018      	b.n	8008434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	daf2      	bge.n	80083f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2210      	movs	r2, #16
 8008412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4a08      	ldr	r2, [pc, #32]	; (8008440 <USB_FlushRxFifo+0x5c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e006      	b.n	8008434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b10      	cmp	r3, #16
 8008430:	d0f0      	beq.n	8008414 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	00030d40 	.word	0x00030d40

08008444 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008476:	b480      	push	{r7}
 8008478:	b087      	sub	sp, #28
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f003 0306 	and.w	r3, r3, #6
 800848e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]
 800849a:	e00a      	b.n	80084b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d002      	beq.n	80084a8 <USB_GetDevSpeed+0x32>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d102      	bne.n	80084ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80084a8:	2302      	movs	r3, #2
 80084aa:	75fb      	strb	r3, [r7, #23]
 80084ac:	e001      	b.n	80084b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80084ae:	230f      	movs	r3, #15
 80084b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d13a      	bne.n	8008552 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	2101      	movs	r1, #1
 80084ee:	fa01 f303 	lsl.w	r3, r1, r3
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084fa:	4313      	orrs	r3, r2
 80084fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d155      	bne.n	80085c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	791b      	ldrb	r3, [r3, #4]
 800852e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008530:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	059b      	lsls	r3, r3, #22
 8008536:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008538:	4313      	orrs	r3, r2
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	e036      	b.n	80085c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008558:	69da      	ldr	r2, [r3, #28]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	2101      	movs	r1, #1
 8008564:	fa01 f303 	lsl.w	r3, r1, r3
 8008568:	041b      	lsls	r3, r3, #16
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008570:	4313      	orrs	r3, r2
 8008572:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d11a      	bne.n	80085c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	791b      	ldrb	r3, [r3, #4]
 80085a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085a6:	430b      	orrs	r3, r1
 80085a8:	4313      	orrs	r3, r2
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
	...

080085d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d161      	bne.n	80086b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008602:	d11f      	bne.n	8008644 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	0151      	lsls	r1, r2, #5
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	440a      	add	r2, r1
 800861a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800861e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008622:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	0151      	lsls	r1, r2, #5
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	440a      	add	r2, r1
 800863a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008642:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	2101      	movs	r1, #1
 8008656:	fa01 f303 	lsl.w	r3, r1, r3
 800865a:	b29b      	uxth	r3, r3
 800865c:	43db      	mvns	r3, r3
 800865e:	68f9      	ldr	r1, [r7, #12]
 8008660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008664:	4013      	ands	r3, r2
 8008666:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866e:	69da      	ldr	r2, [r3, #28]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	2101      	movs	r1, #1
 800867a:	fa01 f303 	lsl.w	r3, r1, r3
 800867e:	b29b      	uxth	r3, r3
 8008680:	43db      	mvns	r3, r3
 8008682:	68f9      	ldr	r1, [r7, #12]
 8008684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008688:	4013      	ands	r3, r2
 800868a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	0159      	lsls	r1, r3, #5
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	440b      	add	r3, r1
 80086a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a6:	4619      	mov	r1, r3
 80086a8:	4b35      	ldr	r3, [pc, #212]	; (8008780 <USB_DeactivateEndpoint+0x1b0>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	600b      	str	r3, [r1, #0]
 80086ae:	e060      	b.n	8008772 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086c6:	d11f      	bne.n	8008708 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	0151      	lsls	r1, r2, #5
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	440a      	add	r2, r1
 80086fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008706:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	2101      	movs	r1, #1
 800871a:	fa01 f303 	lsl.w	r3, r1, r3
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	43db      	mvns	r3, r3
 8008722:	68f9      	ldr	r1, [r7, #12]
 8008724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008728:	4013      	ands	r3, r2
 800872a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008732:	69da      	ldr	r2, [r3, #28]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 030f 	and.w	r3, r3, #15
 800873c:	2101      	movs	r1, #1
 800873e:	fa01 f303 	lsl.w	r3, r1, r3
 8008742:	041b      	lsls	r3, r3, #16
 8008744:	43db      	mvns	r3, r3
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800874c:	4013      	ands	r3, r2
 800874e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	0159      	lsls	r1, r3, #5
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	440b      	add	r3, r1
 8008766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876a:	4619      	mov	r1, r3
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <USB_DeactivateEndpoint+0x1b4>)
 800876e:	4013      	ands	r3, r2
 8008770:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	ec337800 	.word	0xec337800
 8008784:	eff37800 	.word	0xeff37800

08008788 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	f040 815c 	bne.w	8008a62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d132      	bne.n	8008818 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	440a      	add	r2, r1
 800880c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008810:	0cdb      	lsrs	r3, r3, #19
 8008812:	04db      	lsls	r3, r3, #19
 8008814:	6113      	str	r3, [r2, #16]
 8008816:	e074      	b.n	8008902 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008832:	0cdb      	lsrs	r3, r3, #19
 8008834:	04db      	lsls	r3, r3, #19
 8008836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	0151      	lsls	r1, r2, #5
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	440a      	add	r2, r1
 800884e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008852:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008856:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800885a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6999      	ldr	r1, [r3, #24]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	440b      	add	r3, r1
 8008874:	1e59      	subs	r1, r3, #1
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	fbb1 f3f3 	udiv	r3, r1, r3
 800887e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008880:	4b9d      	ldr	r3, [pc, #628]	; (8008af8 <USB_EPStartXfer+0x370>)
 8008882:	400b      	ands	r3, r1
 8008884:	69b9      	ldr	r1, [r7, #24]
 8008886:	0148      	lsls	r0, r1, #5
 8008888:	69f9      	ldr	r1, [r7, #28]
 800888a:	4401      	add	r1, r0
 800888c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008890:	4313      	orrs	r3, r2
 8008892:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088aa:	69b9      	ldr	r1, [r7, #24]
 80088ac:	0148      	lsls	r0, r1, #5
 80088ae:	69f9      	ldr	r1, [r7, #28]
 80088b0:	4401      	add	r1, r0
 80088b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088b6:	4313      	orrs	r3, r2
 80088b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	791b      	ldrb	r3, [r3, #4]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d11f      	bne.n	8008902 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	0151      	lsls	r1, r2, #5
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	440a      	add	r2, r1
 80088d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008900:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d14b      	bne.n	80089a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891c:	461a      	mov	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	791b      	ldrb	r3, [r3, #4]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d128      	bne.n	800897e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d110      	bne.n	800895e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	e00f      	b.n	800897e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	440a      	add	r2, r1
 8008974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800897c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	0151      	lsls	r1, r2, #5
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	440a      	add	r2, r1
 8008994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008998:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e133      	b.n	8008c08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	0151      	lsls	r1, r2, #5
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	440a      	add	r2, r1
 80089b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	791b      	ldrb	r3, [r3, #4]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d015      	beq.n	80089f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 811b 	beq.w	8008c08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	2101      	movs	r1, #1
 80089e4:	fa01 f303 	lsl.w	r3, r1, r3
 80089e8:	69f9      	ldr	r1, [r7, #28]
 80089ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089ee:	4313      	orrs	r3, r2
 80089f0:	634b      	str	r3, [r1, #52]	; 0x34
 80089f2:	e109      	b.n	8008c08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d110      	bne.n	8008a26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	0151      	lsls	r1, r2, #5
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	440a      	add	r2, r1
 8008a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	e00f      	b.n	8008a46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	0151      	lsls	r1, r2, #5
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	440a      	add	r2, r1
 8008a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6919      	ldr	r1, [r3, #16]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	b298      	uxth	r0, r3
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4603      	mov	r3, r0
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fade 	bl	800901c <USB_WritePacket>
 8008a60:	e0d2      	b.n	8008c08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7c:	0cdb      	lsrs	r3, r3, #19
 8008a7e:	04db      	lsls	r3, r3, #19
 8008a80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008aa4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d126      	bne.n	8008afc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	0148      	lsls	r0, r1, #5
 8008ac8:	69f9      	ldr	r1, [r7, #28]
 8008aca:	4401      	add	r1, r0
 8008acc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	69fa      	ldr	r2, [r7, #28]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008af2:	6113      	str	r3, [r2, #16]
 8008af4:	e03a      	b.n	8008b6c <USB_EPStartXfer+0x3e4>
 8008af6:	bf00      	nop
 8008af8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	699a      	ldr	r2, [r3, #24]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	1e5a      	subs	r2, r3, #1
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	8afa      	ldrh	r2, [r7, #22]
 8008b18:	fb03 f202 	mul.w	r2, r3, r2
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	8afb      	ldrh	r3, [r7, #22]
 8008b30:	04d9      	lsls	r1, r3, #19
 8008b32:	4b38      	ldr	r3, [pc, #224]	; (8008c14 <USB_EPStartXfer+0x48c>)
 8008b34:	400b      	ands	r3, r1
 8008b36:	69b9      	ldr	r1, [r7, #24]
 8008b38:	0148      	lsls	r0, r1, #5
 8008b3a:	69f9      	ldr	r1, [r7, #28]
 8008b3c:	4401      	add	r1, r0
 8008b3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b42:	4313      	orrs	r3, r2
 8008b44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	691a      	ldr	r2, [r3, #16]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b5c:	69b9      	ldr	r1, [r7, #24]
 8008b5e:	0148      	lsls	r0, r1, #5
 8008b60:	69f9      	ldr	r1, [r7, #28]
 8008b62:	4401      	add	r1, r0
 8008b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d10d      	bne.n	8008b8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6919      	ldr	r1, [r3, #16]
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	791b      	ldrb	r3, [r3, #4]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d128      	bne.n	8008be8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d110      	bne.n	8008bc8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e00f      	b.n	8008be8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	1ff80000 	.word	0x1ff80000

08008c18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	f040 80ce 	bne.w	8008dd6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d132      	bne.n	8008ca8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca0:	0cdb      	lsrs	r3, r3, #19
 8008ca2:	04db      	lsls	r3, r3, #19
 8008ca4:	6113      	str	r3, [r2, #16]
 8008ca6:	e04e      	b.n	8008d46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc2:	0cdb      	lsrs	r3, r3, #19
 8008cc4:	04db      	lsls	r3, r3, #19
 8008cc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	0151      	lsls	r1, r2, #5
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	440a      	add	r2, r1
 8008cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ce6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	699a      	ldr	r2, [r3, #24]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d903      	bls.n	8008d00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d36:	6939      	ldr	r1, [r7, #16]
 8008d38:	0148      	lsls	r0, r1, #5
 8008d3a:	6979      	ldr	r1, [r7, #20]
 8008d3c:	4401      	add	r1, r0
 8008d3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d42:	4313      	orrs	r3, r2
 8008d44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d11e      	bne.n	8008d8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d009      	beq.n	8008d68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d60:	461a      	mov	r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	e097      	b.n	8008eba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	0151      	lsls	r1, r2, #5
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	440a      	add	r2, r1
 8008da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008da8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 8083 	beq.w	8008eba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 030f 	and.w	r3, r3, #15
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dca:	6979      	ldr	r1, [r7, #20]
 8008dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	634b      	str	r3, [r1, #52]	; 0x34
 8008dd4:	e071      	b.n	8008eba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df0:	0cdb      	lsrs	r3, r3, #19
 8008df2:	04db      	lsls	r3, r3, #19
 8008df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	0151      	lsls	r1, r2, #5
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	440a      	add	r2, r1
 8008e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e68:	6939      	ldr	r1, [r7, #16]
 8008e6a:	0148      	lsls	r0, r1, #5
 8008e6c:	6979      	ldr	r1, [r7, #20]
 8008e6e:	4401      	add	r1, r0
 8008e70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e74:	4313      	orrs	r3, r2
 8008e76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d10d      	bne.n	8008e9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6919      	ldr	r1, [r3, #16]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	460a      	mov	r2, r1
 8008e98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008eb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	371c      	adds	r7, #28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d14a      	bne.n	8008f7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008efe:	f040 8086 	bne.w	800900e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	7812      	ldrb	r2, [r2, #0]
 8008f16:	0151      	lsls	r1, r2, #5
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	0151      	lsls	r1, r2, #5
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	440a      	add	r2, r1
 8008f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d902      	bls.n	8008f60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f5e:	e056      	b.n	800900e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f78:	d0e7      	beq.n	8008f4a <USB_EPStopXfer+0x82>
 8008f7a:	e048      	b.n	800900e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f94:	d13b      	bne.n	800900e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	7812      	ldrb	r2, [r2, #0]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	7812      	ldrb	r2, [r2, #0]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d902      	bls.n	8008ff4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ff2:	e00c      	b.n	800900e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900c:	d0e7      	beq.n	8008fde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800900e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009010:	4618      	mov	r0, r3
 8009012:	371c      	adds	r7, #28
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800901c:	b480      	push	{r7}
 800901e:	b089      	sub	sp, #36	; 0x24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	4611      	mov	r1, r2
 8009028:	461a      	mov	r2, r3
 800902a:	460b      	mov	r3, r1
 800902c:	71fb      	strb	r3, [r7, #7]
 800902e:	4613      	mov	r3, r2
 8009030:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800903a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d123      	bne.n	800908a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009042:	88bb      	ldrh	r3, [r7, #4]
 8009044:	3303      	adds	r3, #3
 8009046:	089b      	lsrs	r3, r3, #2
 8009048:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800904a:	2300      	movs	r3, #0
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	e018      	b.n	8009082 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	031a      	lsls	r2, r3, #12
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	4413      	add	r3, r2
 8009058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905c:	461a      	mov	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	3301      	adds	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	3301      	adds	r3, #1
 800906e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	3301      	adds	r3, #1
 8009074:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	3301      	adds	r3, #1
 800907a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	3301      	adds	r3, #1
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	429a      	cmp	r2, r3
 8009088:	d3e2      	bcc.n	8009050 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3724      	adds	r7, #36	; 0x24
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009098:	b480      	push	{r7}
 800909a:	b08b      	sub	sp, #44	; 0x2c
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	089b      	lsrs	r3, r3, #2
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090be:	2300      	movs	r3, #0
 80090c0:	623b      	str	r3, [r7, #32]
 80090c2:	e014      	b.n	80090ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	3301      	adds	r3, #1
 80090d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	3301      	adds	r3, #1
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	3301      	adds	r3, #1
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	3301      	adds	r3, #1
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	3301      	adds	r3, #1
 80090ec:	623b      	str	r3, [r7, #32]
 80090ee:	6a3a      	ldr	r2, [r7, #32]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d3e6      	bcc.n	80090c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090f6:	8bfb      	ldrh	r3, [r7, #30]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01e      	beq.n	800913a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009106:	461a      	mov	r2, r3
 8009108:	f107 0310 	add.w	r3, r7, #16
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	fa22 f303 	lsr.w	r3, r2, r3
 800911c:	b2da      	uxtb	r2, r3
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	701a      	strb	r2, [r3, #0]
      i++;
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	3301      	adds	r3, #1
 8009126:	623b      	str	r3, [r7, #32]
      pDest++;
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	3301      	adds	r3, #1
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800912e:	8bfb      	ldrh	r3, [r7, #30]
 8009130:	3b01      	subs	r3, #1
 8009132:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009134:	8bfb      	ldrh	r3, [r7, #30]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1ea      	bne.n	8009110 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800913c:	4618      	mov	r0, r3
 800913e:	372c      	adds	r7, #44	; 0x2c
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d12c      	bne.n	80091be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	db12      	blt.n	800919c <USB_EPSetStall+0x54>
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00f      	beq.n	800919c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009196:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800919a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	e02b      	b.n	8009216 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	db12      	blt.n	80091f6 <USB_EPSetStall+0xae>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00f      	beq.n	80091f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	0151      	lsls	r1, r2, #5
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	440a      	add	r2, r1
 80091ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009214:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	785b      	ldrb	r3, [r3, #1]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d128      	bne.n	8009292 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800925e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	2b03      	cmp	r3, #3
 8009266:	d003      	beq.n	8009270 <USB_EPClearStall+0x4c>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	791b      	ldrb	r3, [r3, #4]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d138      	bne.n	80092e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	e027      	b.n	80092e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	0151      	lsls	r1, r2, #5
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	440a      	add	r2, r1
 80092a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d003      	beq.n	80092c2 <USB_EPClearStall+0x9e>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	791b      	ldrb	r3, [r3, #4]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d10f      	bne.n	80092e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800930e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009312:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009324:	68f9      	ldr	r1, [r7, #12]
 8009326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800932a:	4313      	orrs	r3, r2
 800932c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800936a:	f023 0302 	bic.w	r3, r3, #2
 800936e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009398:	f023 0303 	bic.w	r3, r3, #3
 800939c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ac:	f043 0302 	orr.w	r3, r3, #2
 80093b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	4013      	ands	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093d8:	68fb      	ldr	r3, [r7, #12]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b085      	sub	sp, #20
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	4013      	ands	r3, r2
 8009408:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	0c1b      	lsrs	r3, r3, #16
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	4013      	ands	r3, r2
 800943c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	b29b      	uxth	r3, r3
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	4013      	ands	r3, r2
 800947a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800947c:	68bb      	ldr	r3, [r7, #8]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800948a:	b480      	push	{r7}
 800948c:	b087      	sub	sp, #28
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094ae:	78fb      	ldrb	r3, [r7, #3]
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ba:	01db      	lsls	r3, r3, #7
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4013      	ands	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094d8:	68bb      	ldr	r3, [r7, #8]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	f003 0301 	and.w	r3, r3, #1
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009520:	f023 0307 	bic.w	r3, r3, #7
 8009524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	460b      	mov	r3, r1
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	333c      	adds	r3, #60	; 0x3c
 800955e:	3304      	adds	r3, #4
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	4a26      	ldr	r2, [pc, #152]	; (8009600 <USB_EP0_OutStart+0xb8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d90a      	bls.n	8009582 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800957c:	d101      	bne.n	8009582 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	e037      	b.n	80095f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009588:	461a      	mov	r2, r3
 800958a:	2300      	movs	r3, #0
 800958c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800959c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b0:	f043 0318 	orr.w	r3, r3, #24
 80095b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d10f      	bne.n	80095f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d6:	461a      	mov	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	4f54300a 	.word	0x4f54300a

08009604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3301      	adds	r3, #1
 8009614:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4a13      	ldr	r2, [pc, #76]	; (8009668 <USB_CoreReset+0x64>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d901      	bls.n	8009622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e01b      	b.n	800965a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	daf2      	bge.n	8009610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f043 0201 	orr.w	r2, r3, #1
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
 800963e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4a09      	ldr	r2, [pc, #36]	; (8009668 <USB_CoreReset+0x64>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d901      	bls.n	800964c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e006      	b.n	800965a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b01      	cmp	r3, #1
 8009656:	d0f0      	beq.n	800963a <USB_CoreReset+0x36>

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	00030d40 	.word	0x00030d40

0800966c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009678:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800967c:	f002 fc96 	bl	800bfac <USBD_static_malloc>
 8009680:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	32b0      	adds	r2, #176	; 0xb0
 8009692:	2100      	movs	r1, #0
 8009694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009698:	2302      	movs	r3, #2
 800969a:	e0d4      	b.n	8009846 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800969c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f002 fcf0 	bl	800c088 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	32b0      	adds	r2, #176	; 0xb0
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	32b0      	adds	r2, #176	; 0xb0
 80096c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	7c1b      	ldrb	r3, [r3, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d138      	bne.n	8009746 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096d4:	4b5e      	ldr	r3, [pc, #376]	; (8009850 <USBD_CDC_Init+0x1e4>)
 80096d6:	7819      	ldrb	r1, [r3, #0]
 80096d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096dc:	2202      	movs	r2, #2
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f002 fb41 	bl	800bd66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096e4:	4b5a      	ldr	r3, [pc, #360]	; (8009850 <USBD_CDC_Init+0x1e4>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f003 020f 	and.w	r2, r3, #15
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	440b      	add	r3, r1
 80096f8:	3324      	adds	r3, #36	; 0x24
 80096fa:	2201      	movs	r2, #1
 80096fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096fe:	4b55      	ldr	r3, [pc, #340]	; (8009854 <USBD_CDC_Init+0x1e8>)
 8009700:	7819      	ldrb	r1, [r3, #0]
 8009702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009706:	2202      	movs	r2, #2
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f002 fb2c 	bl	800bd66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800970e:	4b51      	ldr	r3, [pc, #324]	; (8009854 <USBD_CDC_Init+0x1e8>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	f003 020f 	and.w	r2, r3, #15
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009726:	2201      	movs	r2, #1
 8009728:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800972a:	4b4b      	ldr	r3, [pc, #300]	; (8009858 <USBD_CDC_Init+0x1ec>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f003 020f 	and.w	r2, r3, #15
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	3326      	adds	r3, #38	; 0x26
 8009740:	2210      	movs	r2, #16
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e035      	b.n	80097b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009746:	4b42      	ldr	r3, [pc, #264]	; (8009850 <USBD_CDC_Init+0x1e4>)
 8009748:	7819      	ldrb	r1, [r3, #0]
 800974a:	2340      	movs	r3, #64	; 0x40
 800974c:	2202      	movs	r2, #2
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f002 fb09 	bl	800bd66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009754:	4b3e      	ldr	r3, [pc, #248]	; (8009850 <USBD_CDC_Init+0x1e4>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	f003 020f 	and.w	r2, r3, #15
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	3324      	adds	r3, #36	; 0x24
 800976a:	2201      	movs	r2, #1
 800976c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800976e:	4b39      	ldr	r3, [pc, #228]	; (8009854 <USBD_CDC_Init+0x1e8>)
 8009770:	7819      	ldrb	r1, [r3, #0]
 8009772:	2340      	movs	r3, #64	; 0x40
 8009774:	2202      	movs	r2, #2
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f002 faf5 	bl	800bd66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800977c:	4b35      	ldr	r3, [pc, #212]	; (8009854 <USBD_CDC_Init+0x1e8>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	440b      	add	r3, r1
 8009790:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009794:	2201      	movs	r2, #1
 8009796:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009798:	4b2f      	ldr	r3, [pc, #188]	; (8009858 <USBD_CDC_Init+0x1ec>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	f003 020f 	and.w	r2, r3, #15
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	3326      	adds	r3, #38	; 0x26
 80097ae:	2210      	movs	r2, #16
 80097b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097b2:	4b29      	ldr	r3, [pc, #164]	; (8009858 <USBD_CDC_Init+0x1ec>)
 80097b4:	7819      	ldrb	r1, [r3, #0]
 80097b6:	2308      	movs	r3, #8
 80097b8:	2203      	movs	r2, #3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f002 fad3 	bl	800bd66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097c0:	4b25      	ldr	r3, [pc, #148]	; (8009858 <USBD_CDC_Init+0x1ec>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f003 020f 	and.w	r2, r3, #15
 80097c8:	6879      	ldr	r1, [r7, #4]
 80097ca:	4613      	mov	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	440b      	add	r3, r1
 80097d4:	3324      	adds	r3, #36	; 0x24
 80097d6:	2201      	movs	r2, #1
 80097d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	33b0      	adds	r3, #176	; 0xb0
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009810:	2302      	movs	r3, #2
 8009812:	e018      	b.n	8009846 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	7c1b      	ldrb	r3, [r3, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800981c:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <USBD_CDC_Init+0x1e8>)
 800981e:	7819      	ldrb	r1, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f002 fb8a 	bl	800bf44 <USBD_LL_PrepareReceive>
 8009830:	e008      	b.n	8009844 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009832:	4b08      	ldr	r3, [pc, #32]	; (8009854 <USBD_CDC_Init+0x1e8>)
 8009834:	7819      	ldrb	r1, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800983c:	2340      	movs	r3, #64	; 0x40
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f002 fb80 	bl	800bf44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20000117 	.word	0x20000117
 8009854:	20000118 	.word	0x20000118
 8009858:	20000119 	.word	0x20000119

0800985c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009868:	4b3a      	ldr	r3, [pc, #232]	; (8009954 <USBD_CDC_DeInit+0xf8>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f002 fa9f 	bl	800bdb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009874:	4b37      	ldr	r3, [pc, #220]	; (8009954 <USBD_CDC_DeInit+0xf8>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	3324      	adds	r3, #36	; 0x24
 800988a:	2200      	movs	r2, #0
 800988c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800988e:	4b32      	ldr	r3, [pc, #200]	; (8009958 <USBD_CDC_DeInit+0xfc>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f002 fa8c 	bl	800bdb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800989a:	4b2f      	ldr	r3, [pc, #188]	; (8009958 <USBD_CDC_DeInit+0xfc>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 020f 	and.w	r2, r3, #15
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098b2:	2200      	movs	r2, #0
 80098b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80098b6:	4b29      	ldr	r3, [pc, #164]	; (800995c <USBD_CDC_DeInit+0x100>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f002 fa78 	bl	800bdb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80098c2:	4b26      	ldr	r3, [pc, #152]	; (800995c <USBD_CDC_DeInit+0x100>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	f003 020f 	and.w	r2, r3, #15
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	440b      	add	r3, r1
 80098d6:	3324      	adds	r3, #36	; 0x24
 80098d8:	2200      	movs	r2, #0
 80098da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80098dc:	4b1f      	ldr	r3, [pc, #124]	; (800995c <USBD_CDC_DeInit+0x100>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	f003 020f 	and.w	r2, r3, #15
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	440b      	add	r3, r1
 80098f0:	3326      	adds	r3, #38	; 0x26
 80098f2:	2200      	movs	r2, #0
 80098f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	32b0      	adds	r2, #176	; 0xb0
 8009900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d01f      	beq.n	8009948 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	33b0      	adds	r3, #176	; 0xb0
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	32b0      	adds	r2, #176	; 0xb0
 8009926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992a:	4618      	mov	r0, r3
 800992c:	f002 fb4c 	bl	800bfc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	32b0      	adds	r2, #176	; 0xb0
 800993a:	2100      	movs	r1, #0
 800993c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000117 	.word	0x20000117
 8009958:	20000118 	.word	0x20000118
 800995c:	20000119 	.word	0x20000119

08009960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	32b0      	adds	r2, #176	; 0xb0
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800998c:	2303      	movs	r3, #3
 800998e:	e0bf      	b.n	8009b10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009998:	2b00      	cmp	r3, #0
 800999a:	d050      	beq.n	8009a3e <USBD_CDC_Setup+0xde>
 800999c:	2b20      	cmp	r3, #32
 800999e:	f040 80af 	bne.w	8009b00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	88db      	ldrh	r3, [r3, #6]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d03a      	beq.n	8009a20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b25b      	sxtb	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	da1b      	bge.n	80099ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	33b0      	adds	r3, #176	; 0xb0
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80099ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	88d2      	ldrh	r2, [r2, #6]
 80099d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	88db      	ldrh	r3, [r3, #6]
 80099d6:	2b07      	cmp	r3, #7
 80099d8:	bf28      	it	cs
 80099da:	2307      	movcs	r3, #7
 80099dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	89fa      	ldrh	r2, [r7, #14]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fd89 	bl	800b4fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80099ea:	e090      	b.n	8009b0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	785a      	ldrb	r2, [r3, #1]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88db      	ldrh	r3, [r3, #6]
 80099fa:	2b3f      	cmp	r3, #63	; 0x3f
 80099fc:	d803      	bhi.n	8009a06 <USBD_CDC_Setup+0xa6>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	88db      	ldrh	r3, [r3, #6]
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	e000      	b.n	8009a08 <USBD_CDC_Setup+0xa8>
 8009a06:	2240      	movs	r2, #64	; 0x40
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a0e:	6939      	ldr	r1, [r7, #16]
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009a16:	461a      	mov	r2, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fd9b 	bl	800b554 <USBD_CtlPrepareRx>
      break;
 8009a1e:	e076      	b.n	8009b0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	33b0      	adds	r3, #176	; 0xb0
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	7850      	ldrb	r0, [r2, #1]
 8009a36:	2200      	movs	r2, #0
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	4798      	blx	r3
      break;
 8009a3c:	e067      	b.n	8009b0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	2b0b      	cmp	r3, #11
 8009a44:	d851      	bhi.n	8009aea <USBD_CDC_Setup+0x18a>
 8009a46:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <USBD_CDC_Setup+0xec>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a7d 	.word	0x08009a7d
 8009a50:	08009af9 	.word	0x08009af9
 8009a54:	08009aeb 	.word	0x08009aeb
 8009a58:	08009aeb 	.word	0x08009aeb
 8009a5c:	08009aeb 	.word	0x08009aeb
 8009a60:	08009aeb 	.word	0x08009aeb
 8009a64:	08009aeb 	.word	0x08009aeb
 8009a68:	08009aeb 	.word	0x08009aeb
 8009a6c:	08009aeb 	.word	0x08009aeb
 8009a70:	08009aeb 	.word	0x08009aeb
 8009a74:	08009aa7 	.word	0x08009aa7
 8009a78:	08009ad1 	.word	0x08009ad1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d107      	bne.n	8009a98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a88:	f107 030a 	add.w	r3, r7, #10
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 fd33 	bl	800b4fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a96:	e032      	b.n	8009afe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fcbd 	bl	800b41a <USBD_CtlError>
            ret = USBD_FAIL;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	75fb      	strb	r3, [r7, #23]
          break;
 8009aa4:	e02b      	b.n	8009afe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d107      	bne.n	8009ac2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ab2:	f107 030d 	add.w	r3, r7, #13
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 fd1e 	bl	800b4fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ac0:	e01d      	b.n	8009afe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f001 fca8 	bl	800b41a <USBD_CtlError>
            ret = USBD_FAIL;
 8009aca:	2303      	movs	r3, #3
 8009acc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ace:	e016      	b.n	8009afe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d00f      	beq.n	8009afc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fc9b 	bl	800b41a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ae8:	e008      	b.n	8009afc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 fc94 	bl	800b41a <USBD_CtlError>
          ret = USBD_FAIL;
 8009af2:	2303      	movs	r3, #3
 8009af4:	75fb      	strb	r3, [r7, #23]
          break;
 8009af6:	e002      	b.n	8009afe <USBD_CDC_Setup+0x19e>
          break;
 8009af8:	bf00      	nop
 8009afa:	e008      	b.n	8009b0e <USBD_CDC_Setup+0x1ae>
          break;
 8009afc:	bf00      	nop
      }
      break;
 8009afe:	e006      	b.n	8009b0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 fc89 	bl	800b41a <USBD_CtlError>
      ret = USBD_FAIL;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	32b0      	adds	r2, #176	; 0xb0
 8009b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e065      	b.n	8009c0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	32b0      	adds	r2, #176	; 0xb0
 8009b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	f003 020f 	and.w	r2, r3, #15
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	3318      	adds	r3, #24
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d02f      	beq.n	8009bcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	f003 020f 	and.w	r2, r3, #15
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	3318      	adds	r3, #24
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	f003 010f 	and.w	r1, r3, #15
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	440b      	add	r3, r1
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4403      	add	r3, r0
 8009b94:	3348      	adds	r3, #72	; 0x48
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ba0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d112      	bne.n	8009bcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	f003 020f 	and.w	r2, r3, #15
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	440b      	add	r3, r1
 8009bb8:	3318      	adds	r3, #24
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bbe:	78f9      	ldrb	r1, [r7, #3]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f002 f99c 	bl	800bf02 <USBD_LL_Transmit>
 8009bca:	e01f      	b.n	8009c0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	33b0      	adds	r3, #176	; 0xb0
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d010      	beq.n	8009c0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	33b0      	adds	r3, #176	; 0xb0
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	32b0      	adds	r2, #176	; 0xb0
 8009c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	32b0      	adds	r2, #176	; 0xb0
 8009c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e01a      	b.n	8009c7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f002 f99a 	bl	800bf86 <USBD_LL_GetRxDataSize>
 8009c52:	4602      	mov	r2, r0
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	33b0      	adds	r3, #176	; 0xb0
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c78:	4611      	mov	r1, r2
 8009c7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	32b0      	adds	r2, #176	; 0xb0
 8009c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e025      	b.n	8009cf4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	33b0      	adds	r3, #176	; 0xb0
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01a      	beq.n	8009cf2 <USBD_CDC_EP0_RxReady+0x6c>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009cc2:	2bff      	cmp	r3, #255	; 0xff
 8009cc4:	d015      	beq.n	8009cf2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	33b0      	adds	r3, #176	; 0xb0
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009cde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ce6:	b292      	uxth	r2, r2
 8009ce8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	22ff      	movs	r2, #255	; 0xff
 8009cee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d04:	2182      	movs	r1, #130	; 0x82
 8009d06:	4818      	ldr	r0, [pc, #96]	; (8009d68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d08:	f000 fd4f 	bl	800a7aa <USBD_GetEpDesc>
 8009d0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d0e:	2101      	movs	r1, #1
 8009d10:	4815      	ldr	r0, [pc, #84]	; (8009d68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d12:	f000 fd4a 	bl	800a7aa <USBD_GetEpDesc>
 8009d16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d18:	2181      	movs	r1, #129	; 0x81
 8009d1a:	4813      	ldr	r0, [pc, #76]	; (8009d68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d1c:	f000 fd45 	bl	800a7aa <USBD_GetEpDesc>
 8009d20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d3c:	711a      	strb	r2, [r3, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d006      	beq.n	8009d56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d50:	711a      	strb	r2, [r3, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2243      	movs	r2, #67	; 0x43
 8009d5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	200000d4 	.word	0x200000d4

08009d6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d74:	2182      	movs	r1, #130	; 0x82
 8009d76:	4818      	ldr	r0, [pc, #96]	; (8009dd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d78:	f000 fd17 	bl	800a7aa <USBD_GetEpDesc>
 8009d7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4815      	ldr	r0, [pc, #84]	; (8009dd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d82:	f000 fd12 	bl	800a7aa <USBD_GetEpDesc>
 8009d86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d88:	2181      	movs	r1, #129	; 0x81
 8009d8a:	4813      	ldr	r0, [pc, #76]	; (8009dd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d8c:	f000 fd0d 	bl	800a7aa <USBD_GetEpDesc>
 8009d90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2210      	movs	r2, #16
 8009d9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2200      	movs	r2, #0
 8009da8:	711a      	strb	r2, [r3, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f042 0202 	orr.w	r2, r2, #2
 8009db0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d006      	beq.n	8009dc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	711a      	strb	r2, [r3, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f042 0202 	orr.w	r2, r2, #2
 8009dc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2243      	movs	r2, #67	; 0x43
 8009dca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009dcc:	4b02      	ldr	r3, [pc, #8]	; (8009dd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200000d4 	.word	0x200000d4

08009ddc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009de4:	2182      	movs	r1, #130	; 0x82
 8009de6:	4818      	ldr	r0, [pc, #96]	; (8009e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009de8:	f000 fcdf 	bl	800a7aa <USBD_GetEpDesc>
 8009dec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009dee:	2101      	movs	r1, #1
 8009df0:	4815      	ldr	r0, [pc, #84]	; (8009e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009df2:	f000 fcda 	bl	800a7aa <USBD_GetEpDesc>
 8009df6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009df8:	2181      	movs	r1, #129	; 0x81
 8009dfa:	4813      	ldr	r0, [pc, #76]	; (8009e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dfc:	f000 fcd5 	bl	800a7aa <USBD_GetEpDesc>
 8009e00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2210      	movs	r2, #16
 8009e0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d006      	beq.n	8009e22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e1c:	711a      	strb	r2, [r3, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d006      	beq.n	8009e36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e30:	711a      	strb	r2, [r3, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2243      	movs	r2, #67	; 0x43
 8009e3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e3c:	4b02      	ldr	r3, [pc, #8]	; (8009e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	200000d4 	.word	0x200000d4

08009e4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	220a      	movs	r2, #10
 8009e58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e5a:	4b03      	ldr	r3, [pc, #12]	; (8009e68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	20000090 	.word	0x20000090

08009e6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e009      	b.n	8009e94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	33b0      	adds	r3, #176	; 0xb0
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	32b0      	adds	r2, #176	; 0xb0
 8009eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e008      	b.n	8009ed8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	371c      	adds	r7, #28
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	32b0      	adds	r2, #176	; 0xb0
 8009ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e004      	b.n	8009f12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	32b0      	adds	r2, #176	; 0xb0
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	32b0      	adds	r2, #176	; 0xb0
 8009f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e025      	b.n	8009f9e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d11f      	bne.n	8009f9c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009f64:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <USBD_CDC_TransmitPacket+0x88>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	f003 020f 	and.w	r2, r3, #15
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4403      	add	r3, r0
 8009f7e:	3318      	adds	r3, #24
 8009f80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009f82:	4b09      	ldr	r3, [pc, #36]	; (8009fa8 <USBD_CDC_TransmitPacket+0x88>)
 8009f84:	7819      	ldrb	r1, [r3, #0]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 ffb5 	bl	800bf02 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000117 	.word	0x20000117

08009fac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	32b0      	adds	r2, #176	; 0xb0
 8009fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32b0      	adds	r2, #176	; 0xb0
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e018      	b.n	800a00c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	7c1b      	ldrb	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <USBD_CDC_ReceivePacket+0x68>)
 8009fe4:	7819      	ldrb	r1, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 ffa7 	bl	800bf44 <USBD_LL_PrepareReceive>
 8009ff6:	e008      	b.n	800a00a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <USBD_CDC_ReceivePacket+0x68>)
 8009ffa:	7819      	ldrb	r1, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a002:	2340      	movs	r3, #64	; 0x40
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 ff9d 	bl	800bf44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20000118 	.word	0x20000118

0800a018 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e01f      	b.n	800a070 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	79fa      	ldrb	r2, [r7, #7]
 800a062:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f001 fe11 	bl	800bc8c <USBD_LL_Init>
 800a06a:	4603      	mov	r3, r0
 800a06c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e025      	b.n	800a0dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	32ae      	adds	r2, #174	; 0xae
 800a0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00f      	beq.n	800a0cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32ae      	adds	r2, #174	; 0xae
 800a0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	f107 020e 	add.w	r2, r7, #14
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 fe1f 	bl	800bd30 <USBD_LL_Start>
 800a0f2:	4603      	mov	r3, r0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a104:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	460b      	mov	r3, r1
 800a11c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d009      	beq.n	800a140 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	4611      	mov	r1, r2
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	4798      	blx	r3
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	460b      	mov	r3, r1
 800a154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	4611      	mov	r1, r2
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a170:	2303      	movs	r3, #3
 800a172:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	4618      	mov	r0, r3
 800a192:	f001 f908 	bl	800b3a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1b2:	f003 031f 	and.w	r3, r3, #31
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d01a      	beq.n	800a1f0 <USBD_LL_SetupStage+0x72>
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d822      	bhi.n	800a204 <USBD_LL_SetupStage+0x86>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <USBD_LL_SetupStage+0x4a>
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d00a      	beq.n	800a1dc <USBD_LL_SetupStage+0x5e>
 800a1c6:	e01d      	b.n	800a204 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fb5f 	bl	800a894 <USBD_StdDevReq>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1da:	e020      	b.n	800a21e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fbc7 	bl	800a978 <USBD_StdItfReq>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ee:	e016      	b.n	800a21e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fc29 	bl	800aa50 <USBD_StdEPReq>
 800a1fe:	4603      	mov	r3, r0
 800a200:	73fb      	strb	r3, [r7, #15]
      break;
 800a202:	e00c      	b.n	800a21e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a20a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 fdec 	bl	800bdf0 <USBD_LL_StallEP>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
      break;
 800a21c:	bf00      	nop
  }

  return ret;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	460b      	mov	r3, r1
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d16e      	bne.n	800a31e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a24e:	2b03      	cmp	r3, #3
 800a250:	f040 8098 	bne.w	800a384 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d913      	bls.n	800a288 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	1ad2      	subs	r2, r2, r3
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	4293      	cmp	r3, r2
 800a278:	bf28      	it	cs
 800a27a:	4613      	movcs	r3, r2
 800a27c:	461a      	mov	r2, r3
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f001 f984 	bl	800b58e <USBD_CtlContinueRx>
 800a286:	e07d      	b.n	800a384 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a28e:	f003 031f 	and.w	r3, r3, #31
 800a292:	2b02      	cmp	r3, #2
 800a294:	d014      	beq.n	800a2c0 <USBD_LL_DataOutStage+0x98>
 800a296:	2b02      	cmp	r3, #2
 800a298:	d81d      	bhi.n	800a2d6 <USBD_LL_DataOutStage+0xae>
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <USBD_LL_DataOutStage+0x7c>
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d003      	beq.n	800a2aa <USBD_LL_DataOutStage+0x82>
 800a2a2:	e018      	b.n	800a2d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	75bb      	strb	r3, [r7, #22]
            break;
 800a2a8:	e018      	b.n	800a2dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 fa5e 	bl	800a776 <USBD_CoreFindIF>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75bb      	strb	r3, [r7, #22]
            break;
 800a2be:	e00d      	b.n	800a2dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fa60 	bl	800a790 <USBD_CoreFindEP>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	75bb      	strb	r3, [r7, #22]
            break;
 800a2d4:	e002      	b.n	800a2dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75bb      	strb	r3, [r7, #22]
            break;
 800a2da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2dc:	7dbb      	ldrb	r3, [r7, #22]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d119      	bne.n	800a316 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d113      	bne.n	800a316 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a2ee:	7dba      	ldrb	r2, [r7, #22]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	32ae      	adds	r2, #174	; 0xae
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a2fe:	7dba      	ldrb	r2, [r7, #22]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a306:	7dba      	ldrb	r2, [r7, #22]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	32ae      	adds	r2, #174	; 0xae
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f001 f94a 	bl	800b5b0 <USBD_CtlSendStatus>
 800a31c:	e032      	b.n	800a384 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a31e:	7afb      	ldrb	r3, [r7, #11]
 800a320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a324:	b2db      	uxtb	r3, r3
 800a326:	4619      	mov	r1, r3
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 fa31 	bl	800a790 <USBD_CoreFindEP>
 800a32e:	4603      	mov	r3, r0
 800a330:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a332:	7dbb      	ldrb	r3, [r7, #22]
 800a334:	2bff      	cmp	r3, #255	; 0xff
 800a336:	d025      	beq.n	800a384 <USBD_LL_DataOutStage+0x15c>
 800a338:	7dbb      	ldrb	r3, [r7, #22]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d122      	bne.n	800a384 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b03      	cmp	r3, #3
 800a348:	d117      	bne.n	800a37a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a34a:	7dba      	ldrb	r2, [r7, #22]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	32ae      	adds	r2, #174	; 0xae
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00f      	beq.n	800a37a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a35a:	7dba      	ldrb	r2, [r7, #22]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a362:	7dba      	ldrb	r2, [r7, #22]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	32ae      	adds	r2, #174	; 0xae
 800a368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	7afa      	ldrb	r2, [r7, #11]
 800a370:	4611      	mov	r1, r2
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	4798      	blx	r3
 800a376:	4603      	mov	r3, r0
 800a378:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
 800a382:	e000      	b.n	800a386 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b086      	sub	sp, #24
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	460b      	mov	r3, r1
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a39c:	7afb      	ldrb	r3, [r7, #11]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d16f      	bne.n	800a482 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d15a      	bne.n	800a468 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d914      	bls.n	800a3e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	1ad2      	subs	r2, r2, r3
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f001 f8ac 	bl	800b532 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3da:	2300      	movs	r3, #0
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f001 fdaf 	bl	800bf44 <USBD_LL_PrepareReceive>
 800a3e6:	e03f      	b.n	800a468 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	68da      	ldr	r2, [r3, #12]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d11c      	bne.n	800a42e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d316      	bcc.n	800a42e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d20f      	bcs.n	800a42e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a40e:	2200      	movs	r2, #0
 800a410:	2100      	movs	r1, #0
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f001 f88d 	bl	800b532 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a420:	2300      	movs	r3, #0
 800a422:	2200      	movs	r2, #0
 800a424:	2100      	movs	r1, #0
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f001 fd8c 	bl	800bf44 <USBD_LL_PrepareReceive>
 800a42c:	e01c      	b.n	800a468 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b03      	cmp	r3, #3
 800a438:	d10f      	bne.n	800a45a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a45a:	2180      	movs	r1, #128	; 0x80
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f001 fcc7 	bl	800bdf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f001 f8b7 	bl	800b5d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d03a      	beq.n	800a4e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7ff fe42 	bl	800a0fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a480:	e032      	b.n	800a4e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a482:	7afb      	ldrb	r3, [r7, #11]
 800a484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	4619      	mov	r1, r3
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f97f 	bl	800a790 <USBD_CoreFindEP>
 800a492:	4603      	mov	r3, r0
 800a494:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	2bff      	cmp	r3, #255	; 0xff
 800a49a:	d025      	beq.n	800a4e8 <USBD_LL_DataInStage+0x15a>
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d122      	bne.n	800a4e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d11c      	bne.n	800a4e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a4ae:	7dfa      	ldrb	r2, [r7, #23]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	32ae      	adds	r2, #174	; 0xae
 800a4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d014      	beq.n	800a4e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4be:	7dfa      	ldrb	r2, [r7, #23]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4c6:	7dfa      	ldrb	r2, [r7, #23]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	32ae      	adds	r2, #174	; 0xae
 800a4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	7afa      	ldrb	r2, [r7, #11]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	4798      	blx	r3
 800a4da:	4603      	mov	r3, r0
 800a4dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4de:	7dbb      	ldrb	r3, [r7, #22]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a4e4:	7dbb      	ldrb	r3, [r7, #22]
 800a4e6:	e000      	b.n	800a4ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d014      	beq.n	800a558 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00e      	beq.n	800a558 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6852      	ldr	r2, [r2, #4]
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	4611      	mov	r1, r2
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	4798      	blx	r3
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a554:	2303      	movs	r3, #3
 800a556:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a558:	2340      	movs	r3, #64	; 0x40
 800a55a:	2200      	movs	r2, #0
 800a55c:	2100      	movs	r1, #0
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 fc01 	bl	800bd66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2240      	movs	r2, #64	; 0x40
 800a570:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a574:	2340      	movs	r3, #64	; 0x40
 800a576:	2200      	movs	r2, #0
 800a578:	2180      	movs	r1, #128	; 0x80
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 fbf3 	bl	800bd66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2240      	movs	r2, #64	; 0x40
 800a58a:	621a      	str	r2, [r3, #32]

  return ret;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	78fa      	ldrb	r2, [r7, #3]
 800a5a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2204      	movs	r2, #4
 800a5d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	d106      	bne.n	800a604 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b03      	cmp	r3, #3
 800a624:	d110      	bne.n	800a648 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00b      	beq.n	800a648 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d005      	beq.n	800a648 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	32ae      	adds	r2, #174	; 0xae
 800a668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a670:	2303      	movs	r3, #3
 800a672:	e01c      	b.n	800a6ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b03      	cmp	r3, #3
 800a67e:	d115      	bne.n	800a6ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	32ae      	adds	r2, #174	; 0xae
 800a68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	32ae      	adds	r2, #174	; 0xae
 800a69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	78fa      	ldrb	r2, [r7, #3]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	32ae      	adds	r2, #174	; 0xae
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e01c      	b.n	800a712 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d115      	bne.n	800a710 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	32ae      	adds	r2, #174	; 0xae
 800a6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	32ae      	adds	r2, #174	; 0xae
 800a702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	78fa      	ldrb	r2, [r7, #3]
 800a70a:	4611      	mov	r1, r2
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00e      	beq.n	800a76c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	6852      	ldr	r2, [r2, #4]
 800a75a:	b2d2      	uxtb	r2, r2
 800a75c:	4611      	mov	r1, r2
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	4798      	blx	r3
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a768:	2303      	movs	r3, #3
 800a76a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a782:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a79c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	885b      	ldrh	r3, [r3, #2]
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d920      	bls.n	800a814 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a7da:	e013      	b.n	800a804 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a7dc:	f107 030a 	add.w	r3, r7, #10
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6978      	ldr	r0, [r7, #20]
 800a7e4:	f000 f81b 	bl	800a81e <USBD_GetNextDesc>
 800a7e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b05      	cmp	r3, #5
 800a7f0:	d108      	bne.n	800a804 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	789b      	ldrb	r3, [r3, #2]
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d008      	beq.n	800a812 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a800:	2300      	movs	r3, #0
 800a802:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	885b      	ldrh	r3, [r3, #2]
 800a808:	b29a      	uxth	r2, r3
 800a80a:	897b      	ldrh	r3, [r7, #10]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d8e5      	bhi.n	800a7dc <USBD_GetEpDesc+0x32>
 800a810:	e000      	b.n	800a814 <USBD_GetEpDesc+0x6a>
          break;
 800a812:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a814:	693b      	ldr	r3, [r7, #16]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a81e:	b480      	push	{r7}
 800a820:	b085      	sub	sp, #20
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	881a      	ldrh	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	4413      	add	r3, r2
 800a838:	b29a      	uxth	r2, r3
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4413      	add	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a84a:	68fb      	ldr	r3, [r7, #12]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	3301      	adds	r3, #1
 800a86e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a876:	8a3b      	ldrh	r3, [r7, #16]
 800a878:	021b      	lsls	r3, r3, #8
 800a87a:	b21a      	sxth	r2, r3
 800a87c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a880:	4313      	orrs	r3, r2
 800a882:	b21b      	sxth	r3, r3
 800a884:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a886:	89fb      	ldrh	r3, [r7, #14]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	371c      	adds	r7, #28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8aa:	2b40      	cmp	r3, #64	; 0x40
 800a8ac:	d005      	beq.n	800a8ba <USBD_StdDevReq+0x26>
 800a8ae:	2b40      	cmp	r3, #64	; 0x40
 800a8b0:	d857      	bhi.n	800a962 <USBD_StdDevReq+0xce>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00f      	beq.n	800a8d6 <USBD_StdDevReq+0x42>
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d153      	bne.n	800a962 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	32ae      	adds	r2, #174	; 0xae
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d4:	e04a      	b.n	800a96c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b09      	cmp	r3, #9
 800a8dc:	d83b      	bhi.n	800a956 <USBD_StdDevReq+0xc2>
 800a8de:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <USBD_StdDevReq+0x50>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a939 	.word	0x0800a939
 800a8e8:	0800a94d 	.word	0x0800a94d
 800a8ec:	0800a957 	.word	0x0800a957
 800a8f0:	0800a943 	.word	0x0800a943
 800a8f4:	0800a957 	.word	0x0800a957
 800a8f8:	0800a917 	.word	0x0800a917
 800a8fc:	0800a90d 	.word	0x0800a90d
 800a900:	0800a957 	.word	0x0800a957
 800a904:	0800a92f 	.word	0x0800a92f
 800a908:	0800a921 	.word	0x0800a921
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa3c 	bl	800ad8c <USBD_GetDescriptor>
          break;
 800a914:	e024      	b.n	800a960 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fba1 	bl	800b060 <USBD_SetAddress>
          break;
 800a91e:	e01f      	b.n	800a960 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fbe0 	bl	800b0e8 <USBD_SetConfig>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
          break;
 800a92c:	e018      	b.n	800a960 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fc83 	bl	800b23c <USBD_GetConfig>
          break;
 800a936:	e013      	b.n	800a960 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fcb4 	bl	800b2a8 <USBD_GetStatus>
          break;
 800a940:	e00e      	b.n	800a960 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fce3 	bl	800b310 <USBD_SetFeature>
          break;
 800a94a:	e009      	b.n	800a960 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fd07 	bl	800b362 <USBD_ClrFeature>
          break;
 800a954:	e004      	b.n	800a960 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fd5e 	bl	800b41a <USBD_CtlError>
          break;
 800a95e:	bf00      	nop
      }
      break;
 800a960:	e004      	b.n	800a96c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fd58 	bl	800b41a <USBD_CtlError>
      break;
 800a96a:	bf00      	nop
  }

  return ret;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop

0800a978 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a98e:	2b40      	cmp	r3, #64	; 0x40
 800a990:	d005      	beq.n	800a99e <USBD_StdItfReq+0x26>
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d852      	bhi.n	800aa3c <USBD_StdItfReq+0xc4>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <USBD_StdItfReq+0x26>
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d14e      	bne.n	800aa3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d840      	bhi.n	800aa2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	889b      	ldrh	r3, [r3, #4]
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d836      	bhi.n	800aa24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	889b      	ldrh	r3, [r3, #4]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff fed9 	bl	800a776 <USBD_CoreFindIF>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2bff      	cmp	r3, #255	; 0xff
 800a9cc:	d01d      	beq.n	800aa0a <USBD_StdItfReq+0x92>
 800a9ce:	7bbb      	ldrb	r3, [r7, #14]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d11a      	bne.n	800aa0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a9d4:	7bba      	ldrb	r2, [r7, #14]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	32ae      	adds	r2, #174	; 0xae
 800a9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00f      	beq.n	800aa04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a9e4:	7bba      	ldrb	r2, [r7, #14]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9ec:	7bba      	ldrb	r2, [r7, #14]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	32ae      	adds	r2, #174	; 0xae
 800a9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	4798      	blx	r3
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa02:	e004      	b.n	800aa0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa04:	2303      	movs	r3, #3
 800aa06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa08:	e001      	b.n	800aa0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	88db      	ldrh	r3, [r3, #6]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d110      	bne.n	800aa38 <USBD_StdItfReq+0xc0>
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10d      	bne.n	800aa38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fdc7 	bl	800b5b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa22:	e009      	b.n	800aa38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fcf7 	bl	800b41a <USBD_CtlError>
          break;
 800aa2c:	e004      	b.n	800aa38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fcf2 	bl	800b41a <USBD_CtlError>
          break;
 800aa36:	e000      	b.n	800aa3a <USBD_StdItfReq+0xc2>
          break;
 800aa38:	bf00      	nop
      }
      break;
 800aa3a:	e004      	b.n	800aa46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fceb 	bl	800b41a <USBD_CtlError>
      break;
 800aa44:	bf00      	nop
  }

  return ret;
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	889b      	ldrh	r3, [r3, #4]
 800aa62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa6c:	2b40      	cmp	r3, #64	; 0x40
 800aa6e:	d007      	beq.n	800aa80 <USBD_StdEPReq+0x30>
 800aa70:	2b40      	cmp	r3, #64	; 0x40
 800aa72:	f200 817f 	bhi.w	800ad74 <USBD_StdEPReq+0x324>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d02a      	beq.n	800aad0 <USBD_StdEPReq+0x80>
 800aa7a:	2b20      	cmp	r3, #32
 800aa7c:	f040 817a 	bne.w	800ad74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f7ff fe83 	bl	800a790 <USBD_CoreFindEP>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa8e:	7b7b      	ldrb	r3, [r7, #13]
 800aa90:	2bff      	cmp	r3, #255	; 0xff
 800aa92:	f000 8174 	beq.w	800ad7e <USBD_StdEPReq+0x32e>
 800aa96:	7b7b      	ldrb	r3, [r7, #13]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f040 8170 	bne.w	800ad7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa9e:	7b7a      	ldrb	r2, [r7, #13]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aaa6:	7b7a      	ldrb	r2, [r7, #13]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	32ae      	adds	r2, #174	; 0xae
 800aaac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8163 	beq.w	800ad7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aab8:	7b7a      	ldrb	r2, [r7, #13]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	32ae      	adds	r2, #174	; 0xae
 800aabe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aace:	e156      	b.n	800ad7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b03      	cmp	r3, #3
 800aad6:	d008      	beq.n	800aaea <USBD_StdEPReq+0x9a>
 800aad8:	2b03      	cmp	r3, #3
 800aada:	f300 8145 	bgt.w	800ad68 <USBD_StdEPReq+0x318>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 809b 	beq.w	800ac1a <USBD_StdEPReq+0x1ca>
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d03c      	beq.n	800ab62 <USBD_StdEPReq+0x112>
 800aae8:	e13e      	b.n	800ad68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d002      	beq.n	800aafc <USBD_StdEPReq+0xac>
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d016      	beq.n	800ab28 <USBD_StdEPReq+0xd8>
 800aafa:	e02c      	b.n	800ab56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00d      	beq.n	800ab1e <USBD_StdEPReq+0xce>
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	2b80      	cmp	r3, #128	; 0x80
 800ab06:	d00a      	beq.n	800ab1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 f96f 	bl	800bdf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab12:	2180      	movs	r1, #128	; 0x80
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f001 f96b 	bl	800bdf0 <USBD_LL_StallEP>
 800ab1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab1c:	e020      	b.n	800ab60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fc7a 	bl	800b41a <USBD_CtlError>
              break;
 800ab26:	e01b      	b.n	800ab60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	885b      	ldrh	r3, [r3, #2]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10e      	bne.n	800ab4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00b      	beq.n	800ab4e <USBD_StdEPReq+0xfe>
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	2b80      	cmp	r3, #128	; 0x80
 800ab3a:	d008      	beq.n	800ab4e <USBD_StdEPReq+0xfe>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	88db      	ldrh	r3, [r3, #6]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d104      	bne.n	800ab4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 f951 	bl	800bdf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fd2e 	bl	800b5b0 <USBD_CtlSendStatus>

              break;
 800ab54:	e004      	b.n	800ab60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fc5e 	bl	800b41a <USBD_CtlError>
              break;
 800ab5e:	bf00      	nop
          }
          break;
 800ab60:	e107      	b.n	800ad72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d002      	beq.n	800ab74 <USBD_StdEPReq+0x124>
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d016      	beq.n	800aba0 <USBD_StdEPReq+0x150>
 800ab72:	e04b      	b.n	800ac0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00d      	beq.n	800ab96 <USBD_StdEPReq+0x146>
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	2b80      	cmp	r3, #128	; 0x80
 800ab7e:	d00a      	beq.n	800ab96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f001 f933 	bl	800bdf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab8a:	2180      	movs	r1, #128	; 0x80
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 f92f 	bl	800bdf0 <USBD_LL_StallEP>
 800ab92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab94:	e040      	b.n	800ac18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fc3e 	bl	800b41a <USBD_CtlError>
              break;
 800ab9e:	e03b      	b.n	800ac18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	885b      	ldrh	r3, [r3, #2]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d136      	bne.n	800ac16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f001 f939 	bl	800be2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fcf7 	bl	800b5b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff fde2 	bl	800a790 <USBD_CoreFindEP>
 800abcc:	4603      	mov	r3, r0
 800abce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abd0:	7b7b      	ldrb	r3, [r7, #13]
 800abd2:	2bff      	cmp	r3, #255	; 0xff
 800abd4:	d01f      	beq.n	800ac16 <USBD_StdEPReq+0x1c6>
 800abd6:	7b7b      	ldrb	r3, [r7, #13]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d11c      	bne.n	800ac16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800abdc:	7b7a      	ldrb	r2, [r7, #13]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800abe4:	7b7a      	ldrb	r2, [r7, #13]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	32ae      	adds	r2, #174	; 0xae
 800abea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d010      	beq.n	800ac16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abf4:	7b7a      	ldrb	r2, [r7, #13]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	32ae      	adds	r2, #174	; 0xae
 800abfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac0a:	e004      	b.n	800ac16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fc03 	bl	800b41a <USBD_CtlError>
              break;
 800ac14:	e000      	b.n	800ac18 <USBD_StdEPReq+0x1c8>
              break;
 800ac16:	bf00      	nop
          }
          break;
 800ac18:	e0ab      	b.n	800ad72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d002      	beq.n	800ac2c <USBD_StdEPReq+0x1dc>
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d032      	beq.n	800ac90 <USBD_StdEPReq+0x240>
 800ac2a:	e097      	b.n	800ad5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d007      	beq.n	800ac42 <USBD_StdEPReq+0x1f2>
 800ac32:	7bbb      	ldrb	r3, [r7, #14]
 800ac34:	2b80      	cmp	r3, #128	; 0x80
 800ac36:	d004      	beq.n	800ac42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fbed 	bl	800b41a <USBD_CtlError>
                break;
 800ac40:	e091      	b.n	800ad66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	da0b      	bge.n	800ac62 <USBD_StdEPReq+0x212>
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac50:	4613      	mov	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	3310      	adds	r3, #16
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	3304      	adds	r3, #4
 800ac60:	e00b      	b.n	800ac7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	4413      	add	r3, r2
 800ac78:	3304      	adds	r3, #4
 800ac7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2202      	movs	r2, #2
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fc37 	bl	800b4fc <USBD_CtlSendData>
              break;
 800ac8e:	e06a      	b.n	800ad66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	da11      	bge.n	800acbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
 800ac9a:	f003 020f 	and.w	r2, r3, #15
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	3324      	adds	r3, #36	; 0x24
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d117      	bne.n	800ace2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fbb0 	bl	800b41a <USBD_CtlError>
                  break;
 800acba:	e054      	b.n	800ad66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
 800acbe:	f003 020f 	and.w	r2, r3, #15
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d104      	bne.n	800ace2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fb9d 	bl	800b41a <USBD_CtlError>
                  break;
 800ace0:	e041      	b.n	800ad66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ace2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da0b      	bge.n	800ad02 <USBD_StdEPReq+0x2b2>
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	3310      	adds	r3, #16
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	4413      	add	r3, r2
 800acfe:	3304      	adds	r3, #4
 800ad00:	e00b      	b.n	800ad1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	4413      	add	r3, r2
 800ad18:	3304      	adds	r3, #4
 800ad1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <USBD_StdEPReq+0x2d8>
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	2b80      	cmp	r3, #128	; 0x80
 800ad26:	d103      	bne.n	800ad30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	e00e      	b.n	800ad4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 f899 	bl	800be6c <USBD_LL_IsStallEP>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2201      	movs	r2, #1
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	e002      	b.n	800ad4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2202      	movs	r2, #2
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fbd1 	bl	800b4fc <USBD_CtlSendData>
              break;
 800ad5a:	e004      	b.n	800ad66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fb5b 	bl	800b41a <USBD_CtlError>
              break;
 800ad64:	bf00      	nop
          }
          break;
 800ad66:	e004      	b.n	800ad72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fb55 	bl	800b41a <USBD_CtlError>
          break;
 800ad70:	bf00      	nop
      }
      break;
 800ad72:	e005      	b.n	800ad80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fb4f 	bl	800b41a <USBD_CtlError>
      break;
 800ad7c:	e000      	b.n	800ad80 <USBD_StdEPReq+0x330>
      break;
 800ad7e:	bf00      	nop
  }

  return ret;
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	885b      	ldrh	r3, [r3, #2]
 800ada6:	0a1b      	lsrs	r3, r3, #8
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	3b01      	subs	r3, #1
 800adac:	2b06      	cmp	r3, #6
 800adae:	f200 8128 	bhi.w	800b002 <USBD_GetDescriptor+0x276>
 800adb2:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <USBD_GetDescriptor+0x2c>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800add5 	.word	0x0800add5
 800adbc:	0800aded 	.word	0x0800aded
 800adc0:	0800ae2d 	.word	0x0800ae2d
 800adc4:	0800b003 	.word	0x0800b003
 800adc8:	0800b003 	.word	0x0800b003
 800adcc:	0800afa3 	.word	0x0800afa3
 800add0:	0800afcf 	.word	0x0800afcf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	7c12      	ldrb	r2, [r2, #16]
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	4610      	mov	r0, r2
 800ade6:	4798      	blx	r3
 800ade8:	60f8      	str	r0, [r7, #12]
      break;
 800adea:	e112      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	7c1b      	ldrb	r3, [r3, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10d      	bne.n	800ae10 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfc:	f107 0208 	add.w	r2, r7, #8
 800ae00:	4610      	mov	r0, r2
 800ae02:	4798      	blx	r3
 800ae04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae0e:	e100      	b.n	800b012 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	f107 0208 	add.w	r2, r7, #8
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4798      	blx	r3
 800ae20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3301      	adds	r3, #1
 800ae26:	2202      	movs	r2, #2
 800ae28:	701a      	strb	r2, [r3, #0]
      break;
 800ae2a:	e0f2      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	885b      	ldrh	r3, [r3, #2]
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b05      	cmp	r3, #5
 800ae34:	f200 80ac 	bhi.w	800af90 <USBD_GetDescriptor+0x204>
 800ae38:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <USBD_GetDescriptor+0xb4>)
 800ae3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3e:	bf00      	nop
 800ae40:	0800ae59 	.word	0x0800ae59
 800ae44:	0800ae8d 	.word	0x0800ae8d
 800ae48:	0800aec1 	.word	0x0800aec1
 800ae4c:	0800aef5 	.word	0x0800aef5
 800ae50:	0800af29 	.word	0x0800af29
 800ae54:	0800af5d 	.word	0x0800af5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	7c12      	ldrb	r2, [r2, #16]
 800ae70:	f107 0108 	add.w	r1, r7, #8
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3
 800ae78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7a:	e091      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 facb 	bl	800b41a <USBD_CtlError>
            err++;
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	3301      	adds	r3, #1
 800ae88:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8a:	e089      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	7c12      	ldrb	r2, [r2, #16]
 800aea4:	f107 0108 	add.w	r1, r7, #8
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeae:	e077      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fab1 	bl	800b41a <USBD_CtlError>
            err++;
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	3301      	adds	r3, #1
 800aebc:	72fb      	strb	r3, [r7, #11]
          break;
 800aebe:	e06f      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	7c12      	ldrb	r2, [r2, #16]
 800aed8:	f107 0108 	add.w	r1, r7, #8
 800aedc:	4610      	mov	r0, r2
 800aede:	4798      	blx	r3
 800aee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aee2:	e05d      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa97 	bl	800b41a <USBD_CtlError>
            err++;
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	3301      	adds	r3, #1
 800aef0:	72fb      	strb	r3, [r7, #11]
          break;
 800aef2:	e055      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	7c12      	ldrb	r2, [r2, #16]
 800af0c:	f107 0108 	add.w	r1, r7, #8
 800af10:	4610      	mov	r0, r2
 800af12:	4798      	blx	r3
 800af14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af16:	e043      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa7d 	bl	800b41a <USBD_CtlError>
            err++;
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	3301      	adds	r3, #1
 800af24:	72fb      	strb	r3, [r7, #11]
          break;
 800af26:	e03b      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00b      	beq.n	800af4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	7c12      	ldrb	r2, [r2, #16]
 800af40:	f107 0108 	add.w	r1, r7, #8
 800af44:	4610      	mov	r0, r2
 800af46:	4798      	blx	r3
 800af48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af4a:	e029      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa63 	bl	800b41a <USBD_CtlError>
            err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
          break;
 800af5a:	e021      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	7c12      	ldrb	r2, [r2, #16]
 800af74:	f107 0108 	add.w	r1, r7, #8
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
 800af7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7e:	e00f      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fa49 	bl	800b41a <USBD_CtlError>
            err++;
 800af88:	7afb      	ldrb	r3, [r7, #11]
 800af8a:	3301      	adds	r3, #1
 800af8c:	72fb      	strb	r3, [r7, #11]
          break;
 800af8e:	e007      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fa41 	bl	800b41a <USBD_CtlError>
          err++;
 800af98:	7afb      	ldrb	r3, [r7, #11]
 800af9a:	3301      	adds	r3, #1
 800af9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af9e:	bf00      	nop
      }
      break;
 800afa0:	e037      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7c1b      	ldrb	r3, [r3, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d109      	bne.n	800afbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb2:	f107 0208 	add.w	r2, r7, #8
 800afb6:	4610      	mov	r0, r2
 800afb8:	4798      	blx	r3
 800afba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afbc:	e029      	b.n	800b012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa2a 	bl	800b41a <USBD_CtlError>
        err++;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	3301      	adds	r3, #1
 800afca:	72fb      	strb	r3, [r7, #11]
      break;
 800afcc:	e021      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	7c1b      	ldrb	r3, [r3, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10d      	bne.n	800aff2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afde:	f107 0208 	add.w	r2, r7, #8
 800afe2:	4610      	mov	r0, r2
 800afe4:	4798      	blx	r3
 800afe6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3301      	adds	r3, #1
 800afec:	2207      	movs	r2, #7
 800afee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aff0:	e00f      	b.n	800b012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fa10 	bl	800b41a <USBD_CtlError>
        err++;
 800affa:	7afb      	ldrb	r3, [r7, #11]
 800affc:	3301      	adds	r3, #1
 800affe:	72fb      	strb	r3, [r7, #11]
      break;
 800b000:	e007      	b.n	800b012 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fa08 	bl	800b41a <USBD_CtlError>
      err++;
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	3301      	adds	r3, #1
 800b00e:	72fb      	strb	r3, [r7, #11]
      break;
 800b010:	bf00      	nop
  }

  if (err != 0U)
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d11e      	bne.n	800b056 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	88db      	ldrh	r3, [r3, #6]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d016      	beq.n	800b04e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b020:	893b      	ldrh	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00e      	beq.n	800b044 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88da      	ldrh	r2, [r3, #6]
 800b02a:	893b      	ldrh	r3, [r7, #8]
 800b02c:	4293      	cmp	r3, r2
 800b02e:	bf28      	it	cs
 800b030:	4613      	movcs	r3, r2
 800b032:	b29b      	uxth	r3, r3
 800b034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b036:	893b      	ldrh	r3, [r7, #8]
 800b038:	461a      	mov	r2, r3
 800b03a:	68f9      	ldr	r1, [r7, #12]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fa5d 	bl	800b4fc <USBD_CtlSendData>
 800b042:	e009      	b.n	800b058 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f9e7 	bl	800b41a <USBD_CtlError>
 800b04c:	e004      	b.n	800b058 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 faae 	bl	800b5b0 <USBD_CtlSendStatus>
 800b054:	e000      	b.n	800b058 <USBD_GetDescriptor+0x2cc>
    return;
 800b056:	bf00      	nop
  }
}
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop

0800b060 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	889b      	ldrh	r3, [r3, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d131      	bne.n	800b0d6 <USBD_SetAddress+0x76>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	88db      	ldrh	r3, [r3, #6]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d12d      	bne.n	800b0d6 <USBD_SetAddress+0x76>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	885b      	ldrh	r3, [r3, #2]
 800b07e:	2b7f      	cmp	r3, #127	; 0x7f
 800b080:	d829      	bhi.n	800b0d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	885b      	ldrh	r3, [r3, #2]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b03      	cmp	r3, #3
 800b098:	d104      	bne.n	800b0a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f9bc 	bl	800b41a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a2:	e01d      	b.n	800b0e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	7bfa      	ldrb	r2, [r7, #15]
 800b0a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 ff07 	bl	800bec4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fa7a 	bl	800b5b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d004      	beq.n	800b0cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ca:	e009      	b.n	800b0e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d4:	e004      	b.n	800b0e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f99e 	bl	800b41a <USBD_CtlError>
  }
}
 800b0de:	bf00      	nop
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	885b      	ldrh	r3, [r3, #2]
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	4b4e      	ldr	r3, [pc, #312]	; (800b238 <USBD_SetConfig+0x150>)
 800b0fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b100:	4b4d      	ldr	r3, [pc, #308]	; (800b238 <USBD_SetConfig+0x150>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d905      	bls.n	800b114 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f985 	bl	800b41a <USBD_CtlError>
    return USBD_FAIL;
 800b110:	2303      	movs	r3, #3
 800b112:	e08c      	b.n	800b22e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d002      	beq.n	800b126 <USBD_SetConfig+0x3e>
 800b120:	2b03      	cmp	r3, #3
 800b122:	d029      	beq.n	800b178 <USBD_SetConfig+0x90>
 800b124:	e075      	b.n	800b212 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b126:	4b44      	ldr	r3, [pc, #272]	; (800b238 <USBD_SetConfig+0x150>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d020      	beq.n	800b170 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b12e:	4b42      	ldr	r3, [pc, #264]	; (800b238 <USBD_SetConfig+0x150>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b138:	4b3f      	ldr	r3, [pc, #252]	; (800b238 <USBD_SetConfig+0x150>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7fe ffe7 	bl	800a112 <USBD_SetClassConfig>
 800b144:	4603      	mov	r3, r0
 800b146:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d008      	beq.n	800b160 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f962 	bl	800b41a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2202      	movs	r2, #2
 800b15a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b15e:	e065      	b.n	800b22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fa25 	bl	800b5b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2203      	movs	r2, #3
 800b16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b16e:	e05d      	b.n	800b22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fa1d 	bl	800b5b0 <USBD_CtlSendStatus>
      break;
 800b176:	e059      	b.n	800b22c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b178:	4b2f      	ldr	r3, [pc, #188]	; (800b238 <USBD_SetConfig+0x150>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d112      	bne.n	800b1a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b188:	4b2b      	ldr	r3, [pc, #172]	; (800b238 <USBD_SetConfig+0x150>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	461a      	mov	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b192:	4b29      	ldr	r3, [pc, #164]	; (800b238 <USBD_SetConfig+0x150>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7fe ffd6 	bl	800a14a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa06 	bl	800b5b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1a4:	e042      	b.n	800b22c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b1a6:	4b24      	ldr	r3, [pc, #144]	; (800b238 <USBD_SetConfig+0x150>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d02a      	beq.n	800b20a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7fe ffc4 	bl	800a14a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1c2:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <USBD_SetConfig+0x150>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <USBD_SetConfig+0x150>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7fe ff9d 	bl	800a112 <USBD_SetClassConfig>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00f      	beq.n	800b202 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f918 	bl	800b41a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7fe ffa9 	bl	800a14a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b200:	e014      	b.n	800b22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f9d4 	bl	800b5b0 <USBD_CtlSendStatus>
      break;
 800b208:	e010      	b.n	800b22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f9d0 	bl	800b5b0 <USBD_CtlSendStatus>
      break;
 800b210:	e00c      	b.n	800b22c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f900 	bl	800b41a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <USBD_SetConfig+0x150>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7fe ff92 	bl	800a14a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b226:	2303      	movs	r3, #3
 800b228:	73fb      	strb	r3, [r7, #15]
      break;
 800b22a:	bf00      	nop
  }

  return ret;
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200006e8 	.word	0x200006e8

0800b23c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	88db      	ldrh	r3, [r3, #6]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d004      	beq.n	800b258 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f8e2 	bl	800b41a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b256:	e023      	b.n	800b2a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	dc02      	bgt.n	800b26a <USBD_GetConfig+0x2e>
 800b264:	2b00      	cmp	r3, #0
 800b266:	dc03      	bgt.n	800b270 <USBD_GetConfig+0x34>
 800b268:	e015      	b.n	800b296 <USBD_GetConfig+0x5a>
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d00b      	beq.n	800b286 <USBD_GetConfig+0x4a>
 800b26e:	e012      	b.n	800b296 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3308      	adds	r3, #8
 800b27a:	2201      	movs	r2, #1
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f93c 	bl	800b4fc <USBD_CtlSendData>
        break;
 800b284:	e00c      	b.n	800b2a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3304      	adds	r3, #4
 800b28a:	2201      	movs	r2, #1
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f934 	bl	800b4fc <USBD_CtlSendData>
        break;
 800b294:	e004      	b.n	800b2a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f8be 	bl	800b41a <USBD_CtlError>
        break;
 800b29e:	bf00      	nop
}
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d81e      	bhi.n	800b2fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	88db      	ldrh	r3, [r3, #6]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d004      	beq.n	800b2d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f8a5 	bl	800b41a <USBD_CtlError>
        break;
 800b2d0:	e01a      	b.n	800b308 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	f043 0202 	orr.w	r2, r3, #2
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	330c      	adds	r3, #12
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f900 	bl	800b4fc <USBD_CtlSendData>
      break;
 800b2fc:	e004      	b.n	800b308 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f88a 	bl	800b41a <USBD_CtlError>
      break;
 800b306:	bf00      	nop
  }
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	885b      	ldrh	r3, [r3, #2]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d107      	bne.n	800b332 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f940 	bl	800b5b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b330:	e013      	b.n	800b35a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	885b      	ldrh	r3, [r3, #2]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d10b      	bne.n	800b352 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	889b      	ldrh	r3, [r3, #4]
 800b33e:	0a1b      	lsrs	r3, r3, #8
 800b340:	b29b      	uxth	r3, r3
 800b342:	b2da      	uxtb	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f930 	bl	800b5b0 <USBD_CtlSendStatus>
}
 800b350:	e003      	b.n	800b35a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f860 	bl	800b41a <USBD_CtlError>
}
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b372:	b2db      	uxtb	r3, r3
 800b374:	3b01      	subs	r3, #1
 800b376:	2b02      	cmp	r3, #2
 800b378:	d80b      	bhi.n	800b392 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	885b      	ldrh	r3, [r3, #2]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d10c      	bne.n	800b39c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f910 	bl	800b5b0 <USBD_CtlSendStatus>
      }
      break;
 800b390:	e004      	b.n	800b39c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f840 	bl	800b41a <USBD_CtlError>
      break;
 800b39a:	e000      	b.n	800b39e <USBD_ClrFeature+0x3c>
      break;
 800b39c:	bf00      	nop
  }
}
 800b39e:	bf00      	nop
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	781a      	ldrb	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff fa41 	bl	800a858 <SWAPBYTE>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	461a      	mov	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f7ff fa34 	bl	800a858 <SWAPBYTE>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3301      	adds	r3, #1
 800b402:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7ff fa27 	bl	800a858 <SWAPBYTE>
 800b40a:	4603      	mov	r3, r0
 800b40c:	461a      	mov	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	80da      	strh	r2, [r3, #6]
}
 800b412:	bf00      	nop
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b424:	2180      	movs	r1, #128	; 0x80
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fce2 	bl	800bdf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fcde 	bl	800bdf0 <USBD_LL_StallEP>
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b448:	2300      	movs	r3, #0
 800b44a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d036      	beq.n	800b4c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b456:	6938      	ldr	r0, [r7, #16]
 800b458:	f000 f836 	bl	800b4c8 <USBD_GetLen>
 800b45c:	4603      	mov	r3, r0
 800b45e:	3301      	adds	r3, #1
 800b460:	b29b      	uxth	r3, r3
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	b29a      	uxth	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	4413      	add	r3, r2
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	7812      	ldrb	r2, [r2, #0]
 800b474:	701a      	strb	r2, [r3, #0]
  idx++;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	3301      	adds	r3, #1
 800b47a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4413      	add	r3, r2
 800b482:	2203      	movs	r2, #3
 800b484:	701a      	strb	r2, [r3, #0]
  idx++;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	3301      	adds	r3, #1
 800b48a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b48c:	e013      	b.n	800b4b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	4413      	add	r3, r2
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	7812      	ldrb	r2, [r2, #0]
 800b498:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	3301      	adds	r3, #1
 800b49e:	613b      	str	r3, [r7, #16]
    idx++;
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1e7      	bne.n	800b48e <USBD_GetString+0x52>
 800b4be:	e000      	b.n	800b4c2 <USBD_GetString+0x86>
    return;
 800b4c0:	bf00      	nop
  }
}
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4d8:	e005      	b.n	800b4e6 <USBD_GetLen+0x1e>
  {
    len++;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1f5      	bne.n	800b4da <USBD_GetLen+0x12>
  }

  return len;
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2202      	movs	r2, #2
 800b50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	2100      	movs	r1, #0
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 fced 	bl	800bf02 <USBD_LL_Transmit>

  return USBD_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	2100      	movs	r1, #0
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 fcdc 	bl	800bf02 <USBD_LL_Transmit>

  return USBD_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2203      	movs	r2, #3
 800b564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	2100      	movs	r1, #0
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 fce0 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	2100      	movs	r1, #0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 fccf 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2204      	movs	r2, #4
 800b5bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fc9b 	bl	800bf02 <USBD_LL_Transmit>

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2205      	movs	r2, #5
 800b5e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fca9 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b600:	2201      	movs	r2, #1
 800b602:	4912      	ldr	r1, [pc, #72]	; (800b64c <MX_USB_DEVICE_Init+0x50>)
 800b604:	4812      	ldr	r0, [pc, #72]	; (800b650 <MX_USB_DEVICE_Init+0x54>)
 800b606:	f7fe fd07 	bl	800a018 <USBD_Init>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b610:	f7f5 fdea 	bl	80011e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b614:	490f      	ldr	r1, [pc, #60]	; (800b654 <MX_USB_DEVICE_Init+0x58>)
 800b616:	480e      	ldr	r0, [pc, #56]	; (800b650 <MX_USB_DEVICE_Init+0x54>)
 800b618:	f7fe fd2e 	bl	800a078 <USBD_RegisterClass>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b622:	f7f5 fde1 	bl	80011e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b626:	490c      	ldr	r1, [pc, #48]	; (800b658 <MX_USB_DEVICE_Init+0x5c>)
 800b628:	4809      	ldr	r0, [pc, #36]	; (800b650 <MX_USB_DEVICE_Init+0x54>)
 800b62a:	f7fe fc1f 	bl	8009e6c <USBD_CDC_RegisterInterface>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b634:	f7f5 fdd8 	bl	80011e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800b638:	4805      	ldr	r0, [pc, #20]	; (800b650 <MX_USB_DEVICE_Init+0x54>)
 800b63a:	f7fe fd53 	bl	800a0e4 <USBD_Start>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b644:	f7f5 fdd0 	bl	80011e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b648:	bf00      	nop
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20000130 	.word	0x20000130
 800b650:	200006ec 	.word	0x200006ec
 800b654:	2000009c 	.word	0x2000009c
 800b658:	2000011c 	.word	0x2000011c

0800b65c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800b660:	2200      	movs	r2, #0
 800b662:	4905      	ldr	r1, [pc, #20]	; (800b678 <CDC_Init_HS+0x1c>)
 800b664:	4805      	ldr	r0, [pc, #20]	; (800b67c <CDC_Init_HS+0x20>)
 800b666:	f7fe fc1b 	bl	8009ea0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800b66a:	4905      	ldr	r1, [pc, #20]	; (800b680 <CDC_Init_HS+0x24>)
 800b66c:	4803      	ldr	r0, [pc, #12]	; (800b67c <CDC_Init_HS+0x20>)
 800b66e:	f7fe fc39 	bl	8009ee4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b672:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b674:	4618      	mov	r0, r3
 800b676:	bd80      	pop	{r7, pc}
 800b678:	200011c8 	.word	0x200011c8
 800b67c:	200006ec 	.word	0x200006ec
 800b680:	200009c8 	.word	0x200009c8

0800b684 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800b688:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b23      	cmp	r3, #35	; 0x23
 800b6a8:	d84a      	bhi.n	800b740 <CDC_Control_HS+0xac>
 800b6aa:	a201      	add	r2, pc, #4	; (adr r2, 800b6b0 <CDC_Control_HS+0x1c>)
 800b6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b0:	0800b741 	.word	0x0800b741
 800b6b4:	0800b741 	.word	0x0800b741
 800b6b8:	0800b741 	.word	0x0800b741
 800b6bc:	0800b741 	.word	0x0800b741
 800b6c0:	0800b741 	.word	0x0800b741
 800b6c4:	0800b741 	.word	0x0800b741
 800b6c8:	0800b741 	.word	0x0800b741
 800b6cc:	0800b741 	.word	0x0800b741
 800b6d0:	0800b741 	.word	0x0800b741
 800b6d4:	0800b741 	.word	0x0800b741
 800b6d8:	0800b741 	.word	0x0800b741
 800b6dc:	0800b741 	.word	0x0800b741
 800b6e0:	0800b741 	.word	0x0800b741
 800b6e4:	0800b741 	.word	0x0800b741
 800b6e8:	0800b741 	.word	0x0800b741
 800b6ec:	0800b741 	.word	0x0800b741
 800b6f0:	0800b741 	.word	0x0800b741
 800b6f4:	0800b741 	.word	0x0800b741
 800b6f8:	0800b741 	.word	0x0800b741
 800b6fc:	0800b741 	.word	0x0800b741
 800b700:	0800b741 	.word	0x0800b741
 800b704:	0800b741 	.word	0x0800b741
 800b708:	0800b741 	.word	0x0800b741
 800b70c:	0800b741 	.word	0x0800b741
 800b710:	0800b741 	.word	0x0800b741
 800b714:	0800b741 	.word	0x0800b741
 800b718:	0800b741 	.word	0x0800b741
 800b71c:	0800b741 	.word	0x0800b741
 800b720:	0800b741 	.word	0x0800b741
 800b724:	0800b741 	.word	0x0800b741
 800b728:	0800b741 	.word	0x0800b741
 800b72c:	0800b741 	.word	0x0800b741
 800b730:	0800b741 	.word	0x0800b741
 800b734:	0800b741 	.word	0x0800b741
 800b738:	0800b741 	.word	0x0800b741
 800b73c:	0800b741 	.word	0x0800b741
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b740:	bf00      	nop
  }

  return (USBD_OK);
 800b742:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800b744:	4618      	mov	r0, r3
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	4805      	ldr	r0, [pc, #20]	; (800b774 <CDC_Receive_HS+0x24>)
 800b75e:	f7fe fbc1 	bl	8009ee4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800b762:	4804      	ldr	r0, [pc, #16]	; (800b774 <CDC_Receive_HS+0x24>)
 800b764:	f7fe fc22 	bl	8009fac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b768:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	200006ec 	.word	0x200006ec

0800b778 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800b788:	4b0d      	ldr	r3, [pc, #52]	; (800b7c0 <CDC_Transmit_HS+0x48>)
 800b78a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b78e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e00b      	b.n	800b7b6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800b79e:	887b      	ldrh	r3, [r7, #2]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6879      	ldr	r1, [r7, #4]
 800b7a4:	4806      	ldr	r0, [pc, #24]	; (800b7c0 <CDC_Transmit_HS+0x48>)
 800b7a6:	f7fe fb7b 	bl	8009ea0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800b7aa:	4805      	ldr	r0, [pc, #20]	; (800b7c0 <CDC_Transmit_HS+0x48>)
 800b7ac:	f7fe fbb8 	bl	8009f20 <USBD_CDC_TransmitPacket>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	200006ec 	.word	0x200006ec

0800b7c4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800b7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
	...

0800b7e8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	6039      	str	r1, [r7, #0]
 800b7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2212      	movs	r2, #18
 800b7f8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800b7fa:	4b03      	ldr	r3, [pc, #12]	; (800b808 <USBD_HS_DeviceDescriptor+0x20>)
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	2000014c 	.word	0x2000014c

0800b80c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	6039      	str	r1, [r7, #0]
 800b816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2204      	movs	r2, #4
 800b81c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b81e:	4b03      	ldr	r3, [pc, #12]	; (800b82c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	20000160 	.word	0x20000160

0800b830 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	4603      	mov	r3, r0
 800b838:	6039      	str	r1, [r7, #0]
 800b83a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d105      	bne.n	800b84e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	4907      	ldr	r1, [pc, #28]	; (800b864 <USBD_HS_ProductStrDescriptor+0x34>)
 800b846:	4808      	ldr	r0, [pc, #32]	; (800b868 <USBD_HS_ProductStrDescriptor+0x38>)
 800b848:	f7ff fdf8 	bl	800b43c <USBD_GetString>
 800b84c:	e004      	b.n	800b858 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	4904      	ldr	r1, [pc, #16]	; (800b864 <USBD_HS_ProductStrDescriptor+0x34>)
 800b852:	4805      	ldr	r0, [pc, #20]	; (800b868 <USBD_HS_ProductStrDescriptor+0x38>)
 800b854:	f7ff fdf2 	bl	800b43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b858:	4b02      	ldr	r3, [pc, #8]	; (800b864 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	200019c8 	.word	0x200019c8
 800b868:	0800eec0 	.word	0x0800eec0

0800b86c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	6039      	str	r1, [r7, #0]
 800b876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b878:	683a      	ldr	r2, [r7, #0]
 800b87a:	4904      	ldr	r1, [pc, #16]	; (800b88c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800b87c:	4804      	ldr	r0, [pc, #16]	; (800b890 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800b87e:	f7ff fddd 	bl	800b43c <USBD_GetString>
  return USBD_StrDesc;
 800b882:	4b02      	ldr	r3, [pc, #8]	; (800b88c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	200019c8 	.word	0x200019c8
 800b890:	0800eed8 	.word	0x0800eed8

0800b894 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	6039      	str	r1, [r7, #0]
 800b89e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	221a      	movs	r2, #26
 800b8a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b8a6:	f000 f843 	bl	800b930 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b8aa:	4b02      	ldr	r3, [pc, #8]	; (800b8b4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	20000164 	.word	0x20000164

0800b8b8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	6039      	str	r1, [r7, #0]
 800b8c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d105      	bne.n	800b8d6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	4907      	ldr	r1, [pc, #28]	; (800b8ec <USBD_HS_ConfigStrDescriptor+0x34>)
 800b8ce:	4808      	ldr	r0, [pc, #32]	; (800b8f0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800b8d0:	f7ff fdb4 	bl	800b43c <USBD_GetString>
 800b8d4:	e004      	b.n	800b8e0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	4904      	ldr	r1, [pc, #16]	; (800b8ec <USBD_HS_ConfigStrDescriptor+0x34>)
 800b8da:	4805      	ldr	r0, [pc, #20]	; (800b8f0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800b8dc:	f7ff fdae 	bl	800b43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8e0:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	200019c8 	.word	0x200019c8
 800b8f0:	0800eeec 	.word	0x0800eeec

0800b8f4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	6039      	str	r1, [r7, #0]
 800b8fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b900:	79fb      	ldrb	r3, [r7, #7]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d105      	bne.n	800b912 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	4907      	ldr	r1, [pc, #28]	; (800b928 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b90a:	4808      	ldr	r0, [pc, #32]	; (800b92c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b90c:	f7ff fd96 	bl	800b43c <USBD_GetString>
 800b910:	e004      	b.n	800b91c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	4904      	ldr	r1, [pc, #16]	; (800b928 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b916:	4805      	ldr	r0, [pc, #20]	; (800b92c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b918:	f7ff fd90 	bl	800b43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b91c:	4b02      	ldr	r3, [pc, #8]	; (800b928 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	200019c8 	.word	0x200019c8
 800b92c:	0800eef8 	.word	0x0800eef8

0800b930 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b936:	4b0f      	ldr	r3, [pc, #60]	; (800b974 <Get_SerialNum+0x44>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b93c:	4b0e      	ldr	r3, [pc, #56]	; (800b978 <Get_SerialNum+0x48>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b942:	4b0e      	ldr	r3, [pc, #56]	; (800b97c <Get_SerialNum+0x4c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4413      	add	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d009      	beq.n	800b96a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b956:	2208      	movs	r2, #8
 800b958:	4909      	ldr	r1, [pc, #36]	; (800b980 <Get_SerialNum+0x50>)
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 f814 	bl	800b988 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b960:	2204      	movs	r2, #4
 800b962:	4908      	ldr	r1, [pc, #32]	; (800b984 <Get_SerialNum+0x54>)
 800b964:	68b8      	ldr	r0, [r7, #8]
 800b966:	f000 f80f 	bl	800b988 <IntToUnicode>
  }
}
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	1fff7a10 	.word	0x1fff7a10
 800b978:	1fff7a14 	.word	0x1fff7a14
 800b97c:	1fff7a18 	.word	0x1fff7a18
 800b980:	20000166 	.word	0x20000166
 800b984:	20000176 	.word	0x20000176

0800b988 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b988:	b480      	push	{r7}
 800b98a:	b087      	sub	sp, #28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	4613      	mov	r3, r2
 800b994:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b99a:	2300      	movs	r3, #0
 800b99c:	75fb      	strb	r3, [r7, #23]
 800b99e:	e027      	b.n	800b9f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	0f1b      	lsrs	r3, r3, #28
 800b9a4:	2b09      	cmp	r3, #9
 800b9a6:	d80b      	bhi.n	800b9c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	0f1b      	lsrs	r3, r3, #28
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	440b      	add	r3, r1
 800b9b8:	3230      	adds	r2, #48	; 0x30
 800b9ba:	b2d2      	uxtb	r2, r2
 800b9bc:	701a      	strb	r2, [r3, #0]
 800b9be:	e00a      	b.n	800b9d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	0f1b      	lsrs	r3, r3, #28
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	440b      	add	r3, r1
 800b9d0:	3237      	adds	r2, #55	; 0x37
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9ea:	7dfb      	ldrb	r3, [r7, #23]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	75fb      	strb	r3, [r7, #23]
 800b9f0:	7dfa      	ldrb	r2, [r7, #23]
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d3d3      	bcc.n	800b9a0 <IntToUnicode+0x18>
  }
}
 800b9f8:	bf00      	nop
 800b9fa:	bf00      	nop
 800b9fc:	371c      	adds	r7, #28
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
	...

0800ba08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08a      	sub	sp, #40	; 0x28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba10:	f107 0314 	add.w	r3, r7, #20
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	609a      	str	r2, [r3, #8]
 800ba1c:	60da      	str	r2, [r3, #12]
 800ba1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a1d      	ldr	r2, [pc, #116]	; (800ba9c <HAL_PCD_MspInit+0x94>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d134      	bne.n	800ba94 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	613b      	str	r3, [r7, #16]
 800ba2e:	4b1c      	ldr	r3, [pc, #112]	; (800baa0 <HAL_PCD_MspInit+0x98>)
 800ba30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba32:	4a1b      	ldr	r2, [pc, #108]	; (800baa0 <HAL_PCD_MspInit+0x98>)
 800ba34:	f043 0302 	orr.w	r3, r3, #2
 800ba38:	6313      	str	r3, [r2, #48]	; 0x30
 800ba3a:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <HAL_PCD_MspInit+0x98>)
 800ba3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3e:	f003 0302 	and.w	r3, r3, #2
 800ba42:	613b      	str	r3, [r7, #16]
 800ba44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ba46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ba4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba54:	2303      	movs	r3, #3
 800ba56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ba58:	230c      	movs	r3, #12
 800ba5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba5c:	f107 0314 	add.w	r3, r7, #20
 800ba60:	4619      	mov	r1, r3
 800ba62:	4810      	ldr	r0, [pc, #64]	; (800baa4 <HAL_PCD_MspInit+0x9c>)
 800ba64:	f7f8 fa06 	bl	8003e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <HAL_PCD_MspInit+0x98>)
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	4a0b      	ldr	r2, [pc, #44]	; (800baa0 <HAL_PCD_MspInit+0x98>)
 800ba72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba76:	6313      	str	r3, [r2, #48]	; 0x30
 800ba78:	4b09      	ldr	r3, [pc, #36]	; (800baa0 <HAL_PCD_MspInit+0x98>)
 800ba7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ba84:	2200      	movs	r2, #0
 800ba86:	2100      	movs	r1, #0
 800ba88:	204d      	movs	r0, #77	; 0x4d
 800ba8a:	f7f7 fd68 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ba8e:	204d      	movs	r0, #77	; 0x4d
 800ba90:	f7f7 fd81 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ba94:	bf00      	nop
 800ba96:	3728      	adds	r7, #40	; 0x28
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	40040000 	.word	0x40040000
 800baa0:	40023800 	.word	0x40023800
 800baa4:	40020400 	.word	0x40020400

0800baa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	f7fe fb5d 	bl	800a17e <USBD_LL_SetupStage>
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bade:	78fa      	ldrb	r2, [r7, #3]
 800bae0:	6879      	ldr	r1, [r7, #4]
 800bae2:	4613      	mov	r3, r2
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	440b      	add	r3, r1
 800baec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	78fb      	ldrb	r3, [r7, #3]
 800baf4:	4619      	mov	r1, r3
 800baf6:	f7fe fb97 	bl	800a228 <USBD_LL_DataOutStage>
}
 800bafa:	bf00      	nop
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bb14:	78fa      	ldrb	r2, [r7, #3]
 800bb16:	6879      	ldr	r1, [r7, #4]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	00db      	lsls	r3, r3, #3
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	440b      	add	r3, r1
 800bb22:	334c      	adds	r3, #76	; 0x4c
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	f7fe fc30 	bl	800a38e <USBD_LL_DataInStage>
}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fd64 	bl	800a612 <USBD_LL_SOF>
}
 800bb4a:	bf00      	nop
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b084      	sub	sp, #16
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d102      	bne.n	800bb6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
 800bb6a:	e008      	b.n	800bb7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d102      	bne.n	800bb7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bb74:	2301      	movs	r3, #1
 800bb76:	73fb      	strb	r3, [r7, #15]
 800bb78:	e001      	b.n	800bb7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bb7a:	f7f5 fb35 	bl	80011e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb84:	7bfa      	ldrb	r2, [r7, #15]
 800bb86:	4611      	mov	r1, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe fd04 	bl	800a596 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe fcac 	bl	800a4f2 <USBD_LL_Reset>
}
 800bb9a:	bf00      	nop
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
	...

0800bba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe fcff 	bl	800a5b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6812      	ldr	r2, [r2, #0]
 800bbc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbca:	f043 0301 	orr.w	r3, r3, #1
 800bbce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d005      	beq.n	800bbe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbd8:	4b04      	ldr	r3, [pc, #16]	; (800bbec <HAL_PCD_SuspendCallback+0x48>)
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	4a03      	ldr	r2, [pc, #12]	; (800bbec <HAL_PCD_SuspendCallback+0x48>)
 800bbde:	f043 0306 	orr.w	r3, r3, #6
 800bbe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bbe4:	bf00      	nop
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	e000ed00 	.word	0xe000ed00

0800bbf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fcef 	bl	800a5e2 <USBD_LL_Resume>
}
 800bc04:	bf00      	nop
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	4611      	mov	r1, r2
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fe fd47 	bl	800a6b6 <USBD_LL_IsoOUTIncomplete>
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc42:	78fa      	ldrb	r2, [r7, #3]
 800bc44:	4611      	mov	r1, r2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fd03 	bl	800a652 <USBD_LL_IsoINIncomplete>
}
 800bc4c:	bf00      	nop
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fd59 	bl	800a71a <USBD_LL_DevConnected>
}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe fd56 	bl	800a730 <USBD_LL_DevDisconnected>
}
 800bc84:	bf00      	nop
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d140      	bne.n	800bd1e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800bc9c:	4a22      	ldr	r2, [pc, #136]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a20      	ldr	r2, [pc, #128]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bca8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bcac:	4b1e      	ldr	r3, [pc, #120]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcae:	4a1f      	ldr	r2, [pc, #124]	; (800bd2c <USBD_LL_Init+0xa0>)
 800bcb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800bcb2:	4b1d      	ldr	r3, [pc, #116]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcb4:	2206      	movs	r2, #6
 800bcb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800bcb8:	4b1b      	ldr	r3, [pc, #108]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcba:	2202      	movs	r2, #2
 800bcbc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bcbe:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800bcc4:	4b18      	ldr	r3, [pc, #96]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bcca:	4b17      	ldr	r3, [pc, #92]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bcd0:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800bcd6:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bcdc:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800bce2:	4b11      	ldr	r3, [pc, #68]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bce8:	4b0f      	ldr	r3, [pc, #60]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800bcee:	480e      	ldr	r0, [pc, #56]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bcf0:	f7f8 fd5f 	bl	80047b2 <HAL_PCD_Init>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800bcfa:	f7f5 fa75 	bl	80011e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800bcfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd02:	4809      	ldr	r0, [pc, #36]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bd04:	f7f9 ffb5 	bl	8005c72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800bd08:	2280      	movs	r2, #128	; 0x80
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4806      	ldr	r0, [pc, #24]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bd0e:	f7f9 ff69 	bl	8005be4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800bd12:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800bd16:	2101      	movs	r1, #1
 800bd18:	4803      	ldr	r0, [pc, #12]	; (800bd28 <USBD_LL_Init+0x9c>)
 800bd1a:	f7f9 ff63 	bl	8005be4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	20001bc8 	.word	0x20001bc8
 800bd2c:	40040000 	.word	0x40040000

0800bd30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7f8 fe50 	bl	80049ec <HAL_PCD_Start>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 f942 	bl	800bfdc <USBD_Get_USB_Status>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	4608      	mov	r0, r1
 800bd70:	4611      	mov	r1, r2
 800bd72:	461a      	mov	r2, r3
 800bd74:	4603      	mov	r3, r0
 800bd76:	70fb      	strb	r3, [r7, #3]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70bb      	strb	r3, [r7, #2]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd8e:	78bb      	ldrb	r3, [r7, #2]
 800bd90:	883a      	ldrh	r2, [r7, #0]
 800bd92:	78f9      	ldrb	r1, [r7, #3]
 800bd94:	f7f9 fb21 	bl	80053da <HAL_PCD_EP_Open>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f91c 	bl	800bfdc <USBD_Get_USB_Status>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7f9 fb6a 	bl	80054aa <HAL_PCD_EP_Close>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 f8fd 	bl	800bfdc <USBD_Get_USB_Status>
 800bde2:	4603      	mov	r3, r0
 800bde4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be0a:	78fa      	ldrb	r2, [r7, #3]
 800be0c:	4611      	mov	r1, r2
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f9 fc42 	bl	8005698 <HAL_PCD_EP_SetStall>
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 f8de 	bl	800bfdc <USBD_Get_USB_Status>
 800be20:	4603      	mov	r3, r0
 800be22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be24:	7bbb      	ldrb	r3, [r7, #14]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	4611      	mov	r1, r2
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7f9 fc87 	bl	8005760 <HAL_PCD_EP_ClrStall>
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be56:	7bfb      	ldrb	r3, [r7, #15]
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 f8bf 	bl	800bfdc <USBD_Get_USB_Status>
 800be5e:	4603      	mov	r3, r0
 800be60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be62:	7bbb      	ldrb	r3, [r7, #14]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be84:	2b00      	cmp	r3, #0
 800be86:	da0b      	bge.n	800bea0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be88:	78fb      	ldrb	r3, [r7, #3]
 800be8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	4613      	mov	r3, r2
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	4413      	add	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	440b      	add	r3, r1
 800be9a:	333e      	adds	r3, #62	; 0x3e
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	e00b      	b.n	800beb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea6:	68f9      	ldr	r1, [r7, #12]
 800bea8:	4613      	mov	r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	4413      	add	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	440b      	add	r3, r1
 800beb2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800beb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bede:	78fa      	ldrb	r2, [r7, #3]
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7f9 fa54 	bl	8005390 <HAL_PCD_SetAddress>
 800bee8:	4603      	mov	r3, r0
 800beea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 f874 	bl	800bfdc <USBD_Get_USB_Status>
 800bef4:	4603      	mov	r3, r0
 800bef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b086      	sub	sp, #24
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	607a      	str	r2, [r7, #4]
 800bf0c:	603b      	str	r3, [r7, #0]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf20:	7af9      	ldrb	r1, [r7, #11]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	f7f9 fb6d 	bl	8005604 <HAL_PCD_EP_Transmit>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f853 	bl	800bfdc <USBD_Get_USB_Status>
 800bf36:	4603      	mov	r3, r0
 800bf38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	460b      	mov	r3, r1
 800bf52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf62:	7af9      	ldrb	r1, [r7, #11]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	f7f9 fae9 	bl	800553e <HAL_PCD_EP_Receive>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 f832 	bl	800bfdc <USBD_Get_USB_Status>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf98:	78fa      	ldrb	r2, [r7, #3]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7f9 fb19 	bl	80055d4 <HAL_PCD_EP_GetRxCount>
 800bfa2:	4603      	mov	r3, r0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfb4:	4b03      	ldr	r3, [pc, #12]	; (800bfc4 <USBD_static_malloc+0x18>)
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	200020d4 	.word	0x200020d4

0800bfc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]

}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d817      	bhi.n	800c020 <USBD_Get_USB_Status+0x44>
 800bff0:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <USBD_Get_USB_Status+0x1c>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c009 	.word	0x0800c009
 800bffc:	0800c00f 	.word	0x0800c00f
 800c000:	0800c015 	.word	0x0800c015
 800c004:	0800c01b 	.word	0x0800c01b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
    break;
 800c00c:	e00b      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c00e:	2303      	movs	r3, #3
 800c010:	73fb      	strb	r3, [r7, #15]
    break;
 800c012:	e008      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c014:	2301      	movs	r3, #1
 800c016:	73fb      	strb	r3, [r7, #15]
    break;
 800c018:	e005      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c01a:	2303      	movs	r3, #3
 800c01c:	73fb      	strb	r3, [r7, #15]
    break;
 800c01e:	e002      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	73fb      	strb	r3, [r7, #15]
    break;
 800c024:	bf00      	nop
  }
  return usb_status;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <__errno>:
 800c034:	4b01      	ldr	r3, [pc, #4]	; (800c03c <__errno+0x8>)
 800c036:	6818      	ldr	r0, [r3, #0]
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	20000180 	.word	0x20000180

0800c040 <__libc_init_array>:
 800c040:	b570      	push	{r4, r5, r6, lr}
 800c042:	4d0d      	ldr	r5, [pc, #52]	; (800c078 <__libc_init_array+0x38>)
 800c044:	4c0d      	ldr	r4, [pc, #52]	; (800c07c <__libc_init_array+0x3c>)
 800c046:	1b64      	subs	r4, r4, r5
 800c048:	10a4      	asrs	r4, r4, #2
 800c04a:	2600      	movs	r6, #0
 800c04c:	42a6      	cmp	r6, r4
 800c04e:	d109      	bne.n	800c064 <__libc_init_array+0x24>
 800c050:	4d0b      	ldr	r5, [pc, #44]	; (800c080 <__libc_init_array+0x40>)
 800c052:	4c0c      	ldr	r4, [pc, #48]	; (800c084 <__libc_init_array+0x44>)
 800c054:	f002 ff04 	bl	800ee60 <_init>
 800c058:	1b64      	subs	r4, r4, r5
 800c05a:	10a4      	asrs	r4, r4, #2
 800c05c:	2600      	movs	r6, #0
 800c05e:	42a6      	cmp	r6, r4
 800c060:	d105      	bne.n	800c06e <__libc_init_array+0x2e>
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	f855 3b04 	ldr.w	r3, [r5], #4
 800c068:	4798      	blx	r3
 800c06a:	3601      	adds	r6, #1
 800c06c:	e7ee      	b.n	800c04c <__libc_init_array+0xc>
 800c06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c072:	4798      	blx	r3
 800c074:	3601      	adds	r6, #1
 800c076:	e7f2      	b.n	800c05e <__libc_init_array+0x1e>
 800c078:	08011c94 	.word	0x08011c94
 800c07c:	08011c94 	.word	0x08011c94
 800c080:	08011c94 	.word	0x08011c94
 800c084:	08011c98 	.word	0x08011c98

0800c088 <memset>:
 800c088:	4402      	add	r2, r0
 800c08a:	4603      	mov	r3, r0
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d100      	bne.n	800c092 <memset+0xa>
 800c090:	4770      	bx	lr
 800c092:	f803 1b01 	strb.w	r1, [r3], #1
 800c096:	e7f9      	b.n	800c08c <memset+0x4>

0800c098 <__cvt>:
 800c098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c09c:	ec55 4b10 	vmov	r4, r5, d0
 800c0a0:	2d00      	cmp	r5, #0
 800c0a2:	460e      	mov	r6, r1
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	462b      	mov	r3, r5
 800c0a8:	bfbb      	ittet	lt
 800c0aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c0ae:	461d      	movlt	r5, r3
 800c0b0:	2300      	movge	r3, #0
 800c0b2:	232d      	movlt	r3, #45	; 0x2d
 800c0b4:	700b      	strb	r3, [r1, #0]
 800c0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0bc:	4691      	mov	r9, r2
 800c0be:	f023 0820 	bic.w	r8, r3, #32
 800c0c2:	bfbc      	itt	lt
 800c0c4:	4622      	movlt	r2, r4
 800c0c6:	4614      	movlt	r4, r2
 800c0c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0cc:	d005      	beq.n	800c0da <__cvt+0x42>
 800c0ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0d2:	d100      	bne.n	800c0d6 <__cvt+0x3e>
 800c0d4:	3601      	adds	r6, #1
 800c0d6:	2102      	movs	r1, #2
 800c0d8:	e000      	b.n	800c0dc <__cvt+0x44>
 800c0da:	2103      	movs	r1, #3
 800c0dc:	ab03      	add	r3, sp, #12
 800c0de:	9301      	str	r3, [sp, #4]
 800c0e0:	ab02      	add	r3, sp, #8
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	ec45 4b10 	vmov	d0, r4, r5
 800c0e8:	4653      	mov	r3, sl
 800c0ea:	4632      	mov	r2, r6
 800c0ec:	f000 fcec 	bl	800cac8 <_dtoa_r>
 800c0f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0f4:	4607      	mov	r7, r0
 800c0f6:	d102      	bne.n	800c0fe <__cvt+0x66>
 800c0f8:	f019 0f01 	tst.w	r9, #1
 800c0fc:	d022      	beq.n	800c144 <__cvt+0xac>
 800c0fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c102:	eb07 0906 	add.w	r9, r7, r6
 800c106:	d110      	bne.n	800c12a <__cvt+0x92>
 800c108:	783b      	ldrb	r3, [r7, #0]
 800c10a:	2b30      	cmp	r3, #48	; 0x30
 800c10c:	d10a      	bne.n	800c124 <__cvt+0x8c>
 800c10e:	2200      	movs	r2, #0
 800c110:	2300      	movs	r3, #0
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	f7f4 fce7 	bl	8000ae8 <__aeabi_dcmpeq>
 800c11a:	b918      	cbnz	r0, 800c124 <__cvt+0x8c>
 800c11c:	f1c6 0601 	rsb	r6, r6, #1
 800c120:	f8ca 6000 	str.w	r6, [sl]
 800c124:	f8da 3000 	ldr.w	r3, [sl]
 800c128:	4499      	add	r9, r3
 800c12a:	2200      	movs	r2, #0
 800c12c:	2300      	movs	r3, #0
 800c12e:	4620      	mov	r0, r4
 800c130:	4629      	mov	r1, r5
 800c132:	f7f4 fcd9 	bl	8000ae8 <__aeabi_dcmpeq>
 800c136:	b108      	cbz	r0, 800c13c <__cvt+0xa4>
 800c138:	f8cd 900c 	str.w	r9, [sp, #12]
 800c13c:	2230      	movs	r2, #48	; 0x30
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	454b      	cmp	r3, r9
 800c142:	d307      	bcc.n	800c154 <__cvt+0xbc>
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c148:	1bdb      	subs	r3, r3, r7
 800c14a:	4638      	mov	r0, r7
 800c14c:	6013      	str	r3, [r2, #0]
 800c14e:	b004      	add	sp, #16
 800c150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c154:	1c59      	adds	r1, r3, #1
 800c156:	9103      	str	r1, [sp, #12]
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	e7f0      	b.n	800c13e <__cvt+0xa6>

0800c15c <__exponent>:
 800c15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c15e:	4603      	mov	r3, r0
 800c160:	2900      	cmp	r1, #0
 800c162:	bfb8      	it	lt
 800c164:	4249      	neglt	r1, r1
 800c166:	f803 2b02 	strb.w	r2, [r3], #2
 800c16a:	bfb4      	ite	lt
 800c16c:	222d      	movlt	r2, #45	; 0x2d
 800c16e:	222b      	movge	r2, #43	; 0x2b
 800c170:	2909      	cmp	r1, #9
 800c172:	7042      	strb	r2, [r0, #1]
 800c174:	dd2a      	ble.n	800c1cc <__exponent+0x70>
 800c176:	f10d 0407 	add.w	r4, sp, #7
 800c17a:	46a4      	mov	ip, r4
 800c17c:	270a      	movs	r7, #10
 800c17e:	46a6      	mov	lr, r4
 800c180:	460a      	mov	r2, r1
 800c182:	fb91 f6f7 	sdiv	r6, r1, r7
 800c186:	fb07 1516 	mls	r5, r7, r6, r1
 800c18a:	3530      	adds	r5, #48	; 0x30
 800c18c:	2a63      	cmp	r2, #99	; 0x63
 800c18e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c192:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c196:	4631      	mov	r1, r6
 800c198:	dcf1      	bgt.n	800c17e <__exponent+0x22>
 800c19a:	3130      	adds	r1, #48	; 0x30
 800c19c:	f1ae 0502 	sub.w	r5, lr, #2
 800c1a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c1a4:	1c44      	adds	r4, r0, #1
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4561      	cmp	r1, ip
 800c1aa:	d30a      	bcc.n	800c1c2 <__exponent+0x66>
 800c1ac:	f10d 0209 	add.w	r2, sp, #9
 800c1b0:	eba2 020e 	sub.w	r2, r2, lr
 800c1b4:	4565      	cmp	r5, ip
 800c1b6:	bf88      	it	hi
 800c1b8:	2200      	movhi	r2, #0
 800c1ba:	4413      	add	r3, r2
 800c1bc:	1a18      	subs	r0, r3, r0
 800c1be:	b003      	add	sp, #12
 800c1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1ca:	e7ed      	b.n	800c1a8 <__exponent+0x4c>
 800c1cc:	2330      	movs	r3, #48	; 0x30
 800c1ce:	3130      	adds	r1, #48	; 0x30
 800c1d0:	7083      	strb	r3, [r0, #2]
 800c1d2:	70c1      	strb	r1, [r0, #3]
 800c1d4:	1d03      	adds	r3, r0, #4
 800c1d6:	e7f1      	b.n	800c1bc <__exponent+0x60>

0800c1d8 <_printf_float>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	ed2d 8b02 	vpush	{d8}
 800c1e0:	b08d      	sub	sp, #52	; 0x34
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1e8:	4616      	mov	r6, r2
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	f001 fa59 	bl	800d6a4 <_localeconv_r>
 800c1f2:	f8d0 a000 	ldr.w	sl, [r0]
 800c1f6:	4650      	mov	r0, sl
 800c1f8:	f7f3 fffa 	bl	80001f0 <strlen>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	9305      	str	r3, [sp, #20]
 800c204:	f8d8 3000 	ldr.w	r3, [r8]
 800c208:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c20c:	3307      	adds	r3, #7
 800c20e:	f023 0307 	bic.w	r3, r3, #7
 800c212:	f103 0208 	add.w	r2, r3, #8
 800c216:	f8c8 2000 	str.w	r2, [r8]
 800c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c222:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c226:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c22a:	9307      	str	r3, [sp, #28]
 800c22c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c230:	ee08 0a10 	vmov	s16, r0
 800c234:	4b9f      	ldr	r3, [pc, #636]	; (800c4b4 <_printf_float+0x2dc>)
 800c236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c23a:	f04f 32ff 	mov.w	r2, #4294967295
 800c23e:	f7f4 fc85 	bl	8000b4c <__aeabi_dcmpun>
 800c242:	bb88      	cbnz	r0, 800c2a8 <_printf_float+0xd0>
 800c244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c248:	4b9a      	ldr	r3, [pc, #616]	; (800c4b4 <_printf_float+0x2dc>)
 800c24a:	f04f 32ff 	mov.w	r2, #4294967295
 800c24e:	f7f4 fc5f 	bl	8000b10 <__aeabi_dcmple>
 800c252:	bb48      	cbnz	r0, 800c2a8 <_printf_float+0xd0>
 800c254:	2200      	movs	r2, #0
 800c256:	2300      	movs	r3, #0
 800c258:	4640      	mov	r0, r8
 800c25a:	4649      	mov	r1, r9
 800c25c:	f7f4 fc4e 	bl	8000afc <__aeabi_dcmplt>
 800c260:	b110      	cbz	r0, 800c268 <_printf_float+0x90>
 800c262:	232d      	movs	r3, #45	; 0x2d
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c268:	4b93      	ldr	r3, [pc, #588]	; (800c4b8 <_printf_float+0x2e0>)
 800c26a:	4894      	ldr	r0, [pc, #592]	; (800c4bc <_printf_float+0x2e4>)
 800c26c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c270:	bf94      	ite	ls
 800c272:	4698      	movls	r8, r3
 800c274:	4680      	movhi	r8, r0
 800c276:	2303      	movs	r3, #3
 800c278:	6123      	str	r3, [r4, #16]
 800c27a:	9b05      	ldr	r3, [sp, #20]
 800c27c:	f023 0204 	bic.w	r2, r3, #4
 800c280:	6022      	str	r2, [r4, #0]
 800c282:	f04f 0900 	mov.w	r9, #0
 800c286:	9700      	str	r7, [sp, #0]
 800c288:	4633      	mov	r3, r6
 800c28a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c28c:	4621      	mov	r1, r4
 800c28e:	4628      	mov	r0, r5
 800c290:	f000 f9d8 	bl	800c644 <_printf_common>
 800c294:	3001      	adds	r0, #1
 800c296:	f040 8090 	bne.w	800c3ba <_printf_float+0x1e2>
 800c29a:	f04f 30ff 	mov.w	r0, #4294967295
 800c29e:	b00d      	add	sp, #52	; 0x34
 800c2a0:	ecbd 8b02 	vpop	{d8}
 800c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	4649      	mov	r1, r9
 800c2b0:	f7f4 fc4c 	bl	8000b4c <__aeabi_dcmpun>
 800c2b4:	b140      	cbz	r0, 800c2c8 <_printf_float+0xf0>
 800c2b6:	464b      	mov	r3, r9
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfbc      	itt	lt
 800c2bc:	232d      	movlt	r3, #45	; 0x2d
 800c2be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2c2:	487f      	ldr	r0, [pc, #508]	; (800c4c0 <_printf_float+0x2e8>)
 800c2c4:	4b7f      	ldr	r3, [pc, #508]	; (800c4c4 <_printf_float+0x2ec>)
 800c2c6:	e7d1      	b.n	800c26c <_printf_float+0x94>
 800c2c8:	6863      	ldr	r3, [r4, #4]
 800c2ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2ce:	9206      	str	r2, [sp, #24]
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	d13f      	bne.n	800c354 <_printf_float+0x17c>
 800c2d4:	2306      	movs	r3, #6
 800c2d6:	6063      	str	r3, [r4, #4]
 800c2d8:	9b05      	ldr	r3, [sp, #20]
 800c2da:	6861      	ldr	r1, [r4, #4]
 800c2dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9303      	str	r3, [sp, #12]
 800c2e4:	ab0a      	add	r3, sp, #40	; 0x28
 800c2e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2ea:	ab09      	add	r3, sp, #36	; 0x24
 800c2ec:	ec49 8b10 	vmov	d0, r8, r9
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	6022      	str	r2, [r4, #0]
 800c2f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	f7ff fecd 	bl	800c098 <__cvt>
 800c2fe:	9b06      	ldr	r3, [sp, #24]
 800c300:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c302:	2b47      	cmp	r3, #71	; 0x47
 800c304:	4680      	mov	r8, r0
 800c306:	d108      	bne.n	800c31a <_printf_float+0x142>
 800c308:	1cc8      	adds	r0, r1, #3
 800c30a:	db02      	blt.n	800c312 <_printf_float+0x13a>
 800c30c:	6863      	ldr	r3, [r4, #4]
 800c30e:	4299      	cmp	r1, r3
 800c310:	dd41      	ble.n	800c396 <_printf_float+0x1be>
 800c312:	f1ab 0b02 	sub.w	fp, fp, #2
 800c316:	fa5f fb8b 	uxtb.w	fp, fp
 800c31a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c31e:	d820      	bhi.n	800c362 <_printf_float+0x18a>
 800c320:	3901      	subs	r1, #1
 800c322:	465a      	mov	r2, fp
 800c324:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c328:	9109      	str	r1, [sp, #36]	; 0x24
 800c32a:	f7ff ff17 	bl	800c15c <__exponent>
 800c32e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c330:	1813      	adds	r3, r2, r0
 800c332:	2a01      	cmp	r2, #1
 800c334:	4681      	mov	r9, r0
 800c336:	6123      	str	r3, [r4, #16]
 800c338:	dc02      	bgt.n	800c340 <_printf_float+0x168>
 800c33a:	6822      	ldr	r2, [r4, #0]
 800c33c:	07d2      	lsls	r2, r2, #31
 800c33e:	d501      	bpl.n	800c344 <_printf_float+0x16c>
 800c340:	3301      	adds	r3, #1
 800c342:	6123      	str	r3, [r4, #16]
 800c344:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d09c      	beq.n	800c286 <_printf_float+0xae>
 800c34c:	232d      	movs	r3, #45	; 0x2d
 800c34e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c352:	e798      	b.n	800c286 <_printf_float+0xae>
 800c354:	9a06      	ldr	r2, [sp, #24]
 800c356:	2a47      	cmp	r2, #71	; 0x47
 800c358:	d1be      	bne.n	800c2d8 <_printf_float+0x100>
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1bc      	bne.n	800c2d8 <_printf_float+0x100>
 800c35e:	2301      	movs	r3, #1
 800c360:	e7b9      	b.n	800c2d6 <_printf_float+0xfe>
 800c362:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c366:	d118      	bne.n	800c39a <_printf_float+0x1c2>
 800c368:	2900      	cmp	r1, #0
 800c36a:	6863      	ldr	r3, [r4, #4]
 800c36c:	dd0b      	ble.n	800c386 <_printf_float+0x1ae>
 800c36e:	6121      	str	r1, [r4, #16]
 800c370:	b913      	cbnz	r3, 800c378 <_printf_float+0x1a0>
 800c372:	6822      	ldr	r2, [r4, #0]
 800c374:	07d0      	lsls	r0, r2, #31
 800c376:	d502      	bpl.n	800c37e <_printf_float+0x1a6>
 800c378:	3301      	adds	r3, #1
 800c37a:	440b      	add	r3, r1
 800c37c:	6123      	str	r3, [r4, #16]
 800c37e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c380:	f04f 0900 	mov.w	r9, #0
 800c384:	e7de      	b.n	800c344 <_printf_float+0x16c>
 800c386:	b913      	cbnz	r3, 800c38e <_printf_float+0x1b6>
 800c388:	6822      	ldr	r2, [r4, #0]
 800c38a:	07d2      	lsls	r2, r2, #31
 800c38c:	d501      	bpl.n	800c392 <_printf_float+0x1ba>
 800c38e:	3302      	adds	r3, #2
 800c390:	e7f4      	b.n	800c37c <_printf_float+0x1a4>
 800c392:	2301      	movs	r3, #1
 800c394:	e7f2      	b.n	800c37c <_printf_float+0x1a4>
 800c396:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c39c:	4299      	cmp	r1, r3
 800c39e:	db05      	blt.n	800c3ac <_printf_float+0x1d4>
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	6121      	str	r1, [r4, #16]
 800c3a4:	07d8      	lsls	r0, r3, #31
 800c3a6:	d5ea      	bpl.n	800c37e <_printf_float+0x1a6>
 800c3a8:	1c4b      	adds	r3, r1, #1
 800c3aa:	e7e7      	b.n	800c37c <_printf_float+0x1a4>
 800c3ac:	2900      	cmp	r1, #0
 800c3ae:	bfd4      	ite	le
 800c3b0:	f1c1 0202 	rsble	r2, r1, #2
 800c3b4:	2201      	movgt	r2, #1
 800c3b6:	4413      	add	r3, r2
 800c3b8:	e7e0      	b.n	800c37c <_printf_float+0x1a4>
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	055a      	lsls	r2, r3, #21
 800c3be:	d407      	bmi.n	800c3d0 <_printf_float+0x1f8>
 800c3c0:	6923      	ldr	r3, [r4, #16]
 800c3c2:	4642      	mov	r2, r8
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	47b8      	blx	r7
 800c3ca:	3001      	adds	r0, #1
 800c3cc:	d12c      	bne.n	800c428 <_printf_float+0x250>
 800c3ce:	e764      	b.n	800c29a <_printf_float+0xc2>
 800c3d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3d4:	f240 80e0 	bls.w	800c598 <_printf_float+0x3c0>
 800c3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f7f4 fb82 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d034      	beq.n	800c452 <_printf_float+0x27a>
 800c3e8:	4a37      	ldr	r2, [pc, #220]	; (800c4c8 <_printf_float+0x2f0>)
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	47b8      	blx	r7
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	f43f af51 	beq.w	800c29a <_printf_float+0xc2>
 800c3f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	db02      	blt.n	800c406 <_printf_float+0x22e>
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	07d8      	lsls	r0, r3, #31
 800c404:	d510      	bpl.n	800c428 <_printf_float+0x250>
 800c406:	ee18 3a10 	vmov	r3, s16
 800c40a:	4652      	mov	r2, sl
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	f43f af41 	beq.w	800c29a <_printf_float+0xc2>
 800c418:	f04f 0800 	mov.w	r8, #0
 800c41c:	f104 091a 	add.w	r9, r4, #26
 800c420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c422:	3b01      	subs	r3, #1
 800c424:	4543      	cmp	r3, r8
 800c426:	dc09      	bgt.n	800c43c <_printf_float+0x264>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	079b      	lsls	r3, r3, #30
 800c42c:	f100 8105 	bmi.w	800c63a <_printf_float+0x462>
 800c430:	68e0      	ldr	r0, [r4, #12]
 800c432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c434:	4298      	cmp	r0, r3
 800c436:	bfb8      	it	lt
 800c438:	4618      	movlt	r0, r3
 800c43a:	e730      	b.n	800c29e <_printf_float+0xc6>
 800c43c:	2301      	movs	r3, #1
 800c43e:	464a      	mov	r2, r9
 800c440:	4631      	mov	r1, r6
 800c442:	4628      	mov	r0, r5
 800c444:	47b8      	blx	r7
 800c446:	3001      	adds	r0, #1
 800c448:	f43f af27 	beq.w	800c29a <_printf_float+0xc2>
 800c44c:	f108 0801 	add.w	r8, r8, #1
 800c450:	e7e6      	b.n	800c420 <_printf_float+0x248>
 800c452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc39      	bgt.n	800c4cc <_printf_float+0x2f4>
 800c458:	4a1b      	ldr	r2, [pc, #108]	; (800c4c8 <_printf_float+0x2f0>)
 800c45a:	2301      	movs	r3, #1
 800c45c:	4631      	mov	r1, r6
 800c45e:	4628      	mov	r0, r5
 800c460:	47b8      	blx	r7
 800c462:	3001      	adds	r0, #1
 800c464:	f43f af19 	beq.w	800c29a <_printf_float+0xc2>
 800c468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c46c:	4313      	orrs	r3, r2
 800c46e:	d102      	bne.n	800c476 <_printf_float+0x29e>
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	07d9      	lsls	r1, r3, #31
 800c474:	d5d8      	bpl.n	800c428 <_printf_float+0x250>
 800c476:	ee18 3a10 	vmov	r3, s16
 800c47a:	4652      	mov	r2, sl
 800c47c:	4631      	mov	r1, r6
 800c47e:	4628      	mov	r0, r5
 800c480:	47b8      	blx	r7
 800c482:	3001      	adds	r0, #1
 800c484:	f43f af09 	beq.w	800c29a <_printf_float+0xc2>
 800c488:	f04f 0900 	mov.w	r9, #0
 800c48c:	f104 0a1a 	add.w	sl, r4, #26
 800c490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c492:	425b      	negs	r3, r3
 800c494:	454b      	cmp	r3, r9
 800c496:	dc01      	bgt.n	800c49c <_printf_float+0x2c4>
 800c498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c49a:	e792      	b.n	800c3c2 <_printf_float+0x1ea>
 800c49c:	2301      	movs	r3, #1
 800c49e:	4652      	mov	r2, sl
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	47b8      	blx	r7
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f43f aef7 	beq.w	800c29a <_printf_float+0xc2>
 800c4ac:	f109 0901 	add.w	r9, r9, #1
 800c4b0:	e7ee      	b.n	800c490 <_printf_float+0x2b8>
 800c4b2:	bf00      	nop
 800c4b4:	7fefffff 	.word	0x7fefffff
 800c4b8:	080118b4 	.word	0x080118b4
 800c4bc:	080118b8 	.word	0x080118b8
 800c4c0:	080118c0 	.word	0x080118c0
 800c4c4:	080118bc 	.word	0x080118bc
 800c4c8:	080118c4 	.word	0x080118c4
 800c4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	bfa8      	it	ge
 800c4d4:	461a      	movge	r2, r3
 800c4d6:	2a00      	cmp	r2, #0
 800c4d8:	4691      	mov	r9, r2
 800c4da:	dc37      	bgt.n	800c54c <_printf_float+0x374>
 800c4dc:	f04f 0b00 	mov.w	fp, #0
 800c4e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4e4:	f104 021a 	add.w	r2, r4, #26
 800c4e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4ea:	9305      	str	r3, [sp, #20]
 800c4ec:	eba3 0309 	sub.w	r3, r3, r9
 800c4f0:	455b      	cmp	r3, fp
 800c4f2:	dc33      	bgt.n	800c55c <_printf_float+0x384>
 800c4f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	db3b      	blt.n	800c574 <_printf_float+0x39c>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	07da      	lsls	r2, r3, #31
 800c500:	d438      	bmi.n	800c574 <_printf_float+0x39c>
 800c502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c504:	9a05      	ldr	r2, [sp, #20]
 800c506:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c508:	1a9a      	subs	r2, r3, r2
 800c50a:	eba3 0901 	sub.w	r9, r3, r1
 800c50e:	4591      	cmp	r9, r2
 800c510:	bfa8      	it	ge
 800c512:	4691      	movge	r9, r2
 800c514:	f1b9 0f00 	cmp.w	r9, #0
 800c518:	dc35      	bgt.n	800c586 <_printf_float+0x3ae>
 800c51a:	f04f 0800 	mov.w	r8, #0
 800c51e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c522:	f104 0a1a 	add.w	sl, r4, #26
 800c526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c52a:	1a9b      	subs	r3, r3, r2
 800c52c:	eba3 0309 	sub.w	r3, r3, r9
 800c530:	4543      	cmp	r3, r8
 800c532:	f77f af79 	ble.w	800c428 <_printf_float+0x250>
 800c536:	2301      	movs	r3, #1
 800c538:	4652      	mov	r2, sl
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b8      	blx	r7
 800c540:	3001      	adds	r0, #1
 800c542:	f43f aeaa 	beq.w	800c29a <_printf_float+0xc2>
 800c546:	f108 0801 	add.w	r8, r8, #1
 800c54a:	e7ec      	b.n	800c526 <_printf_float+0x34e>
 800c54c:	4613      	mov	r3, r2
 800c54e:	4631      	mov	r1, r6
 800c550:	4642      	mov	r2, r8
 800c552:	4628      	mov	r0, r5
 800c554:	47b8      	blx	r7
 800c556:	3001      	adds	r0, #1
 800c558:	d1c0      	bne.n	800c4dc <_printf_float+0x304>
 800c55a:	e69e      	b.n	800c29a <_printf_float+0xc2>
 800c55c:	2301      	movs	r3, #1
 800c55e:	4631      	mov	r1, r6
 800c560:	4628      	mov	r0, r5
 800c562:	9205      	str	r2, [sp, #20]
 800c564:	47b8      	blx	r7
 800c566:	3001      	adds	r0, #1
 800c568:	f43f ae97 	beq.w	800c29a <_printf_float+0xc2>
 800c56c:	9a05      	ldr	r2, [sp, #20]
 800c56e:	f10b 0b01 	add.w	fp, fp, #1
 800c572:	e7b9      	b.n	800c4e8 <_printf_float+0x310>
 800c574:	ee18 3a10 	vmov	r3, s16
 800c578:	4652      	mov	r2, sl
 800c57a:	4631      	mov	r1, r6
 800c57c:	4628      	mov	r0, r5
 800c57e:	47b8      	blx	r7
 800c580:	3001      	adds	r0, #1
 800c582:	d1be      	bne.n	800c502 <_printf_float+0x32a>
 800c584:	e689      	b.n	800c29a <_printf_float+0xc2>
 800c586:	9a05      	ldr	r2, [sp, #20]
 800c588:	464b      	mov	r3, r9
 800c58a:	4442      	add	r2, r8
 800c58c:	4631      	mov	r1, r6
 800c58e:	4628      	mov	r0, r5
 800c590:	47b8      	blx	r7
 800c592:	3001      	adds	r0, #1
 800c594:	d1c1      	bne.n	800c51a <_printf_float+0x342>
 800c596:	e680      	b.n	800c29a <_printf_float+0xc2>
 800c598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c59a:	2a01      	cmp	r2, #1
 800c59c:	dc01      	bgt.n	800c5a2 <_printf_float+0x3ca>
 800c59e:	07db      	lsls	r3, r3, #31
 800c5a0:	d538      	bpl.n	800c614 <_printf_float+0x43c>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4642      	mov	r2, r8
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	47b8      	blx	r7
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f43f ae74 	beq.w	800c29a <_printf_float+0xc2>
 800c5b2:	ee18 3a10 	vmov	r3, s16
 800c5b6:	4652      	mov	r2, sl
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	47b8      	blx	r7
 800c5be:	3001      	adds	r0, #1
 800c5c0:	f43f ae6b 	beq.w	800c29a <_printf_float+0xc2>
 800c5c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f7f4 fa8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5d0:	b9d8      	cbnz	r0, 800c60a <_printf_float+0x432>
 800c5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d4:	f108 0201 	add.w	r2, r8, #1
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	4631      	mov	r1, r6
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	d10e      	bne.n	800c602 <_printf_float+0x42a>
 800c5e4:	e659      	b.n	800c29a <_printf_float+0xc2>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	4652      	mov	r2, sl
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	47b8      	blx	r7
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	f43f ae52 	beq.w	800c29a <_printf_float+0xc2>
 800c5f6:	f108 0801 	add.w	r8, r8, #1
 800c5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	4543      	cmp	r3, r8
 800c600:	dcf1      	bgt.n	800c5e6 <_printf_float+0x40e>
 800c602:	464b      	mov	r3, r9
 800c604:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c608:	e6dc      	b.n	800c3c4 <_printf_float+0x1ec>
 800c60a:	f04f 0800 	mov.w	r8, #0
 800c60e:	f104 0a1a 	add.w	sl, r4, #26
 800c612:	e7f2      	b.n	800c5fa <_printf_float+0x422>
 800c614:	2301      	movs	r3, #1
 800c616:	4642      	mov	r2, r8
 800c618:	e7df      	b.n	800c5da <_printf_float+0x402>
 800c61a:	2301      	movs	r3, #1
 800c61c:	464a      	mov	r2, r9
 800c61e:	4631      	mov	r1, r6
 800c620:	4628      	mov	r0, r5
 800c622:	47b8      	blx	r7
 800c624:	3001      	adds	r0, #1
 800c626:	f43f ae38 	beq.w	800c29a <_printf_float+0xc2>
 800c62a:	f108 0801 	add.w	r8, r8, #1
 800c62e:	68e3      	ldr	r3, [r4, #12]
 800c630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c632:	1a5b      	subs	r3, r3, r1
 800c634:	4543      	cmp	r3, r8
 800c636:	dcf0      	bgt.n	800c61a <_printf_float+0x442>
 800c638:	e6fa      	b.n	800c430 <_printf_float+0x258>
 800c63a:	f04f 0800 	mov.w	r8, #0
 800c63e:	f104 0919 	add.w	r9, r4, #25
 800c642:	e7f4      	b.n	800c62e <_printf_float+0x456>

0800c644 <_printf_common>:
 800c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c648:	4616      	mov	r6, r2
 800c64a:	4699      	mov	r9, r3
 800c64c:	688a      	ldr	r2, [r1, #8]
 800c64e:	690b      	ldr	r3, [r1, #16]
 800c650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c654:	4293      	cmp	r3, r2
 800c656:	bfb8      	it	lt
 800c658:	4613      	movlt	r3, r2
 800c65a:	6033      	str	r3, [r6, #0]
 800c65c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c660:	4607      	mov	r7, r0
 800c662:	460c      	mov	r4, r1
 800c664:	b10a      	cbz	r2, 800c66a <_printf_common+0x26>
 800c666:	3301      	adds	r3, #1
 800c668:	6033      	str	r3, [r6, #0]
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	0699      	lsls	r1, r3, #26
 800c66e:	bf42      	ittt	mi
 800c670:	6833      	ldrmi	r3, [r6, #0]
 800c672:	3302      	addmi	r3, #2
 800c674:	6033      	strmi	r3, [r6, #0]
 800c676:	6825      	ldr	r5, [r4, #0]
 800c678:	f015 0506 	ands.w	r5, r5, #6
 800c67c:	d106      	bne.n	800c68c <_printf_common+0x48>
 800c67e:	f104 0a19 	add.w	sl, r4, #25
 800c682:	68e3      	ldr	r3, [r4, #12]
 800c684:	6832      	ldr	r2, [r6, #0]
 800c686:	1a9b      	subs	r3, r3, r2
 800c688:	42ab      	cmp	r3, r5
 800c68a:	dc26      	bgt.n	800c6da <_printf_common+0x96>
 800c68c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c690:	1e13      	subs	r3, r2, #0
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	bf18      	it	ne
 800c696:	2301      	movne	r3, #1
 800c698:	0692      	lsls	r2, r2, #26
 800c69a:	d42b      	bmi.n	800c6f4 <_printf_common+0xb0>
 800c69c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	47c0      	blx	r8
 800c6a6:	3001      	adds	r0, #1
 800c6a8:	d01e      	beq.n	800c6e8 <_printf_common+0xa4>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	68e5      	ldr	r5, [r4, #12]
 800c6ae:	6832      	ldr	r2, [r6, #0]
 800c6b0:	f003 0306 	and.w	r3, r3, #6
 800c6b4:	2b04      	cmp	r3, #4
 800c6b6:	bf08      	it	eq
 800c6b8:	1aad      	subeq	r5, r5, r2
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	6922      	ldr	r2, [r4, #16]
 800c6be:	bf0c      	ite	eq
 800c6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6c4:	2500      	movne	r5, #0
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	bfc4      	itt	gt
 800c6ca:	1a9b      	subgt	r3, r3, r2
 800c6cc:	18ed      	addgt	r5, r5, r3
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	341a      	adds	r4, #26
 800c6d2:	42b5      	cmp	r5, r6
 800c6d4:	d11a      	bne.n	800c70c <_printf_common+0xc8>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	e008      	b.n	800c6ec <_printf_common+0xa8>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	4652      	mov	r2, sl
 800c6de:	4649      	mov	r1, r9
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	47c0      	blx	r8
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d103      	bne.n	800c6f0 <_printf_common+0xac>
 800c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f0:	3501      	adds	r5, #1
 800c6f2:	e7c6      	b.n	800c682 <_printf_common+0x3e>
 800c6f4:	18e1      	adds	r1, r4, r3
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	2030      	movs	r0, #48	; 0x30
 800c6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6fe:	4422      	add	r2, r4
 800c700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c708:	3302      	adds	r3, #2
 800c70a:	e7c7      	b.n	800c69c <_printf_common+0x58>
 800c70c:	2301      	movs	r3, #1
 800c70e:	4622      	mov	r2, r4
 800c710:	4649      	mov	r1, r9
 800c712:	4638      	mov	r0, r7
 800c714:	47c0      	blx	r8
 800c716:	3001      	adds	r0, #1
 800c718:	d0e6      	beq.n	800c6e8 <_printf_common+0xa4>
 800c71a:	3601      	adds	r6, #1
 800c71c:	e7d9      	b.n	800c6d2 <_printf_common+0x8e>
	...

0800c720 <_printf_i>:
 800c720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c724:	7e0f      	ldrb	r7, [r1, #24]
 800c726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c728:	2f78      	cmp	r7, #120	; 0x78
 800c72a:	4691      	mov	r9, r2
 800c72c:	4680      	mov	r8, r0
 800c72e:	460c      	mov	r4, r1
 800c730:	469a      	mov	sl, r3
 800c732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c736:	d807      	bhi.n	800c748 <_printf_i+0x28>
 800c738:	2f62      	cmp	r7, #98	; 0x62
 800c73a:	d80a      	bhi.n	800c752 <_printf_i+0x32>
 800c73c:	2f00      	cmp	r7, #0
 800c73e:	f000 80d8 	beq.w	800c8f2 <_printf_i+0x1d2>
 800c742:	2f58      	cmp	r7, #88	; 0x58
 800c744:	f000 80a3 	beq.w	800c88e <_printf_i+0x16e>
 800c748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c750:	e03a      	b.n	800c7c8 <_printf_i+0xa8>
 800c752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c756:	2b15      	cmp	r3, #21
 800c758:	d8f6      	bhi.n	800c748 <_printf_i+0x28>
 800c75a:	a101      	add	r1, pc, #4	; (adr r1, 800c760 <_printf_i+0x40>)
 800c75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c760:	0800c7b9 	.word	0x0800c7b9
 800c764:	0800c7cd 	.word	0x0800c7cd
 800c768:	0800c749 	.word	0x0800c749
 800c76c:	0800c749 	.word	0x0800c749
 800c770:	0800c749 	.word	0x0800c749
 800c774:	0800c749 	.word	0x0800c749
 800c778:	0800c7cd 	.word	0x0800c7cd
 800c77c:	0800c749 	.word	0x0800c749
 800c780:	0800c749 	.word	0x0800c749
 800c784:	0800c749 	.word	0x0800c749
 800c788:	0800c749 	.word	0x0800c749
 800c78c:	0800c8d9 	.word	0x0800c8d9
 800c790:	0800c7fd 	.word	0x0800c7fd
 800c794:	0800c8bb 	.word	0x0800c8bb
 800c798:	0800c749 	.word	0x0800c749
 800c79c:	0800c749 	.word	0x0800c749
 800c7a0:	0800c8fb 	.word	0x0800c8fb
 800c7a4:	0800c749 	.word	0x0800c749
 800c7a8:	0800c7fd 	.word	0x0800c7fd
 800c7ac:	0800c749 	.word	0x0800c749
 800c7b0:	0800c749 	.word	0x0800c749
 800c7b4:	0800c8c3 	.word	0x0800c8c3
 800c7b8:	682b      	ldr	r3, [r5, #0]
 800c7ba:	1d1a      	adds	r2, r3, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	602a      	str	r2, [r5, #0]
 800c7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e0a3      	b.n	800c914 <_printf_i+0x1f4>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	6829      	ldr	r1, [r5, #0]
 800c7d0:	0606      	lsls	r6, r0, #24
 800c7d2:	f101 0304 	add.w	r3, r1, #4
 800c7d6:	d50a      	bpl.n	800c7ee <_printf_i+0xce>
 800c7d8:	680e      	ldr	r6, [r1, #0]
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	2e00      	cmp	r6, #0
 800c7de:	da03      	bge.n	800c7e8 <_printf_i+0xc8>
 800c7e0:	232d      	movs	r3, #45	; 0x2d
 800c7e2:	4276      	negs	r6, r6
 800c7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e8:	485e      	ldr	r0, [pc, #376]	; (800c964 <_printf_i+0x244>)
 800c7ea:	230a      	movs	r3, #10
 800c7ec:	e019      	b.n	800c822 <_printf_i+0x102>
 800c7ee:	680e      	ldr	r6, [r1, #0]
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7f6:	bf18      	it	ne
 800c7f8:	b236      	sxthne	r6, r6
 800c7fa:	e7ef      	b.n	800c7dc <_printf_i+0xbc>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	6820      	ldr	r0, [r4, #0]
 800c800:	1d19      	adds	r1, r3, #4
 800c802:	6029      	str	r1, [r5, #0]
 800c804:	0601      	lsls	r1, r0, #24
 800c806:	d501      	bpl.n	800c80c <_printf_i+0xec>
 800c808:	681e      	ldr	r6, [r3, #0]
 800c80a:	e002      	b.n	800c812 <_printf_i+0xf2>
 800c80c:	0646      	lsls	r6, r0, #25
 800c80e:	d5fb      	bpl.n	800c808 <_printf_i+0xe8>
 800c810:	881e      	ldrh	r6, [r3, #0]
 800c812:	4854      	ldr	r0, [pc, #336]	; (800c964 <_printf_i+0x244>)
 800c814:	2f6f      	cmp	r7, #111	; 0x6f
 800c816:	bf0c      	ite	eq
 800c818:	2308      	moveq	r3, #8
 800c81a:	230a      	movne	r3, #10
 800c81c:	2100      	movs	r1, #0
 800c81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c822:	6865      	ldr	r5, [r4, #4]
 800c824:	60a5      	str	r5, [r4, #8]
 800c826:	2d00      	cmp	r5, #0
 800c828:	bfa2      	ittt	ge
 800c82a:	6821      	ldrge	r1, [r4, #0]
 800c82c:	f021 0104 	bicge.w	r1, r1, #4
 800c830:	6021      	strge	r1, [r4, #0]
 800c832:	b90e      	cbnz	r6, 800c838 <_printf_i+0x118>
 800c834:	2d00      	cmp	r5, #0
 800c836:	d04d      	beq.n	800c8d4 <_printf_i+0x1b4>
 800c838:	4615      	mov	r5, r2
 800c83a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c83e:	fb03 6711 	mls	r7, r3, r1, r6
 800c842:	5dc7      	ldrb	r7, [r0, r7]
 800c844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c848:	4637      	mov	r7, r6
 800c84a:	42bb      	cmp	r3, r7
 800c84c:	460e      	mov	r6, r1
 800c84e:	d9f4      	bls.n	800c83a <_printf_i+0x11a>
 800c850:	2b08      	cmp	r3, #8
 800c852:	d10b      	bne.n	800c86c <_printf_i+0x14c>
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	07de      	lsls	r6, r3, #31
 800c858:	d508      	bpl.n	800c86c <_printf_i+0x14c>
 800c85a:	6923      	ldr	r3, [r4, #16]
 800c85c:	6861      	ldr	r1, [r4, #4]
 800c85e:	4299      	cmp	r1, r3
 800c860:	bfde      	ittt	le
 800c862:	2330      	movle	r3, #48	; 0x30
 800c864:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c86c:	1b52      	subs	r2, r2, r5
 800c86e:	6122      	str	r2, [r4, #16]
 800c870:	f8cd a000 	str.w	sl, [sp]
 800c874:	464b      	mov	r3, r9
 800c876:	aa03      	add	r2, sp, #12
 800c878:	4621      	mov	r1, r4
 800c87a:	4640      	mov	r0, r8
 800c87c:	f7ff fee2 	bl	800c644 <_printf_common>
 800c880:	3001      	adds	r0, #1
 800c882:	d14c      	bne.n	800c91e <_printf_i+0x1fe>
 800c884:	f04f 30ff 	mov.w	r0, #4294967295
 800c888:	b004      	add	sp, #16
 800c88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88e:	4835      	ldr	r0, [pc, #212]	; (800c964 <_printf_i+0x244>)
 800c890:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c894:	6829      	ldr	r1, [r5, #0]
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	f851 6b04 	ldr.w	r6, [r1], #4
 800c89c:	6029      	str	r1, [r5, #0]
 800c89e:	061d      	lsls	r5, r3, #24
 800c8a0:	d514      	bpl.n	800c8cc <_printf_i+0x1ac>
 800c8a2:	07df      	lsls	r7, r3, #31
 800c8a4:	bf44      	itt	mi
 800c8a6:	f043 0320 	orrmi.w	r3, r3, #32
 800c8aa:	6023      	strmi	r3, [r4, #0]
 800c8ac:	b91e      	cbnz	r6, 800c8b6 <_printf_i+0x196>
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	f023 0320 	bic.w	r3, r3, #32
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	2310      	movs	r3, #16
 800c8b8:	e7b0      	b.n	800c81c <_printf_i+0xfc>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	f043 0320 	orr.w	r3, r3, #32
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	2378      	movs	r3, #120	; 0x78
 800c8c4:	4828      	ldr	r0, [pc, #160]	; (800c968 <_printf_i+0x248>)
 800c8c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8ca:	e7e3      	b.n	800c894 <_printf_i+0x174>
 800c8cc:	0659      	lsls	r1, r3, #25
 800c8ce:	bf48      	it	mi
 800c8d0:	b2b6      	uxthmi	r6, r6
 800c8d2:	e7e6      	b.n	800c8a2 <_printf_i+0x182>
 800c8d4:	4615      	mov	r5, r2
 800c8d6:	e7bb      	b.n	800c850 <_printf_i+0x130>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	6826      	ldr	r6, [r4, #0]
 800c8dc:	6961      	ldr	r1, [r4, #20]
 800c8de:	1d18      	adds	r0, r3, #4
 800c8e0:	6028      	str	r0, [r5, #0]
 800c8e2:	0635      	lsls	r5, r6, #24
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	d501      	bpl.n	800c8ec <_printf_i+0x1cc>
 800c8e8:	6019      	str	r1, [r3, #0]
 800c8ea:	e002      	b.n	800c8f2 <_printf_i+0x1d2>
 800c8ec:	0670      	lsls	r0, r6, #25
 800c8ee:	d5fb      	bpl.n	800c8e8 <_printf_i+0x1c8>
 800c8f0:	8019      	strh	r1, [r3, #0]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	6123      	str	r3, [r4, #16]
 800c8f6:	4615      	mov	r5, r2
 800c8f8:	e7ba      	b.n	800c870 <_printf_i+0x150>
 800c8fa:	682b      	ldr	r3, [r5, #0]
 800c8fc:	1d1a      	adds	r2, r3, #4
 800c8fe:	602a      	str	r2, [r5, #0]
 800c900:	681d      	ldr	r5, [r3, #0]
 800c902:	6862      	ldr	r2, [r4, #4]
 800c904:	2100      	movs	r1, #0
 800c906:	4628      	mov	r0, r5
 800c908:	f7f3 fc7a 	bl	8000200 <memchr>
 800c90c:	b108      	cbz	r0, 800c912 <_printf_i+0x1f2>
 800c90e:	1b40      	subs	r0, r0, r5
 800c910:	6060      	str	r0, [r4, #4]
 800c912:	6863      	ldr	r3, [r4, #4]
 800c914:	6123      	str	r3, [r4, #16]
 800c916:	2300      	movs	r3, #0
 800c918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c91c:	e7a8      	b.n	800c870 <_printf_i+0x150>
 800c91e:	6923      	ldr	r3, [r4, #16]
 800c920:	462a      	mov	r2, r5
 800c922:	4649      	mov	r1, r9
 800c924:	4640      	mov	r0, r8
 800c926:	47d0      	blx	sl
 800c928:	3001      	adds	r0, #1
 800c92a:	d0ab      	beq.n	800c884 <_printf_i+0x164>
 800c92c:	6823      	ldr	r3, [r4, #0]
 800c92e:	079b      	lsls	r3, r3, #30
 800c930:	d413      	bmi.n	800c95a <_printf_i+0x23a>
 800c932:	68e0      	ldr	r0, [r4, #12]
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	4298      	cmp	r0, r3
 800c938:	bfb8      	it	lt
 800c93a:	4618      	movlt	r0, r3
 800c93c:	e7a4      	b.n	800c888 <_printf_i+0x168>
 800c93e:	2301      	movs	r3, #1
 800c940:	4632      	mov	r2, r6
 800c942:	4649      	mov	r1, r9
 800c944:	4640      	mov	r0, r8
 800c946:	47d0      	blx	sl
 800c948:	3001      	adds	r0, #1
 800c94a:	d09b      	beq.n	800c884 <_printf_i+0x164>
 800c94c:	3501      	adds	r5, #1
 800c94e:	68e3      	ldr	r3, [r4, #12]
 800c950:	9903      	ldr	r1, [sp, #12]
 800c952:	1a5b      	subs	r3, r3, r1
 800c954:	42ab      	cmp	r3, r5
 800c956:	dcf2      	bgt.n	800c93e <_printf_i+0x21e>
 800c958:	e7eb      	b.n	800c932 <_printf_i+0x212>
 800c95a:	2500      	movs	r5, #0
 800c95c:	f104 0619 	add.w	r6, r4, #25
 800c960:	e7f5      	b.n	800c94e <_printf_i+0x22e>
 800c962:	bf00      	nop
 800c964:	080118c6 	.word	0x080118c6
 800c968:	080118d7 	.word	0x080118d7

0800c96c <siprintf>:
 800c96c:	b40e      	push	{r1, r2, r3}
 800c96e:	b500      	push	{lr}
 800c970:	b09c      	sub	sp, #112	; 0x70
 800c972:	ab1d      	add	r3, sp, #116	; 0x74
 800c974:	9002      	str	r0, [sp, #8]
 800c976:	9006      	str	r0, [sp, #24]
 800c978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c97c:	4809      	ldr	r0, [pc, #36]	; (800c9a4 <siprintf+0x38>)
 800c97e:	9107      	str	r1, [sp, #28]
 800c980:	9104      	str	r1, [sp, #16]
 800c982:	4909      	ldr	r1, [pc, #36]	; (800c9a8 <siprintf+0x3c>)
 800c984:	f853 2b04 	ldr.w	r2, [r3], #4
 800c988:	9105      	str	r1, [sp, #20]
 800c98a:	6800      	ldr	r0, [r0, #0]
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	a902      	add	r1, sp, #8
 800c990:	f001 fb78 	bl	800e084 <_svfiprintf_r>
 800c994:	9b02      	ldr	r3, [sp, #8]
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]
 800c99a:	b01c      	add	sp, #112	; 0x70
 800c99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a0:	b003      	add	sp, #12
 800c9a2:	4770      	bx	lr
 800c9a4:	20000180 	.word	0x20000180
 800c9a8:	ffff0208 	.word	0xffff0208

0800c9ac <quorem>:
 800c9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	6903      	ldr	r3, [r0, #16]
 800c9b2:	690c      	ldr	r4, [r1, #16]
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	f2c0 8081 	blt.w	800cabe <quorem+0x112>
 800c9bc:	3c01      	subs	r4, #1
 800c9be:	f101 0814 	add.w	r8, r1, #20
 800c9c2:	f100 0514 	add.w	r5, r0, #20
 800c9c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9ca:	9301      	str	r3, [sp, #4]
 800c9cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c9dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9e4:	d331      	bcc.n	800ca4a <quorem+0x9e>
 800c9e6:	f04f 0e00 	mov.w	lr, #0
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	46ac      	mov	ip, r5
 800c9ee:	46f2      	mov	sl, lr
 800c9f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9f4:	b293      	uxth	r3, r2
 800c9f6:	fb06 e303 	mla	r3, r6, r3, lr
 800c9fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	ebaa 0303 	sub.w	r3, sl, r3
 800ca04:	f8dc a000 	ldr.w	sl, [ip]
 800ca08:	0c12      	lsrs	r2, r2, #16
 800ca0a:	fa13 f38a 	uxtah	r3, r3, sl
 800ca0e:	fb06 e202 	mla	r2, r6, r2, lr
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	9b00      	ldr	r3, [sp, #0]
 800ca16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca1a:	b292      	uxth	r2, r2
 800ca1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ca20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca24:	f8bd 3000 	ldrh.w	r3, [sp]
 800ca28:	4581      	cmp	r9, r0
 800ca2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca2e:	f84c 3b04 	str.w	r3, [ip], #4
 800ca32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca36:	d2db      	bcs.n	800c9f0 <quorem+0x44>
 800ca38:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca3c:	b92b      	cbnz	r3, 800ca4a <quorem+0x9e>
 800ca3e:	9b01      	ldr	r3, [sp, #4]
 800ca40:	3b04      	subs	r3, #4
 800ca42:	429d      	cmp	r5, r3
 800ca44:	461a      	mov	r2, r3
 800ca46:	d32e      	bcc.n	800caa6 <quorem+0xfa>
 800ca48:	613c      	str	r4, [r7, #16]
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	f001 f8c6 	bl	800dbdc <__mcmp>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	db24      	blt.n	800ca9e <quorem+0xf2>
 800ca54:	3601      	adds	r6, #1
 800ca56:	4628      	mov	r0, r5
 800ca58:	f04f 0c00 	mov.w	ip, #0
 800ca5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca60:	f8d0 e000 	ldr.w	lr, [r0]
 800ca64:	b293      	uxth	r3, r2
 800ca66:	ebac 0303 	sub.w	r3, ip, r3
 800ca6a:	0c12      	lsrs	r2, r2, #16
 800ca6c:	fa13 f38e 	uxtah	r3, r3, lr
 800ca70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca7e:	45c1      	cmp	r9, r8
 800ca80:	f840 3b04 	str.w	r3, [r0], #4
 800ca84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca88:	d2e8      	bcs.n	800ca5c <quorem+0xb0>
 800ca8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca92:	b922      	cbnz	r2, 800ca9e <quorem+0xf2>
 800ca94:	3b04      	subs	r3, #4
 800ca96:	429d      	cmp	r5, r3
 800ca98:	461a      	mov	r2, r3
 800ca9a:	d30a      	bcc.n	800cab2 <quorem+0x106>
 800ca9c:	613c      	str	r4, [r7, #16]
 800ca9e:	4630      	mov	r0, r6
 800caa0:	b003      	add	sp, #12
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	6812      	ldr	r2, [r2, #0]
 800caa8:	3b04      	subs	r3, #4
 800caaa:	2a00      	cmp	r2, #0
 800caac:	d1cc      	bne.n	800ca48 <quorem+0x9c>
 800caae:	3c01      	subs	r4, #1
 800cab0:	e7c7      	b.n	800ca42 <quorem+0x96>
 800cab2:	6812      	ldr	r2, [r2, #0]
 800cab4:	3b04      	subs	r3, #4
 800cab6:	2a00      	cmp	r2, #0
 800cab8:	d1f0      	bne.n	800ca9c <quorem+0xf0>
 800caba:	3c01      	subs	r4, #1
 800cabc:	e7eb      	b.n	800ca96 <quorem+0xea>
 800cabe:	2000      	movs	r0, #0
 800cac0:	e7ee      	b.n	800caa0 <quorem+0xf4>
 800cac2:	0000      	movs	r0, r0
 800cac4:	0000      	movs	r0, r0
	...

0800cac8 <_dtoa_r>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	ed2d 8b04 	vpush	{d8-d9}
 800cad0:	ec57 6b10 	vmov	r6, r7, d0
 800cad4:	b093      	sub	sp, #76	; 0x4c
 800cad6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cad8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cadc:	9106      	str	r1, [sp, #24]
 800cade:	ee10 aa10 	vmov	sl, s0
 800cae2:	4604      	mov	r4, r0
 800cae4:	9209      	str	r2, [sp, #36]	; 0x24
 800cae6:	930c      	str	r3, [sp, #48]	; 0x30
 800cae8:	46bb      	mov	fp, r7
 800caea:	b975      	cbnz	r5, 800cb0a <_dtoa_r+0x42>
 800caec:	2010      	movs	r0, #16
 800caee:	f000 fddd 	bl	800d6ac <malloc>
 800caf2:	4602      	mov	r2, r0
 800caf4:	6260      	str	r0, [r4, #36]	; 0x24
 800caf6:	b920      	cbnz	r0, 800cb02 <_dtoa_r+0x3a>
 800caf8:	4ba7      	ldr	r3, [pc, #668]	; (800cd98 <_dtoa_r+0x2d0>)
 800cafa:	21ea      	movs	r1, #234	; 0xea
 800cafc:	48a7      	ldr	r0, [pc, #668]	; (800cd9c <_dtoa_r+0x2d4>)
 800cafe:	f001 fbd1 	bl	800e2a4 <__assert_func>
 800cb02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb06:	6005      	str	r5, [r0, #0]
 800cb08:	60c5      	str	r5, [r0, #12]
 800cb0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb0c:	6819      	ldr	r1, [r3, #0]
 800cb0e:	b151      	cbz	r1, 800cb26 <_dtoa_r+0x5e>
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	604a      	str	r2, [r1, #4]
 800cb14:	2301      	movs	r3, #1
 800cb16:	4093      	lsls	r3, r2
 800cb18:	608b      	str	r3, [r1, #8]
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 fe1c 	bl	800d758 <_Bfree>
 800cb20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	1e3b      	subs	r3, r7, #0
 800cb28:	bfaa      	itet	ge
 800cb2a:	2300      	movge	r3, #0
 800cb2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cb30:	f8c8 3000 	strge.w	r3, [r8]
 800cb34:	4b9a      	ldr	r3, [pc, #616]	; (800cda0 <_dtoa_r+0x2d8>)
 800cb36:	bfbc      	itt	lt
 800cb38:	2201      	movlt	r2, #1
 800cb3a:	f8c8 2000 	strlt.w	r2, [r8]
 800cb3e:	ea33 030b 	bics.w	r3, r3, fp
 800cb42:	d11b      	bne.n	800cb7c <_dtoa_r+0xb4>
 800cb44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb46:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb50:	4333      	orrs	r3, r6
 800cb52:	f000 8592 	beq.w	800d67a <_dtoa_r+0xbb2>
 800cb56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb58:	b963      	cbnz	r3, 800cb74 <_dtoa_r+0xac>
 800cb5a:	4b92      	ldr	r3, [pc, #584]	; (800cda4 <_dtoa_r+0x2dc>)
 800cb5c:	e022      	b.n	800cba4 <_dtoa_r+0xdc>
 800cb5e:	4b92      	ldr	r3, [pc, #584]	; (800cda8 <_dtoa_r+0x2e0>)
 800cb60:	9301      	str	r3, [sp, #4]
 800cb62:	3308      	adds	r3, #8
 800cb64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	9801      	ldr	r0, [sp, #4]
 800cb6a:	b013      	add	sp, #76	; 0x4c
 800cb6c:	ecbd 8b04 	vpop	{d8-d9}
 800cb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb74:	4b8b      	ldr	r3, [pc, #556]	; (800cda4 <_dtoa_r+0x2dc>)
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	3303      	adds	r3, #3
 800cb7a:	e7f3      	b.n	800cb64 <_dtoa_r+0x9c>
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	2300      	movs	r3, #0
 800cb80:	4650      	mov	r0, sl
 800cb82:	4659      	mov	r1, fp
 800cb84:	f7f3 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb88:	ec4b ab19 	vmov	d9, sl, fp
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	b158      	cbz	r0, 800cba8 <_dtoa_r+0xe0>
 800cb90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb92:	2301      	movs	r3, #1
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 856b 	beq.w	800d674 <_dtoa_r+0xbac>
 800cb9e:	4883      	ldr	r0, [pc, #524]	; (800cdac <_dtoa_r+0x2e4>)
 800cba0:	6018      	str	r0, [r3, #0]
 800cba2:	1e43      	subs	r3, r0, #1
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	e7df      	b.n	800cb68 <_dtoa_r+0xa0>
 800cba8:	ec4b ab10 	vmov	d0, sl, fp
 800cbac:	aa10      	add	r2, sp, #64	; 0x40
 800cbae:	a911      	add	r1, sp, #68	; 0x44
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f001 f8b9 	bl	800dd28 <__d2b>
 800cbb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cbba:	ee08 0a10 	vmov	s16, r0
 800cbbe:	2d00      	cmp	r5, #0
 800cbc0:	f000 8084 	beq.w	800cccc <_dtoa_r+0x204>
 800cbc4:	ee19 3a90 	vmov	r3, s19
 800cbc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cbd0:	4656      	mov	r6, sl
 800cbd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cbd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cbda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cbde:	4b74      	ldr	r3, [pc, #464]	; (800cdb0 <_dtoa_r+0x2e8>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 fb5f 	bl	80002a8 <__aeabi_dsub>
 800cbea:	a365      	add	r3, pc, #404	; (adr r3, 800cd80 <_dtoa_r+0x2b8>)
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	f7f3 fd12 	bl	8000618 <__aeabi_dmul>
 800cbf4:	a364      	add	r3, pc, #400	; (adr r3, 800cd88 <_dtoa_r+0x2c0>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7f3 fb57 	bl	80002ac <__adddf3>
 800cbfe:	4606      	mov	r6, r0
 800cc00:	4628      	mov	r0, r5
 800cc02:	460f      	mov	r7, r1
 800cc04:	f7f3 fc9e 	bl	8000544 <__aeabi_i2d>
 800cc08:	a361      	add	r3, pc, #388	; (adr r3, 800cd90 <_dtoa_r+0x2c8>)
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	f7f3 fd03 	bl	8000618 <__aeabi_dmul>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4630      	mov	r0, r6
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f3 fb47 	bl	80002ac <__adddf3>
 800cc1e:	4606      	mov	r6, r0
 800cc20:	460f      	mov	r7, r1
 800cc22:	f7f3 ffa9 	bl	8000b78 <__aeabi_d2iz>
 800cc26:	2200      	movs	r2, #0
 800cc28:	9000      	str	r0, [sp, #0]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 ff64 	bl	8000afc <__aeabi_dcmplt>
 800cc34:	b150      	cbz	r0, 800cc4c <_dtoa_r+0x184>
 800cc36:	9800      	ldr	r0, [sp, #0]
 800cc38:	f7f3 fc84 	bl	8000544 <__aeabi_i2d>
 800cc3c:	4632      	mov	r2, r6
 800cc3e:	463b      	mov	r3, r7
 800cc40:	f7f3 ff52 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc44:	b910      	cbnz	r0, 800cc4c <_dtoa_r+0x184>
 800cc46:	9b00      	ldr	r3, [sp, #0]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	9b00      	ldr	r3, [sp, #0]
 800cc4e:	2b16      	cmp	r3, #22
 800cc50:	d85a      	bhi.n	800cd08 <_dtoa_r+0x240>
 800cc52:	9a00      	ldr	r2, [sp, #0]
 800cc54:	4b57      	ldr	r3, [pc, #348]	; (800cdb4 <_dtoa_r+0x2ec>)
 800cc56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	ec51 0b19 	vmov	r0, r1, d9
 800cc62:	f7f3 ff4b 	bl	8000afc <__aeabi_dcmplt>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d050      	beq.n	800cd0c <_dtoa_r+0x244>
 800cc6a:	9b00      	ldr	r3, [sp, #0]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	2300      	movs	r3, #0
 800cc72:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc76:	1b5d      	subs	r5, r3, r5
 800cc78:	1e6b      	subs	r3, r5, #1
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	bf45      	ittet	mi
 800cc7e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc82:	9304      	strmi	r3, [sp, #16]
 800cc84:	2300      	movpl	r3, #0
 800cc86:	2300      	movmi	r3, #0
 800cc88:	bf4c      	ite	mi
 800cc8a:	9305      	strmi	r3, [sp, #20]
 800cc8c:	9304      	strpl	r3, [sp, #16]
 800cc8e:	9b00      	ldr	r3, [sp, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	db3d      	blt.n	800cd10 <_dtoa_r+0x248>
 800cc94:	9b05      	ldr	r3, [sp, #20]
 800cc96:	9a00      	ldr	r2, [sp, #0]
 800cc98:	920a      	str	r2, [sp, #40]	; 0x28
 800cc9a:	4413      	add	r3, r2
 800cc9c:	9305      	str	r3, [sp, #20]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9307      	str	r3, [sp, #28]
 800cca2:	9b06      	ldr	r3, [sp, #24]
 800cca4:	2b09      	cmp	r3, #9
 800cca6:	f200 8089 	bhi.w	800cdbc <_dtoa_r+0x2f4>
 800ccaa:	2b05      	cmp	r3, #5
 800ccac:	bfc4      	itt	gt
 800ccae:	3b04      	subgt	r3, #4
 800ccb0:	9306      	strgt	r3, [sp, #24]
 800ccb2:	9b06      	ldr	r3, [sp, #24]
 800ccb4:	f1a3 0302 	sub.w	r3, r3, #2
 800ccb8:	bfcc      	ite	gt
 800ccba:	2500      	movgt	r5, #0
 800ccbc:	2501      	movle	r5, #1
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	f200 8087 	bhi.w	800cdd2 <_dtoa_r+0x30a>
 800ccc4:	e8df f003 	tbb	[pc, r3]
 800ccc8:	59383a2d 	.word	0x59383a2d
 800cccc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ccd0:	441d      	add	r5, r3
 800ccd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ccd6:	2b20      	cmp	r3, #32
 800ccd8:	bfc1      	itttt	gt
 800ccda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ccde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cce2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cce6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ccea:	bfda      	itte	le
 800ccec:	f1c3 0320 	rsble	r3, r3, #32
 800ccf0:	fa06 f003 	lslle.w	r0, r6, r3
 800ccf4:	4318      	orrgt	r0, r3
 800ccf6:	f7f3 fc15 	bl	8000524 <__aeabi_ui2d>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd02:	3d01      	subs	r5, #1
 800cd04:	930e      	str	r3, [sp, #56]	; 0x38
 800cd06:	e76a      	b.n	800cbde <_dtoa_r+0x116>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e7b2      	b.n	800cc72 <_dtoa_r+0x1aa>
 800cd0c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd0e:	e7b1      	b.n	800cc74 <_dtoa_r+0x1ac>
 800cd10:	9b04      	ldr	r3, [sp, #16]
 800cd12:	9a00      	ldr	r2, [sp, #0]
 800cd14:	1a9b      	subs	r3, r3, r2
 800cd16:	9304      	str	r3, [sp, #16]
 800cd18:	4253      	negs	r3, r2
 800cd1a:	9307      	str	r3, [sp, #28]
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd20:	e7bf      	b.n	800cca2 <_dtoa_r+0x1da>
 800cd22:	2300      	movs	r3, #0
 800cd24:	9308      	str	r3, [sp, #32]
 800cd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dc55      	bgt.n	800cdd8 <_dtoa_r+0x310>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd32:	461a      	mov	r2, r3
 800cd34:	9209      	str	r2, [sp, #36]	; 0x24
 800cd36:	e00c      	b.n	800cd52 <_dtoa_r+0x28a>
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e7f3      	b.n	800cd24 <_dtoa_r+0x25c>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd40:	9308      	str	r3, [sp, #32]
 800cd42:	9b00      	ldr	r3, [sp, #0]
 800cd44:	4413      	add	r3, r2
 800cd46:	9302      	str	r3, [sp, #8]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	9303      	str	r3, [sp, #12]
 800cd4e:	bfb8      	it	lt
 800cd50:	2301      	movlt	r3, #1
 800cd52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cd54:	2200      	movs	r2, #0
 800cd56:	6042      	str	r2, [r0, #4]
 800cd58:	2204      	movs	r2, #4
 800cd5a:	f102 0614 	add.w	r6, r2, #20
 800cd5e:	429e      	cmp	r6, r3
 800cd60:	6841      	ldr	r1, [r0, #4]
 800cd62:	d93d      	bls.n	800cde0 <_dtoa_r+0x318>
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 fcb7 	bl	800d6d8 <_Balloc>
 800cd6a:	9001      	str	r0, [sp, #4]
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d13b      	bne.n	800cde8 <_dtoa_r+0x320>
 800cd70:	4b11      	ldr	r3, [pc, #68]	; (800cdb8 <_dtoa_r+0x2f0>)
 800cd72:	4602      	mov	r2, r0
 800cd74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd78:	e6c0      	b.n	800cafc <_dtoa_r+0x34>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e7df      	b.n	800cd3e <_dtoa_r+0x276>
 800cd7e:	bf00      	nop
 800cd80:	636f4361 	.word	0x636f4361
 800cd84:	3fd287a7 	.word	0x3fd287a7
 800cd88:	8b60c8b3 	.word	0x8b60c8b3
 800cd8c:	3fc68a28 	.word	0x3fc68a28
 800cd90:	509f79fb 	.word	0x509f79fb
 800cd94:	3fd34413 	.word	0x3fd34413
 800cd98:	080118f5 	.word	0x080118f5
 800cd9c:	0801190c 	.word	0x0801190c
 800cda0:	7ff00000 	.word	0x7ff00000
 800cda4:	080118f1 	.word	0x080118f1
 800cda8:	080118e8 	.word	0x080118e8
 800cdac:	080118c5 	.word	0x080118c5
 800cdb0:	3ff80000 	.word	0x3ff80000
 800cdb4:	08011a00 	.word	0x08011a00
 800cdb8:	08011967 	.word	0x08011967
 800cdbc:	2501      	movs	r5, #1
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	9306      	str	r3, [sp, #24]
 800cdc2:	9508      	str	r5, [sp, #32]
 800cdc4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2312      	movs	r3, #18
 800cdd0:	e7b0      	b.n	800cd34 <_dtoa_r+0x26c>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	9308      	str	r3, [sp, #32]
 800cdd6:	e7f5      	b.n	800cdc4 <_dtoa_r+0x2fc>
 800cdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cdde:	e7b8      	b.n	800cd52 <_dtoa_r+0x28a>
 800cde0:	3101      	adds	r1, #1
 800cde2:	6041      	str	r1, [r0, #4]
 800cde4:	0052      	lsls	r2, r2, #1
 800cde6:	e7b8      	b.n	800cd5a <_dtoa_r+0x292>
 800cde8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdea:	9a01      	ldr	r2, [sp, #4]
 800cdec:	601a      	str	r2, [r3, #0]
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	2b0e      	cmp	r3, #14
 800cdf2:	f200 809d 	bhi.w	800cf30 <_dtoa_r+0x468>
 800cdf6:	2d00      	cmp	r5, #0
 800cdf8:	f000 809a 	beq.w	800cf30 <_dtoa_r+0x468>
 800cdfc:	9b00      	ldr	r3, [sp, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	dd32      	ble.n	800ce68 <_dtoa_r+0x3a0>
 800ce02:	4ab7      	ldr	r2, [pc, #732]	; (800d0e0 <_dtoa_r+0x618>)
 800ce04:	f003 030f 	and.w	r3, r3, #15
 800ce08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce10:	9b00      	ldr	r3, [sp, #0]
 800ce12:	05d8      	lsls	r0, r3, #23
 800ce14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ce18:	d516      	bpl.n	800ce48 <_dtoa_r+0x380>
 800ce1a:	4bb2      	ldr	r3, [pc, #712]	; (800d0e4 <_dtoa_r+0x61c>)
 800ce1c:	ec51 0b19 	vmov	r0, r1, d9
 800ce20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce24:	f7f3 fd22 	bl	800086c <__aeabi_ddiv>
 800ce28:	f007 070f 	and.w	r7, r7, #15
 800ce2c:	4682      	mov	sl, r0
 800ce2e:	468b      	mov	fp, r1
 800ce30:	2503      	movs	r5, #3
 800ce32:	4eac      	ldr	r6, [pc, #688]	; (800d0e4 <_dtoa_r+0x61c>)
 800ce34:	b957      	cbnz	r7, 800ce4c <_dtoa_r+0x384>
 800ce36:	4642      	mov	r2, r8
 800ce38:	464b      	mov	r3, r9
 800ce3a:	4650      	mov	r0, sl
 800ce3c:	4659      	mov	r1, fp
 800ce3e:	f7f3 fd15 	bl	800086c <__aeabi_ddiv>
 800ce42:	4682      	mov	sl, r0
 800ce44:	468b      	mov	fp, r1
 800ce46:	e028      	b.n	800ce9a <_dtoa_r+0x3d2>
 800ce48:	2502      	movs	r5, #2
 800ce4a:	e7f2      	b.n	800ce32 <_dtoa_r+0x36a>
 800ce4c:	07f9      	lsls	r1, r7, #31
 800ce4e:	d508      	bpl.n	800ce62 <_dtoa_r+0x39a>
 800ce50:	4640      	mov	r0, r8
 800ce52:	4649      	mov	r1, r9
 800ce54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce58:	f7f3 fbde 	bl	8000618 <__aeabi_dmul>
 800ce5c:	3501      	adds	r5, #1
 800ce5e:	4680      	mov	r8, r0
 800ce60:	4689      	mov	r9, r1
 800ce62:	107f      	asrs	r7, r7, #1
 800ce64:	3608      	adds	r6, #8
 800ce66:	e7e5      	b.n	800ce34 <_dtoa_r+0x36c>
 800ce68:	f000 809b 	beq.w	800cfa2 <_dtoa_r+0x4da>
 800ce6c:	9b00      	ldr	r3, [sp, #0]
 800ce6e:	4f9d      	ldr	r7, [pc, #628]	; (800d0e4 <_dtoa_r+0x61c>)
 800ce70:	425e      	negs	r6, r3
 800ce72:	4b9b      	ldr	r3, [pc, #620]	; (800d0e0 <_dtoa_r+0x618>)
 800ce74:	f006 020f 	and.w	r2, r6, #15
 800ce78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	ec51 0b19 	vmov	r0, r1, d9
 800ce84:	f7f3 fbc8 	bl	8000618 <__aeabi_dmul>
 800ce88:	1136      	asrs	r6, r6, #4
 800ce8a:	4682      	mov	sl, r0
 800ce8c:	468b      	mov	fp, r1
 800ce8e:	2300      	movs	r3, #0
 800ce90:	2502      	movs	r5, #2
 800ce92:	2e00      	cmp	r6, #0
 800ce94:	d17a      	bne.n	800cf8c <_dtoa_r+0x4c4>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1d3      	bne.n	800ce42 <_dtoa_r+0x37a>
 800ce9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 8082 	beq.w	800cfa6 <_dtoa_r+0x4de>
 800cea2:	4b91      	ldr	r3, [pc, #580]	; (800d0e8 <_dtoa_r+0x620>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	4650      	mov	r0, sl
 800cea8:	4659      	mov	r1, fp
 800ceaa:	f7f3 fe27 	bl	8000afc <__aeabi_dcmplt>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d079      	beq.n	800cfa6 <_dtoa_r+0x4de>
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d076      	beq.n	800cfa6 <_dtoa_r+0x4de>
 800ceb8:	9b02      	ldr	r3, [sp, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dd36      	ble.n	800cf2c <_dtoa_r+0x464>
 800cebe:	9b00      	ldr	r3, [sp, #0]
 800cec0:	4650      	mov	r0, sl
 800cec2:	4659      	mov	r1, fp
 800cec4:	1e5f      	subs	r7, r3, #1
 800cec6:	2200      	movs	r2, #0
 800cec8:	4b88      	ldr	r3, [pc, #544]	; (800d0ec <_dtoa_r+0x624>)
 800ceca:	f7f3 fba5 	bl	8000618 <__aeabi_dmul>
 800cece:	9e02      	ldr	r6, [sp, #8]
 800ced0:	4682      	mov	sl, r0
 800ced2:	468b      	mov	fp, r1
 800ced4:	3501      	adds	r5, #1
 800ced6:	4628      	mov	r0, r5
 800ced8:	f7f3 fb34 	bl	8000544 <__aeabi_i2d>
 800cedc:	4652      	mov	r2, sl
 800cede:	465b      	mov	r3, fp
 800cee0:	f7f3 fb9a 	bl	8000618 <__aeabi_dmul>
 800cee4:	4b82      	ldr	r3, [pc, #520]	; (800d0f0 <_dtoa_r+0x628>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	f7f3 f9e0 	bl	80002ac <__adddf3>
 800ceec:	46d0      	mov	r8, sl
 800ceee:	46d9      	mov	r9, fp
 800cef0:	4682      	mov	sl, r0
 800cef2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cef6:	2e00      	cmp	r6, #0
 800cef8:	d158      	bne.n	800cfac <_dtoa_r+0x4e4>
 800cefa:	4b7e      	ldr	r3, [pc, #504]	; (800d0f4 <_dtoa_r+0x62c>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	4640      	mov	r0, r8
 800cf00:	4649      	mov	r1, r9
 800cf02:	f7f3 f9d1 	bl	80002a8 <__aeabi_dsub>
 800cf06:	4652      	mov	r2, sl
 800cf08:	465b      	mov	r3, fp
 800cf0a:	4680      	mov	r8, r0
 800cf0c:	4689      	mov	r9, r1
 800cf0e:	f7f3 fe13 	bl	8000b38 <__aeabi_dcmpgt>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	f040 8295 	bne.w	800d442 <_dtoa_r+0x97a>
 800cf18:	4652      	mov	r2, sl
 800cf1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf1e:	4640      	mov	r0, r8
 800cf20:	4649      	mov	r1, r9
 800cf22:	f7f3 fdeb 	bl	8000afc <__aeabi_dcmplt>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	f040 8289 	bne.w	800d43e <_dtoa_r+0x976>
 800cf2c:	ec5b ab19 	vmov	sl, fp, d9
 800cf30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f2c0 8148 	blt.w	800d1c8 <_dtoa_r+0x700>
 800cf38:	9a00      	ldr	r2, [sp, #0]
 800cf3a:	2a0e      	cmp	r2, #14
 800cf3c:	f300 8144 	bgt.w	800d1c8 <_dtoa_r+0x700>
 800cf40:	4b67      	ldr	r3, [pc, #412]	; (800d0e0 <_dtoa_r+0x618>)
 800cf42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f280 80d5 	bge.w	800d0fc <_dtoa_r+0x634>
 800cf52:	9b03      	ldr	r3, [sp, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f300 80d1 	bgt.w	800d0fc <_dtoa_r+0x634>
 800cf5a:	f040 826f 	bne.w	800d43c <_dtoa_r+0x974>
 800cf5e:	4b65      	ldr	r3, [pc, #404]	; (800d0f4 <_dtoa_r+0x62c>)
 800cf60:	2200      	movs	r2, #0
 800cf62:	4640      	mov	r0, r8
 800cf64:	4649      	mov	r1, r9
 800cf66:	f7f3 fb57 	bl	8000618 <__aeabi_dmul>
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	f7f3 fdd9 	bl	8000b24 <__aeabi_dcmpge>
 800cf72:	9e03      	ldr	r6, [sp, #12]
 800cf74:	4637      	mov	r7, r6
 800cf76:	2800      	cmp	r0, #0
 800cf78:	f040 8245 	bne.w	800d406 <_dtoa_r+0x93e>
 800cf7c:	9d01      	ldr	r5, [sp, #4]
 800cf7e:	2331      	movs	r3, #49	; 0x31
 800cf80:	f805 3b01 	strb.w	r3, [r5], #1
 800cf84:	9b00      	ldr	r3, [sp, #0]
 800cf86:	3301      	adds	r3, #1
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	e240      	b.n	800d40e <_dtoa_r+0x946>
 800cf8c:	07f2      	lsls	r2, r6, #31
 800cf8e:	d505      	bpl.n	800cf9c <_dtoa_r+0x4d4>
 800cf90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf94:	f7f3 fb40 	bl	8000618 <__aeabi_dmul>
 800cf98:	3501      	adds	r5, #1
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	1076      	asrs	r6, r6, #1
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	e777      	b.n	800ce92 <_dtoa_r+0x3ca>
 800cfa2:	2502      	movs	r5, #2
 800cfa4:	e779      	b.n	800ce9a <_dtoa_r+0x3d2>
 800cfa6:	9f00      	ldr	r7, [sp, #0]
 800cfa8:	9e03      	ldr	r6, [sp, #12]
 800cfaa:	e794      	b.n	800ced6 <_dtoa_r+0x40e>
 800cfac:	9901      	ldr	r1, [sp, #4]
 800cfae:	4b4c      	ldr	r3, [pc, #304]	; (800d0e0 <_dtoa_r+0x618>)
 800cfb0:	4431      	add	r1, r6
 800cfb2:	910d      	str	r1, [sp, #52]	; 0x34
 800cfb4:	9908      	ldr	r1, [sp, #32]
 800cfb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cfba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfbe:	2900      	cmp	r1, #0
 800cfc0:	d043      	beq.n	800d04a <_dtoa_r+0x582>
 800cfc2:	494d      	ldr	r1, [pc, #308]	; (800d0f8 <_dtoa_r+0x630>)
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	f7f3 fc51 	bl	800086c <__aeabi_ddiv>
 800cfca:	4652      	mov	r2, sl
 800cfcc:	465b      	mov	r3, fp
 800cfce:	f7f3 f96b 	bl	80002a8 <__aeabi_dsub>
 800cfd2:	9d01      	ldr	r5, [sp, #4]
 800cfd4:	4682      	mov	sl, r0
 800cfd6:	468b      	mov	fp, r1
 800cfd8:	4649      	mov	r1, r9
 800cfda:	4640      	mov	r0, r8
 800cfdc:	f7f3 fdcc 	bl	8000b78 <__aeabi_d2iz>
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	f7f3 faaf 	bl	8000544 <__aeabi_i2d>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	4640      	mov	r0, r8
 800cfec:	4649      	mov	r1, r9
 800cfee:	f7f3 f95b 	bl	80002a8 <__aeabi_dsub>
 800cff2:	3630      	adds	r6, #48	; 0x30
 800cff4:	f805 6b01 	strb.w	r6, [r5], #1
 800cff8:	4652      	mov	r2, sl
 800cffa:	465b      	mov	r3, fp
 800cffc:	4680      	mov	r8, r0
 800cffe:	4689      	mov	r9, r1
 800d000:	f7f3 fd7c 	bl	8000afc <__aeabi_dcmplt>
 800d004:	2800      	cmp	r0, #0
 800d006:	d163      	bne.n	800d0d0 <_dtoa_r+0x608>
 800d008:	4642      	mov	r2, r8
 800d00a:	464b      	mov	r3, r9
 800d00c:	4936      	ldr	r1, [pc, #216]	; (800d0e8 <_dtoa_r+0x620>)
 800d00e:	2000      	movs	r0, #0
 800d010:	f7f3 f94a 	bl	80002a8 <__aeabi_dsub>
 800d014:	4652      	mov	r2, sl
 800d016:	465b      	mov	r3, fp
 800d018:	f7f3 fd70 	bl	8000afc <__aeabi_dcmplt>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f040 80b5 	bne.w	800d18c <_dtoa_r+0x6c4>
 800d022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d024:	429d      	cmp	r5, r3
 800d026:	d081      	beq.n	800cf2c <_dtoa_r+0x464>
 800d028:	4b30      	ldr	r3, [pc, #192]	; (800d0ec <_dtoa_r+0x624>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	4650      	mov	r0, sl
 800d02e:	4659      	mov	r1, fp
 800d030:	f7f3 faf2 	bl	8000618 <__aeabi_dmul>
 800d034:	4b2d      	ldr	r3, [pc, #180]	; (800d0ec <_dtoa_r+0x624>)
 800d036:	4682      	mov	sl, r0
 800d038:	468b      	mov	fp, r1
 800d03a:	4640      	mov	r0, r8
 800d03c:	4649      	mov	r1, r9
 800d03e:	2200      	movs	r2, #0
 800d040:	f7f3 faea 	bl	8000618 <__aeabi_dmul>
 800d044:	4680      	mov	r8, r0
 800d046:	4689      	mov	r9, r1
 800d048:	e7c6      	b.n	800cfd8 <_dtoa_r+0x510>
 800d04a:	4650      	mov	r0, sl
 800d04c:	4659      	mov	r1, fp
 800d04e:	f7f3 fae3 	bl	8000618 <__aeabi_dmul>
 800d052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d054:	9d01      	ldr	r5, [sp, #4]
 800d056:	930f      	str	r3, [sp, #60]	; 0x3c
 800d058:	4682      	mov	sl, r0
 800d05a:	468b      	mov	fp, r1
 800d05c:	4649      	mov	r1, r9
 800d05e:	4640      	mov	r0, r8
 800d060:	f7f3 fd8a 	bl	8000b78 <__aeabi_d2iz>
 800d064:	4606      	mov	r6, r0
 800d066:	f7f3 fa6d 	bl	8000544 <__aeabi_i2d>
 800d06a:	3630      	adds	r6, #48	; 0x30
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	4640      	mov	r0, r8
 800d072:	4649      	mov	r1, r9
 800d074:	f7f3 f918 	bl	80002a8 <__aeabi_dsub>
 800d078:	f805 6b01 	strb.w	r6, [r5], #1
 800d07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d07e:	429d      	cmp	r5, r3
 800d080:	4680      	mov	r8, r0
 800d082:	4689      	mov	r9, r1
 800d084:	f04f 0200 	mov.w	r2, #0
 800d088:	d124      	bne.n	800d0d4 <_dtoa_r+0x60c>
 800d08a:	4b1b      	ldr	r3, [pc, #108]	; (800d0f8 <_dtoa_r+0x630>)
 800d08c:	4650      	mov	r0, sl
 800d08e:	4659      	mov	r1, fp
 800d090:	f7f3 f90c 	bl	80002ac <__adddf3>
 800d094:	4602      	mov	r2, r0
 800d096:	460b      	mov	r3, r1
 800d098:	4640      	mov	r0, r8
 800d09a:	4649      	mov	r1, r9
 800d09c:	f7f3 fd4c 	bl	8000b38 <__aeabi_dcmpgt>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d173      	bne.n	800d18c <_dtoa_r+0x6c4>
 800d0a4:	4652      	mov	r2, sl
 800d0a6:	465b      	mov	r3, fp
 800d0a8:	4913      	ldr	r1, [pc, #76]	; (800d0f8 <_dtoa_r+0x630>)
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	f7f3 f8fc 	bl	80002a8 <__aeabi_dsub>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	f7f3 fd20 	bl	8000afc <__aeabi_dcmplt>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f43f af35 	beq.w	800cf2c <_dtoa_r+0x464>
 800d0c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d0c4:	1e6b      	subs	r3, r5, #1
 800d0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0cc:	2b30      	cmp	r3, #48	; 0x30
 800d0ce:	d0f8      	beq.n	800d0c2 <_dtoa_r+0x5fa>
 800d0d0:	9700      	str	r7, [sp, #0]
 800d0d2:	e049      	b.n	800d168 <_dtoa_r+0x6a0>
 800d0d4:	4b05      	ldr	r3, [pc, #20]	; (800d0ec <_dtoa_r+0x624>)
 800d0d6:	f7f3 fa9f 	bl	8000618 <__aeabi_dmul>
 800d0da:	4680      	mov	r8, r0
 800d0dc:	4689      	mov	r9, r1
 800d0de:	e7bd      	b.n	800d05c <_dtoa_r+0x594>
 800d0e0:	08011a00 	.word	0x08011a00
 800d0e4:	080119d8 	.word	0x080119d8
 800d0e8:	3ff00000 	.word	0x3ff00000
 800d0ec:	40240000 	.word	0x40240000
 800d0f0:	401c0000 	.word	0x401c0000
 800d0f4:	40140000 	.word	0x40140000
 800d0f8:	3fe00000 	.word	0x3fe00000
 800d0fc:	9d01      	ldr	r5, [sp, #4]
 800d0fe:	4656      	mov	r6, sl
 800d100:	465f      	mov	r7, fp
 800d102:	4642      	mov	r2, r8
 800d104:	464b      	mov	r3, r9
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 fbaf 	bl	800086c <__aeabi_ddiv>
 800d10e:	f7f3 fd33 	bl	8000b78 <__aeabi_d2iz>
 800d112:	4682      	mov	sl, r0
 800d114:	f7f3 fa16 	bl	8000544 <__aeabi_i2d>
 800d118:	4642      	mov	r2, r8
 800d11a:	464b      	mov	r3, r9
 800d11c:	f7f3 fa7c 	bl	8000618 <__aeabi_dmul>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4630      	mov	r0, r6
 800d126:	4639      	mov	r1, r7
 800d128:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d12c:	f7f3 f8bc 	bl	80002a8 <__aeabi_dsub>
 800d130:	f805 6b01 	strb.w	r6, [r5], #1
 800d134:	9e01      	ldr	r6, [sp, #4]
 800d136:	9f03      	ldr	r7, [sp, #12]
 800d138:	1bae      	subs	r6, r5, r6
 800d13a:	42b7      	cmp	r7, r6
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	d135      	bne.n	800d1ae <_dtoa_r+0x6e6>
 800d142:	f7f3 f8b3 	bl	80002ac <__adddf3>
 800d146:	4642      	mov	r2, r8
 800d148:	464b      	mov	r3, r9
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	f7f3 fcf3 	bl	8000b38 <__aeabi_dcmpgt>
 800d152:	b9d0      	cbnz	r0, 800d18a <_dtoa_r+0x6c2>
 800d154:	4642      	mov	r2, r8
 800d156:	464b      	mov	r3, r9
 800d158:	4630      	mov	r0, r6
 800d15a:	4639      	mov	r1, r7
 800d15c:	f7f3 fcc4 	bl	8000ae8 <__aeabi_dcmpeq>
 800d160:	b110      	cbz	r0, 800d168 <_dtoa_r+0x6a0>
 800d162:	f01a 0f01 	tst.w	sl, #1
 800d166:	d110      	bne.n	800d18a <_dtoa_r+0x6c2>
 800d168:	4620      	mov	r0, r4
 800d16a:	ee18 1a10 	vmov	r1, s16
 800d16e:	f000 faf3 	bl	800d758 <_Bfree>
 800d172:	2300      	movs	r3, #0
 800d174:	9800      	ldr	r0, [sp, #0]
 800d176:	702b      	strb	r3, [r5, #0]
 800d178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d17a:	3001      	adds	r0, #1
 800d17c:	6018      	str	r0, [r3, #0]
 800d17e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d180:	2b00      	cmp	r3, #0
 800d182:	f43f acf1 	beq.w	800cb68 <_dtoa_r+0xa0>
 800d186:	601d      	str	r5, [r3, #0]
 800d188:	e4ee      	b.n	800cb68 <_dtoa_r+0xa0>
 800d18a:	9f00      	ldr	r7, [sp, #0]
 800d18c:	462b      	mov	r3, r5
 800d18e:	461d      	mov	r5, r3
 800d190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d194:	2a39      	cmp	r2, #57	; 0x39
 800d196:	d106      	bne.n	800d1a6 <_dtoa_r+0x6de>
 800d198:	9a01      	ldr	r2, [sp, #4]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d1f7      	bne.n	800d18e <_dtoa_r+0x6c6>
 800d19e:	9901      	ldr	r1, [sp, #4]
 800d1a0:	2230      	movs	r2, #48	; 0x30
 800d1a2:	3701      	adds	r7, #1
 800d1a4:	700a      	strb	r2, [r1, #0]
 800d1a6:	781a      	ldrb	r2, [r3, #0]
 800d1a8:	3201      	adds	r2, #1
 800d1aa:	701a      	strb	r2, [r3, #0]
 800d1ac:	e790      	b.n	800d0d0 <_dtoa_r+0x608>
 800d1ae:	4ba6      	ldr	r3, [pc, #664]	; (800d448 <_dtoa_r+0x980>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f7f3 fa31 	bl	8000618 <__aeabi_dmul>
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460f      	mov	r7, r1
 800d1be:	f7f3 fc93 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	d09d      	beq.n	800d102 <_dtoa_r+0x63a>
 800d1c6:	e7cf      	b.n	800d168 <_dtoa_r+0x6a0>
 800d1c8:	9a08      	ldr	r2, [sp, #32]
 800d1ca:	2a00      	cmp	r2, #0
 800d1cc:	f000 80d7 	beq.w	800d37e <_dtoa_r+0x8b6>
 800d1d0:	9a06      	ldr	r2, [sp, #24]
 800d1d2:	2a01      	cmp	r2, #1
 800d1d4:	f300 80ba 	bgt.w	800d34c <_dtoa_r+0x884>
 800d1d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1da:	2a00      	cmp	r2, #0
 800d1dc:	f000 80b2 	beq.w	800d344 <_dtoa_r+0x87c>
 800d1e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1e4:	9e07      	ldr	r6, [sp, #28]
 800d1e6:	9d04      	ldr	r5, [sp, #16]
 800d1e8:	9a04      	ldr	r2, [sp, #16]
 800d1ea:	441a      	add	r2, r3
 800d1ec:	9204      	str	r2, [sp, #16]
 800d1ee:	9a05      	ldr	r2, [sp, #20]
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	441a      	add	r2, r3
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	9205      	str	r2, [sp, #20]
 800d1f8:	f000 fb66 	bl	800d8c8 <__i2b>
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	2d00      	cmp	r5, #0
 800d200:	dd0c      	ble.n	800d21c <_dtoa_r+0x754>
 800d202:	9b05      	ldr	r3, [sp, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	dd09      	ble.n	800d21c <_dtoa_r+0x754>
 800d208:	42ab      	cmp	r3, r5
 800d20a:	9a04      	ldr	r2, [sp, #16]
 800d20c:	bfa8      	it	ge
 800d20e:	462b      	movge	r3, r5
 800d210:	1ad2      	subs	r2, r2, r3
 800d212:	9204      	str	r2, [sp, #16]
 800d214:	9a05      	ldr	r2, [sp, #20]
 800d216:	1aed      	subs	r5, r5, r3
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	9305      	str	r3, [sp, #20]
 800d21c:	9b07      	ldr	r3, [sp, #28]
 800d21e:	b31b      	cbz	r3, 800d268 <_dtoa_r+0x7a0>
 800d220:	9b08      	ldr	r3, [sp, #32]
 800d222:	2b00      	cmp	r3, #0
 800d224:	f000 80af 	beq.w	800d386 <_dtoa_r+0x8be>
 800d228:	2e00      	cmp	r6, #0
 800d22a:	dd13      	ble.n	800d254 <_dtoa_r+0x78c>
 800d22c:	4639      	mov	r1, r7
 800d22e:	4632      	mov	r2, r6
 800d230:	4620      	mov	r0, r4
 800d232:	f000 fc09 	bl	800da48 <__pow5mult>
 800d236:	ee18 2a10 	vmov	r2, s16
 800d23a:	4601      	mov	r1, r0
 800d23c:	4607      	mov	r7, r0
 800d23e:	4620      	mov	r0, r4
 800d240:	f000 fb58 	bl	800d8f4 <__multiply>
 800d244:	ee18 1a10 	vmov	r1, s16
 800d248:	4680      	mov	r8, r0
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 fa84 	bl	800d758 <_Bfree>
 800d250:	ee08 8a10 	vmov	s16, r8
 800d254:	9b07      	ldr	r3, [sp, #28]
 800d256:	1b9a      	subs	r2, r3, r6
 800d258:	d006      	beq.n	800d268 <_dtoa_r+0x7a0>
 800d25a:	ee18 1a10 	vmov	r1, s16
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fbf2 	bl	800da48 <__pow5mult>
 800d264:	ee08 0a10 	vmov	s16, r0
 800d268:	2101      	movs	r1, #1
 800d26a:	4620      	mov	r0, r4
 800d26c:	f000 fb2c 	bl	800d8c8 <__i2b>
 800d270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d272:	2b00      	cmp	r3, #0
 800d274:	4606      	mov	r6, r0
 800d276:	f340 8088 	ble.w	800d38a <_dtoa_r+0x8c2>
 800d27a:	461a      	mov	r2, r3
 800d27c:	4601      	mov	r1, r0
 800d27e:	4620      	mov	r0, r4
 800d280:	f000 fbe2 	bl	800da48 <__pow5mult>
 800d284:	9b06      	ldr	r3, [sp, #24]
 800d286:	2b01      	cmp	r3, #1
 800d288:	4606      	mov	r6, r0
 800d28a:	f340 8081 	ble.w	800d390 <_dtoa_r+0x8c8>
 800d28e:	f04f 0800 	mov.w	r8, #0
 800d292:	6933      	ldr	r3, [r6, #16]
 800d294:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d298:	6918      	ldr	r0, [r3, #16]
 800d29a:	f000 fac5 	bl	800d828 <__hi0bits>
 800d29e:	f1c0 0020 	rsb	r0, r0, #32
 800d2a2:	9b05      	ldr	r3, [sp, #20]
 800d2a4:	4418      	add	r0, r3
 800d2a6:	f010 001f 	ands.w	r0, r0, #31
 800d2aa:	f000 8092 	beq.w	800d3d2 <_dtoa_r+0x90a>
 800d2ae:	f1c0 0320 	rsb	r3, r0, #32
 800d2b2:	2b04      	cmp	r3, #4
 800d2b4:	f340 808a 	ble.w	800d3cc <_dtoa_r+0x904>
 800d2b8:	f1c0 001c 	rsb	r0, r0, #28
 800d2bc:	9b04      	ldr	r3, [sp, #16]
 800d2be:	4403      	add	r3, r0
 800d2c0:	9304      	str	r3, [sp, #16]
 800d2c2:	9b05      	ldr	r3, [sp, #20]
 800d2c4:	4403      	add	r3, r0
 800d2c6:	4405      	add	r5, r0
 800d2c8:	9305      	str	r3, [sp, #20]
 800d2ca:	9b04      	ldr	r3, [sp, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	dd07      	ble.n	800d2e0 <_dtoa_r+0x818>
 800d2d0:	ee18 1a10 	vmov	r1, s16
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fc10 	bl	800dafc <__lshift>
 800d2dc:	ee08 0a10 	vmov	s16, r0
 800d2e0:	9b05      	ldr	r3, [sp, #20]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	dd05      	ble.n	800d2f2 <_dtoa_r+0x82a>
 800d2e6:	4631      	mov	r1, r6
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f000 fc06 	bl	800dafc <__lshift>
 800d2f0:	4606      	mov	r6, r0
 800d2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d06e      	beq.n	800d3d6 <_dtoa_r+0x90e>
 800d2f8:	ee18 0a10 	vmov	r0, s16
 800d2fc:	4631      	mov	r1, r6
 800d2fe:	f000 fc6d 	bl	800dbdc <__mcmp>
 800d302:	2800      	cmp	r0, #0
 800d304:	da67      	bge.n	800d3d6 <_dtoa_r+0x90e>
 800d306:	9b00      	ldr	r3, [sp, #0]
 800d308:	3b01      	subs	r3, #1
 800d30a:	ee18 1a10 	vmov	r1, s16
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	220a      	movs	r2, #10
 800d312:	2300      	movs	r3, #0
 800d314:	4620      	mov	r0, r4
 800d316:	f000 fa41 	bl	800d79c <__multadd>
 800d31a:	9b08      	ldr	r3, [sp, #32]
 800d31c:	ee08 0a10 	vmov	s16, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 81b1 	beq.w	800d688 <_dtoa_r+0xbc0>
 800d326:	2300      	movs	r3, #0
 800d328:	4639      	mov	r1, r7
 800d32a:	220a      	movs	r2, #10
 800d32c:	4620      	mov	r0, r4
 800d32e:	f000 fa35 	bl	800d79c <__multadd>
 800d332:	9b02      	ldr	r3, [sp, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	4607      	mov	r7, r0
 800d338:	f300 808e 	bgt.w	800d458 <_dtoa_r+0x990>
 800d33c:	9b06      	ldr	r3, [sp, #24]
 800d33e:	2b02      	cmp	r3, #2
 800d340:	dc51      	bgt.n	800d3e6 <_dtoa_r+0x91e>
 800d342:	e089      	b.n	800d458 <_dtoa_r+0x990>
 800d344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d34a:	e74b      	b.n	800d1e4 <_dtoa_r+0x71c>
 800d34c:	9b03      	ldr	r3, [sp, #12]
 800d34e:	1e5e      	subs	r6, r3, #1
 800d350:	9b07      	ldr	r3, [sp, #28]
 800d352:	42b3      	cmp	r3, r6
 800d354:	bfbf      	itttt	lt
 800d356:	9b07      	ldrlt	r3, [sp, #28]
 800d358:	9607      	strlt	r6, [sp, #28]
 800d35a:	1af2      	sublt	r2, r6, r3
 800d35c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d35e:	bfb6      	itet	lt
 800d360:	189b      	addlt	r3, r3, r2
 800d362:	1b9e      	subge	r6, r3, r6
 800d364:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d366:	9b03      	ldr	r3, [sp, #12]
 800d368:	bfb8      	it	lt
 800d36a:	2600      	movlt	r6, #0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	bfb7      	itett	lt
 800d370:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d374:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d378:	1a9d      	sublt	r5, r3, r2
 800d37a:	2300      	movlt	r3, #0
 800d37c:	e734      	b.n	800d1e8 <_dtoa_r+0x720>
 800d37e:	9e07      	ldr	r6, [sp, #28]
 800d380:	9d04      	ldr	r5, [sp, #16]
 800d382:	9f08      	ldr	r7, [sp, #32]
 800d384:	e73b      	b.n	800d1fe <_dtoa_r+0x736>
 800d386:	9a07      	ldr	r2, [sp, #28]
 800d388:	e767      	b.n	800d25a <_dtoa_r+0x792>
 800d38a:	9b06      	ldr	r3, [sp, #24]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	dc18      	bgt.n	800d3c2 <_dtoa_r+0x8fa>
 800d390:	f1ba 0f00 	cmp.w	sl, #0
 800d394:	d115      	bne.n	800d3c2 <_dtoa_r+0x8fa>
 800d396:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d39a:	b993      	cbnz	r3, 800d3c2 <_dtoa_r+0x8fa>
 800d39c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d3a0:	0d1b      	lsrs	r3, r3, #20
 800d3a2:	051b      	lsls	r3, r3, #20
 800d3a4:	b183      	cbz	r3, 800d3c8 <_dtoa_r+0x900>
 800d3a6:	9b04      	ldr	r3, [sp, #16]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	9b05      	ldr	r3, [sp, #20]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	f04f 0801 	mov.w	r8, #1
 800d3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f47f af6a 	bne.w	800d292 <_dtoa_r+0x7ca>
 800d3be:	2001      	movs	r0, #1
 800d3c0:	e76f      	b.n	800d2a2 <_dtoa_r+0x7da>
 800d3c2:	f04f 0800 	mov.w	r8, #0
 800d3c6:	e7f6      	b.n	800d3b6 <_dtoa_r+0x8ee>
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	e7f4      	b.n	800d3b6 <_dtoa_r+0x8ee>
 800d3cc:	f43f af7d 	beq.w	800d2ca <_dtoa_r+0x802>
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	301c      	adds	r0, #28
 800d3d4:	e772      	b.n	800d2bc <_dtoa_r+0x7f4>
 800d3d6:	9b03      	ldr	r3, [sp, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	dc37      	bgt.n	800d44c <_dtoa_r+0x984>
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	dd34      	ble.n	800d44c <_dtoa_r+0x984>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	9302      	str	r3, [sp, #8]
 800d3e6:	9b02      	ldr	r3, [sp, #8]
 800d3e8:	b96b      	cbnz	r3, 800d406 <_dtoa_r+0x93e>
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	2205      	movs	r2, #5
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f000 f9d4 	bl	800d79c <__multadd>
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	ee18 0a10 	vmov	r0, s16
 800d3fc:	f000 fbee 	bl	800dbdc <__mcmp>
 800d400:	2800      	cmp	r0, #0
 800d402:	f73f adbb 	bgt.w	800cf7c <_dtoa_r+0x4b4>
 800d406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d408:	9d01      	ldr	r5, [sp, #4]
 800d40a:	43db      	mvns	r3, r3
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	f04f 0800 	mov.w	r8, #0
 800d412:	4631      	mov	r1, r6
 800d414:	4620      	mov	r0, r4
 800d416:	f000 f99f 	bl	800d758 <_Bfree>
 800d41a:	2f00      	cmp	r7, #0
 800d41c:	f43f aea4 	beq.w	800d168 <_dtoa_r+0x6a0>
 800d420:	f1b8 0f00 	cmp.w	r8, #0
 800d424:	d005      	beq.n	800d432 <_dtoa_r+0x96a>
 800d426:	45b8      	cmp	r8, r7
 800d428:	d003      	beq.n	800d432 <_dtoa_r+0x96a>
 800d42a:	4641      	mov	r1, r8
 800d42c:	4620      	mov	r0, r4
 800d42e:	f000 f993 	bl	800d758 <_Bfree>
 800d432:	4639      	mov	r1, r7
 800d434:	4620      	mov	r0, r4
 800d436:	f000 f98f 	bl	800d758 <_Bfree>
 800d43a:	e695      	b.n	800d168 <_dtoa_r+0x6a0>
 800d43c:	2600      	movs	r6, #0
 800d43e:	4637      	mov	r7, r6
 800d440:	e7e1      	b.n	800d406 <_dtoa_r+0x93e>
 800d442:	9700      	str	r7, [sp, #0]
 800d444:	4637      	mov	r7, r6
 800d446:	e599      	b.n	800cf7c <_dtoa_r+0x4b4>
 800d448:	40240000 	.word	0x40240000
 800d44c:	9b08      	ldr	r3, [sp, #32]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 80ca 	beq.w	800d5e8 <_dtoa_r+0xb20>
 800d454:	9b03      	ldr	r3, [sp, #12]
 800d456:	9302      	str	r3, [sp, #8]
 800d458:	2d00      	cmp	r5, #0
 800d45a:	dd05      	ble.n	800d468 <_dtoa_r+0x9a0>
 800d45c:	4639      	mov	r1, r7
 800d45e:	462a      	mov	r2, r5
 800d460:	4620      	mov	r0, r4
 800d462:	f000 fb4b 	bl	800dafc <__lshift>
 800d466:	4607      	mov	r7, r0
 800d468:	f1b8 0f00 	cmp.w	r8, #0
 800d46c:	d05b      	beq.n	800d526 <_dtoa_r+0xa5e>
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	4620      	mov	r0, r4
 800d472:	f000 f931 	bl	800d6d8 <_Balloc>
 800d476:	4605      	mov	r5, r0
 800d478:	b928      	cbnz	r0, 800d486 <_dtoa_r+0x9be>
 800d47a:	4b87      	ldr	r3, [pc, #540]	; (800d698 <_dtoa_r+0xbd0>)
 800d47c:	4602      	mov	r2, r0
 800d47e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d482:	f7ff bb3b 	b.w	800cafc <_dtoa_r+0x34>
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	3202      	adds	r2, #2
 800d48a:	0092      	lsls	r2, r2, #2
 800d48c:	f107 010c 	add.w	r1, r7, #12
 800d490:	300c      	adds	r0, #12
 800d492:	f000 f913 	bl	800d6bc <memcpy>
 800d496:	2201      	movs	r2, #1
 800d498:	4629      	mov	r1, r5
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 fb2e 	bl	800dafc <__lshift>
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	f103 0901 	add.w	r9, r3, #1
 800d4a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	9305      	str	r3, [sp, #20]
 800d4ae:	f00a 0301 	and.w	r3, sl, #1
 800d4b2:	46b8      	mov	r8, r7
 800d4b4:	9304      	str	r3, [sp, #16]
 800d4b6:	4607      	mov	r7, r0
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	ee18 0a10 	vmov	r0, s16
 800d4be:	f7ff fa75 	bl	800c9ac <quorem>
 800d4c2:	4641      	mov	r1, r8
 800d4c4:	9002      	str	r0, [sp, #8]
 800d4c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d4ca:	ee18 0a10 	vmov	r0, s16
 800d4ce:	f000 fb85 	bl	800dbdc <__mcmp>
 800d4d2:	463a      	mov	r2, r7
 800d4d4:	9003      	str	r0, [sp, #12]
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f000 fb9b 	bl	800dc14 <__mdiff>
 800d4de:	68c2      	ldr	r2, [r0, #12]
 800d4e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	bb02      	cbnz	r2, 800d52a <_dtoa_r+0xa62>
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	ee18 0a10 	vmov	r0, s16
 800d4ee:	f000 fb75 	bl	800dbdc <__mcmp>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	9207      	str	r2, [sp, #28]
 800d4fa:	f000 f92d 	bl	800d758 <_Bfree>
 800d4fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d502:	ea43 0102 	orr.w	r1, r3, r2
 800d506:	9b04      	ldr	r3, [sp, #16]
 800d508:	430b      	orrs	r3, r1
 800d50a:	464d      	mov	r5, r9
 800d50c:	d10f      	bne.n	800d52e <_dtoa_r+0xa66>
 800d50e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d512:	d02a      	beq.n	800d56a <_dtoa_r+0xaa2>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	dd02      	ble.n	800d520 <_dtoa_r+0xa58>
 800d51a:	9b02      	ldr	r3, [sp, #8]
 800d51c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d520:	f88b a000 	strb.w	sl, [fp]
 800d524:	e775      	b.n	800d412 <_dtoa_r+0x94a>
 800d526:	4638      	mov	r0, r7
 800d528:	e7ba      	b.n	800d4a0 <_dtoa_r+0x9d8>
 800d52a:	2201      	movs	r2, #1
 800d52c:	e7e2      	b.n	800d4f4 <_dtoa_r+0xa2c>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	db04      	blt.n	800d53e <_dtoa_r+0xa76>
 800d534:	9906      	ldr	r1, [sp, #24]
 800d536:	430b      	orrs	r3, r1
 800d538:	9904      	ldr	r1, [sp, #16]
 800d53a:	430b      	orrs	r3, r1
 800d53c:	d122      	bne.n	800d584 <_dtoa_r+0xabc>
 800d53e:	2a00      	cmp	r2, #0
 800d540:	ddee      	ble.n	800d520 <_dtoa_r+0xa58>
 800d542:	ee18 1a10 	vmov	r1, s16
 800d546:	2201      	movs	r2, #1
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 fad7 	bl	800dafc <__lshift>
 800d54e:	4631      	mov	r1, r6
 800d550:	ee08 0a10 	vmov	s16, r0
 800d554:	f000 fb42 	bl	800dbdc <__mcmp>
 800d558:	2800      	cmp	r0, #0
 800d55a:	dc03      	bgt.n	800d564 <_dtoa_r+0xa9c>
 800d55c:	d1e0      	bne.n	800d520 <_dtoa_r+0xa58>
 800d55e:	f01a 0f01 	tst.w	sl, #1
 800d562:	d0dd      	beq.n	800d520 <_dtoa_r+0xa58>
 800d564:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d568:	d1d7      	bne.n	800d51a <_dtoa_r+0xa52>
 800d56a:	2339      	movs	r3, #57	; 0x39
 800d56c:	f88b 3000 	strb.w	r3, [fp]
 800d570:	462b      	mov	r3, r5
 800d572:	461d      	mov	r5, r3
 800d574:	3b01      	subs	r3, #1
 800d576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d57a:	2a39      	cmp	r2, #57	; 0x39
 800d57c:	d071      	beq.n	800d662 <_dtoa_r+0xb9a>
 800d57e:	3201      	adds	r2, #1
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	e746      	b.n	800d412 <_dtoa_r+0x94a>
 800d584:	2a00      	cmp	r2, #0
 800d586:	dd07      	ble.n	800d598 <_dtoa_r+0xad0>
 800d588:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d58c:	d0ed      	beq.n	800d56a <_dtoa_r+0xaa2>
 800d58e:	f10a 0301 	add.w	r3, sl, #1
 800d592:	f88b 3000 	strb.w	r3, [fp]
 800d596:	e73c      	b.n	800d412 <_dtoa_r+0x94a>
 800d598:	9b05      	ldr	r3, [sp, #20]
 800d59a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d59e:	4599      	cmp	r9, r3
 800d5a0:	d047      	beq.n	800d632 <_dtoa_r+0xb6a>
 800d5a2:	ee18 1a10 	vmov	r1, s16
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	220a      	movs	r2, #10
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 f8f6 	bl	800d79c <__multadd>
 800d5b0:	45b8      	cmp	r8, r7
 800d5b2:	ee08 0a10 	vmov	s16, r0
 800d5b6:	f04f 0300 	mov.w	r3, #0
 800d5ba:	f04f 020a 	mov.w	r2, #10
 800d5be:	4641      	mov	r1, r8
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	d106      	bne.n	800d5d2 <_dtoa_r+0xb0a>
 800d5c4:	f000 f8ea 	bl	800d79c <__multadd>
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	4607      	mov	r7, r0
 800d5cc:	f109 0901 	add.w	r9, r9, #1
 800d5d0:	e772      	b.n	800d4b8 <_dtoa_r+0x9f0>
 800d5d2:	f000 f8e3 	bl	800d79c <__multadd>
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	4680      	mov	r8, r0
 800d5da:	2300      	movs	r3, #0
 800d5dc:	220a      	movs	r2, #10
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f000 f8dc 	bl	800d79c <__multadd>
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	e7f1      	b.n	800d5cc <_dtoa_r+0xb04>
 800d5e8:	9b03      	ldr	r3, [sp, #12]
 800d5ea:	9302      	str	r3, [sp, #8]
 800d5ec:	9d01      	ldr	r5, [sp, #4]
 800d5ee:	ee18 0a10 	vmov	r0, s16
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	f7ff f9da 	bl	800c9ac <quorem>
 800d5f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5fc:	9b01      	ldr	r3, [sp, #4]
 800d5fe:	f805 ab01 	strb.w	sl, [r5], #1
 800d602:	1aea      	subs	r2, r5, r3
 800d604:	9b02      	ldr	r3, [sp, #8]
 800d606:	4293      	cmp	r3, r2
 800d608:	dd09      	ble.n	800d61e <_dtoa_r+0xb56>
 800d60a:	ee18 1a10 	vmov	r1, s16
 800d60e:	2300      	movs	r3, #0
 800d610:	220a      	movs	r2, #10
 800d612:	4620      	mov	r0, r4
 800d614:	f000 f8c2 	bl	800d79c <__multadd>
 800d618:	ee08 0a10 	vmov	s16, r0
 800d61c:	e7e7      	b.n	800d5ee <_dtoa_r+0xb26>
 800d61e:	9b02      	ldr	r3, [sp, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	bfc8      	it	gt
 800d624:	461d      	movgt	r5, r3
 800d626:	9b01      	ldr	r3, [sp, #4]
 800d628:	bfd8      	it	le
 800d62a:	2501      	movle	r5, #1
 800d62c:	441d      	add	r5, r3
 800d62e:	f04f 0800 	mov.w	r8, #0
 800d632:	ee18 1a10 	vmov	r1, s16
 800d636:	2201      	movs	r2, #1
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 fa5f 	bl	800dafc <__lshift>
 800d63e:	4631      	mov	r1, r6
 800d640:	ee08 0a10 	vmov	s16, r0
 800d644:	f000 faca 	bl	800dbdc <__mcmp>
 800d648:	2800      	cmp	r0, #0
 800d64a:	dc91      	bgt.n	800d570 <_dtoa_r+0xaa8>
 800d64c:	d102      	bne.n	800d654 <_dtoa_r+0xb8c>
 800d64e:	f01a 0f01 	tst.w	sl, #1
 800d652:	d18d      	bne.n	800d570 <_dtoa_r+0xaa8>
 800d654:	462b      	mov	r3, r5
 800d656:	461d      	mov	r5, r3
 800d658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d65c:	2a30      	cmp	r2, #48	; 0x30
 800d65e:	d0fa      	beq.n	800d656 <_dtoa_r+0xb8e>
 800d660:	e6d7      	b.n	800d412 <_dtoa_r+0x94a>
 800d662:	9a01      	ldr	r2, [sp, #4]
 800d664:	429a      	cmp	r2, r3
 800d666:	d184      	bne.n	800d572 <_dtoa_r+0xaaa>
 800d668:	9b00      	ldr	r3, [sp, #0]
 800d66a:	3301      	adds	r3, #1
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	2331      	movs	r3, #49	; 0x31
 800d670:	7013      	strb	r3, [r2, #0]
 800d672:	e6ce      	b.n	800d412 <_dtoa_r+0x94a>
 800d674:	4b09      	ldr	r3, [pc, #36]	; (800d69c <_dtoa_r+0xbd4>)
 800d676:	f7ff ba95 	b.w	800cba4 <_dtoa_r+0xdc>
 800d67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f47f aa6e 	bne.w	800cb5e <_dtoa_r+0x96>
 800d682:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <_dtoa_r+0xbd8>)
 800d684:	f7ff ba8e 	b.w	800cba4 <_dtoa_r+0xdc>
 800d688:	9b02      	ldr	r3, [sp, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dcae      	bgt.n	800d5ec <_dtoa_r+0xb24>
 800d68e:	9b06      	ldr	r3, [sp, #24]
 800d690:	2b02      	cmp	r3, #2
 800d692:	f73f aea8 	bgt.w	800d3e6 <_dtoa_r+0x91e>
 800d696:	e7a9      	b.n	800d5ec <_dtoa_r+0xb24>
 800d698:	08011967 	.word	0x08011967
 800d69c:	080118c4 	.word	0x080118c4
 800d6a0:	080118e8 	.word	0x080118e8

0800d6a4 <_localeconv_r>:
 800d6a4:	4800      	ldr	r0, [pc, #0]	; (800d6a8 <_localeconv_r+0x4>)
 800d6a6:	4770      	bx	lr
 800d6a8:	200002d4 	.word	0x200002d4

0800d6ac <malloc>:
 800d6ac:	4b02      	ldr	r3, [pc, #8]	; (800d6b8 <malloc+0xc>)
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	6818      	ldr	r0, [r3, #0]
 800d6b2:	f000 bc17 	b.w	800dee4 <_malloc_r>
 800d6b6:	bf00      	nop
 800d6b8:	20000180 	.word	0x20000180

0800d6bc <memcpy>:
 800d6bc:	440a      	add	r2, r1
 800d6be:	4291      	cmp	r1, r2
 800d6c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6c4:	d100      	bne.n	800d6c8 <memcpy+0xc>
 800d6c6:	4770      	bx	lr
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6d2:	4291      	cmp	r1, r2
 800d6d4:	d1f9      	bne.n	800d6ca <memcpy+0xe>
 800d6d6:	bd10      	pop	{r4, pc}

0800d6d8 <_Balloc>:
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6dc:	4604      	mov	r4, r0
 800d6de:	460d      	mov	r5, r1
 800d6e0:	b976      	cbnz	r6, 800d700 <_Balloc+0x28>
 800d6e2:	2010      	movs	r0, #16
 800d6e4:	f7ff ffe2 	bl	800d6ac <malloc>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	6260      	str	r0, [r4, #36]	; 0x24
 800d6ec:	b920      	cbnz	r0, 800d6f8 <_Balloc+0x20>
 800d6ee:	4b18      	ldr	r3, [pc, #96]	; (800d750 <_Balloc+0x78>)
 800d6f0:	4818      	ldr	r0, [pc, #96]	; (800d754 <_Balloc+0x7c>)
 800d6f2:	2166      	movs	r1, #102	; 0x66
 800d6f4:	f000 fdd6 	bl	800e2a4 <__assert_func>
 800d6f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6fc:	6006      	str	r6, [r0, #0]
 800d6fe:	60c6      	str	r6, [r0, #12]
 800d700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d702:	68f3      	ldr	r3, [r6, #12]
 800d704:	b183      	cbz	r3, 800d728 <_Balloc+0x50>
 800d706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d70e:	b9b8      	cbnz	r0, 800d740 <_Balloc+0x68>
 800d710:	2101      	movs	r1, #1
 800d712:	fa01 f605 	lsl.w	r6, r1, r5
 800d716:	1d72      	adds	r2, r6, #5
 800d718:	0092      	lsls	r2, r2, #2
 800d71a:	4620      	mov	r0, r4
 800d71c:	f000 fb60 	bl	800dde0 <_calloc_r>
 800d720:	b160      	cbz	r0, 800d73c <_Balloc+0x64>
 800d722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d726:	e00e      	b.n	800d746 <_Balloc+0x6e>
 800d728:	2221      	movs	r2, #33	; 0x21
 800d72a:	2104      	movs	r1, #4
 800d72c:	4620      	mov	r0, r4
 800d72e:	f000 fb57 	bl	800dde0 <_calloc_r>
 800d732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d734:	60f0      	str	r0, [r6, #12]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e4      	bne.n	800d706 <_Balloc+0x2e>
 800d73c:	2000      	movs	r0, #0
 800d73e:	bd70      	pop	{r4, r5, r6, pc}
 800d740:	6802      	ldr	r2, [r0, #0]
 800d742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d746:	2300      	movs	r3, #0
 800d748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d74c:	e7f7      	b.n	800d73e <_Balloc+0x66>
 800d74e:	bf00      	nop
 800d750:	080118f5 	.word	0x080118f5
 800d754:	08011978 	.word	0x08011978

0800d758 <_Bfree>:
 800d758:	b570      	push	{r4, r5, r6, lr}
 800d75a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d75c:	4605      	mov	r5, r0
 800d75e:	460c      	mov	r4, r1
 800d760:	b976      	cbnz	r6, 800d780 <_Bfree+0x28>
 800d762:	2010      	movs	r0, #16
 800d764:	f7ff ffa2 	bl	800d6ac <malloc>
 800d768:	4602      	mov	r2, r0
 800d76a:	6268      	str	r0, [r5, #36]	; 0x24
 800d76c:	b920      	cbnz	r0, 800d778 <_Bfree+0x20>
 800d76e:	4b09      	ldr	r3, [pc, #36]	; (800d794 <_Bfree+0x3c>)
 800d770:	4809      	ldr	r0, [pc, #36]	; (800d798 <_Bfree+0x40>)
 800d772:	218a      	movs	r1, #138	; 0x8a
 800d774:	f000 fd96 	bl	800e2a4 <__assert_func>
 800d778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d77c:	6006      	str	r6, [r0, #0]
 800d77e:	60c6      	str	r6, [r0, #12]
 800d780:	b13c      	cbz	r4, 800d792 <_Bfree+0x3a>
 800d782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d784:	6862      	ldr	r2, [r4, #4]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d78c:	6021      	str	r1, [r4, #0]
 800d78e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d792:	bd70      	pop	{r4, r5, r6, pc}
 800d794:	080118f5 	.word	0x080118f5
 800d798:	08011978 	.word	0x08011978

0800d79c <__multadd>:
 800d79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a0:	690d      	ldr	r5, [r1, #16]
 800d7a2:	4607      	mov	r7, r0
 800d7a4:	460c      	mov	r4, r1
 800d7a6:	461e      	mov	r6, r3
 800d7a8:	f101 0c14 	add.w	ip, r1, #20
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f8dc 3000 	ldr.w	r3, [ip]
 800d7b2:	b299      	uxth	r1, r3
 800d7b4:	fb02 6101 	mla	r1, r2, r1, r6
 800d7b8:	0c1e      	lsrs	r6, r3, #16
 800d7ba:	0c0b      	lsrs	r3, r1, #16
 800d7bc:	fb02 3306 	mla	r3, r2, r6, r3
 800d7c0:	b289      	uxth	r1, r1
 800d7c2:	3001      	adds	r0, #1
 800d7c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7c8:	4285      	cmp	r5, r0
 800d7ca:	f84c 1b04 	str.w	r1, [ip], #4
 800d7ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7d2:	dcec      	bgt.n	800d7ae <__multadd+0x12>
 800d7d4:	b30e      	cbz	r6, 800d81a <__multadd+0x7e>
 800d7d6:	68a3      	ldr	r3, [r4, #8]
 800d7d8:	42ab      	cmp	r3, r5
 800d7da:	dc19      	bgt.n	800d810 <__multadd+0x74>
 800d7dc:	6861      	ldr	r1, [r4, #4]
 800d7de:	4638      	mov	r0, r7
 800d7e0:	3101      	adds	r1, #1
 800d7e2:	f7ff ff79 	bl	800d6d8 <_Balloc>
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	b928      	cbnz	r0, 800d7f6 <__multadd+0x5a>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <__multadd+0x84>)
 800d7ee:	480d      	ldr	r0, [pc, #52]	; (800d824 <__multadd+0x88>)
 800d7f0:	21b5      	movs	r1, #181	; 0xb5
 800d7f2:	f000 fd57 	bl	800e2a4 <__assert_func>
 800d7f6:	6922      	ldr	r2, [r4, #16]
 800d7f8:	3202      	adds	r2, #2
 800d7fa:	f104 010c 	add.w	r1, r4, #12
 800d7fe:	0092      	lsls	r2, r2, #2
 800d800:	300c      	adds	r0, #12
 800d802:	f7ff ff5b 	bl	800d6bc <memcpy>
 800d806:	4621      	mov	r1, r4
 800d808:	4638      	mov	r0, r7
 800d80a:	f7ff ffa5 	bl	800d758 <_Bfree>
 800d80e:	4644      	mov	r4, r8
 800d810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d814:	3501      	adds	r5, #1
 800d816:	615e      	str	r6, [r3, #20]
 800d818:	6125      	str	r5, [r4, #16]
 800d81a:	4620      	mov	r0, r4
 800d81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d820:	08011967 	.word	0x08011967
 800d824:	08011978 	.word	0x08011978

0800d828 <__hi0bits>:
 800d828:	0c03      	lsrs	r3, r0, #16
 800d82a:	041b      	lsls	r3, r3, #16
 800d82c:	b9d3      	cbnz	r3, 800d864 <__hi0bits+0x3c>
 800d82e:	0400      	lsls	r0, r0, #16
 800d830:	2310      	movs	r3, #16
 800d832:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d836:	bf04      	itt	eq
 800d838:	0200      	lsleq	r0, r0, #8
 800d83a:	3308      	addeq	r3, #8
 800d83c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d840:	bf04      	itt	eq
 800d842:	0100      	lsleq	r0, r0, #4
 800d844:	3304      	addeq	r3, #4
 800d846:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d84a:	bf04      	itt	eq
 800d84c:	0080      	lsleq	r0, r0, #2
 800d84e:	3302      	addeq	r3, #2
 800d850:	2800      	cmp	r0, #0
 800d852:	db05      	blt.n	800d860 <__hi0bits+0x38>
 800d854:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d858:	f103 0301 	add.w	r3, r3, #1
 800d85c:	bf08      	it	eq
 800d85e:	2320      	moveq	r3, #32
 800d860:	4618      	mov	r0, r3
 800d862:	4770      	bx	lr
 800d864:	2300      	movs	r3, #0
 800d866:	e7e4      	b.n	800d832 <__hi0bits+0xa>

0800d868 <__lo0bits>:
 800d868:	6803      	ldr	r3, [r0, #0]
 800d86a:	f013 0207 	ands.w	r2, r3, #7
 800d86e:	4601      	mov	r1, r0
 800d870:	d00b      	beq.n	800d88a <__lo0bits+0x22>
 800d872:	07da      	lsls	r2, r3, #31
 800d874:	d423      	bmi.n	800d8be <__lo0bits+0x56>
 800d876:	0798      	lsls	r0, r3, #30
 800d878:	bf49      	itett	mi
 800d87a:	085b      	lsrmi	r3, r3, #1
 800d87c:	089b      	lsrpl	r3, r3, #2
 800d87e:	2001      	movmi	r0, #1
 800d880:	600b      	strmi	r3, [r1, #0]
 800d882:	bf5c      	itt	pl
 800d884:	600b      	strpl	r3, [r1, #0]
 800d886:	2002      	movpl	r0, #2
 800d888:	4770      	bx	lr
 800d88a:	b298      	uxth	r0, r3
 800d88c:	b9a8      	cbnz	r0, 800d8ba <__lo0bits+0x52>
 800d88e:	0c1b      	lsrs	r3, r3, #16
 800d890:	2010      	movs	r0, #16
 800d892:	b2da      	uxtb	r2, r3
 800d894:	b90a      	cbnz	r2, 800d89a <__lo0bits+0x32>
 800d896:	3008      	adds	r0, #8
 800d898:	0a1b      	lsrs	r3, r3, #8
 800d89a:	071a      	lsls	r2, r3, #28
 800d89c:	bf04      	itt	eq
 800d89e:	091b      	lsreq	r3, r3, #4
 800d8a0:	3004      	addeq	r0, #4
 800d8a2:	079a      	lsls	r2, r3, #30
 800d8a4:	bf04      	itt	eq
 800d8a6:	089b      	lsreq	r3, r3, #2
 800d8a8:	3002      	addeq	r0, #2
 800d8aa:	07da      	lsls	r2, r3, #31
 800d8ac:	d403      	bmi.n	800d8b6 <__lo0bits+0x4e>
 800d8ae:	085b      	lsrs	r3, r3, #1
 800d8b0:	f100 0001 	add.w	r0, r0, #1
 800d8b4:	d005      	beq.n	800d8c2 <__lo0bits+0x5a>
 800d8b6:	600b      	str	r3, [r1, #0]
 800d8b8:	4770      	bx	lr
 800d8ba:	4610      	mov	r0, r2
 800d8bc:	e7e9      	b.n	800d892 <__lo0bits+0x2a>
 800d8be:	2000      	movs	r0, #0
 800d8c0:	4770      	bx	lr
 800d8c2:	2020      	movs	r0, #32
 800d8c4:	4770      	bx	lr
	...

0800d8c8 <__i2b>:
 800d8c8:	b510      	push	{r4, lr}
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	f7ff ff03 	bl	800d6d8 <_Balloc>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	b928      	cbnz	r0, 800d8e2 <__i2b+0x1a>
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <__i2b+0x24>)
 800d8d8:	4805      	ldr	r0, [pc, #20]	; (800d8f0 <__i2b+0x28>)
 800d8da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8de:	f000 fce1 	bl	800e2a4 <__assert_func>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	6144      	str	r4, [r0, #20]
 800d8e6:	6103      	str	r3, [r0, #16]
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	bf00      	nop
 800d8ec:	08011967 	.word	0x08011967
 800d8f0:	08011978 	.word	0x08011978

0800d8f4 <__multiply>:
 800d8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f8:	4691      	mov	r9, r2
 800d8fa:	690a      	ldr	r2, [r1, #16]
 800d8fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d900:	429a      	cmp	r2, r3
 800d902:	bfb8      	it	lt
 800d904:	460b      	movlt	r3, r1
 800d906:	460c      	mov	r4, r1
 800d908:	bfbc      	itt	lt
 800d90a:	464c      	movlt	r4, r9
 800d90c:	4699      	movlt	r9, r3
 800d90e:	6927      	ldr	r7, [r4, #16]
 800d910:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	6861      	ldr	r1, [r4, #4]
 800d918:	eb07 060a 	add.w	r6, r7, sl
 800d91c:	42b3      	cmp	r3, r6
 800d91e:	b085      	sub	sp, #20
 800d920:	bfb8      	it	lt
 800d922:	3101      	addlt	r1, #1
 800d924:	f7ff fed8 	bl	800d6d8 <_Balloc>
 800d928:	b930      	cbnz	r0, 800d938 <__multiply+0x44>
 800d92a:	4602      	mov	r2, r0
 800d92c:	4b44      	ldr	r3, [pc, #272]	; (800da40 <__multiply+0x14c>)
 800d92e:	4845      	ldr	r0, [pc, #276]	; (800da44 <__multiply+0x150>)
 800d930:	f240 115d 	movw	r1, #349	; 0x15d
 800d934:	f000 fcb6 	bl	800e2a4 <__assert_func>
 800d938:	f100 0514 	add.w	r5, r0, #20
 800d93c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d940:	462b      	mov	r3, r5
 800d942:	2200      	movs	r2, #0
 800d944:	4543      	cmp	r3, r8
 800d946:	d321      	bcc.n	800d98c <__multiply+0x98>
 800d948:	f104 0314 	add.w	r3, r4, #20
 800d94c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d950:	f109 0314 	add.w	r3, r9, #20
 800d954:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d958:	9202      	str	r2, [sp, #8]
 800d95a:	1b3a      	subs	r2, r7, r4
 800d95c:	3a15      	subs	r2, #21
 800d95e:	f022 0203 	bic.w	r2, r2, #3
 800d962:	3204      	adds	r2, #4
 800d964:	f104 0115 	add.w	r1, r4, #21
 800d968:	428f      	cmp	r7, r1
 800d96a:	bf38      	it	cc
 800d96c:	2204      	movcc	r2, #4
 800d96e:	9201      	str	r2, [sp, #4]
 800d970:	9a02      	ldr	r2, [sp, #8]
 800d972:	9303      	str	r3, [sp, #12]
 800d974:	429a      	cmp	r2, r3
 800d976:	d80c      	bhi.n	800d992 <__multiply+0x9e>
 800d978:	2e00      	cmp	r6, #0
 800d97a:	dd03      	ble.n	800d984 <__multiply+0x90>
 800d97c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d980:	2b00      	cmp	r3, #0
 800d982:	d05a      	beq.n	800da3a <__multiply+0x146>
 800d984:	6106      	str	r6, [r0, #16]
 800d986:	b005      	add	sp, #20
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98c:	f843 2b04 	str.w	r2, [r3], #4
 800d990:	e7d8      	b.n	800d944 <__multiply+0x50>
 800d992:	f8b3 a000 	ldrh.w	sl, [r3]
 800d996:	f1ba 0f00 	cmp.w	sl, #0
 800d99a:	d024      	beq.n	800d9e6 <__multiply+0xf2>
 800d99c:	f104 0e14 	add.w	lr, r4, #20
 800d9a0:	46a9      	mov	r9, r5
 800d9a2:	f04f 0c00 	mov.w	ip, #0
 800d9a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d9aa:	f8d9 1000 	ldr.w	r1, [r9]
 800d9ae:	fa1f fb82 	uxth.w	fp, r2
 800d9b2:	b289      	uxth	r1, r1
 800d9b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d9b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d9bc:	f8d9 2000 	ldr.w	r2, [r9]
 800d9c0:	4461      	add	r1, ip
 800d9c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d9ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9ce:	b289      	uxth	r1, r1
 800d9d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9d4:	4577      	cmp	r7, lr
 800d9d6:	f849 1b04 	str.w	r1, [r9], #4
 800d9da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9de:	d8e2      	bhi.n	800d9a6 <__multiply+0xb2>
 800d9e0:	9a01      	ldr	r2, [sp, #4]
 800d9e2:	f845 c002 	str.w	ip, [r5, r2]
 800d9e6:	9a03      	ldr	r2, [sp, #12]
 800d9e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	f1b9 0f00 	cmp.w	r9, #0
 800d9f2:	d020      	beq.n	800da36 <__multiply+0x142>
 800d9f4:	6829      	ldr	r1, [r5, #0]
 800d9f6:	f104 0c14 	add.w	ip, r4, #20
 800d9fa:	46ae      	mov	lr, r5
 800d9fc:	f04f 0a00 	mov.w	sl, #0
 800da00:	f8bc b000 	ldrh.w	fp, [ip]
 800da04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da08:	fb09 220b 	mla	r2, r9, fp, r2
 800da0c:	4492      	add	sl, r2
 800da0e:	b289      	uxth	r1, r1
 800da10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da14:	f84e 1b04 	str.w	r1, [lr], #4
 800da18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da1c:	f8be 1000 	ldrh.w	r1, [lr]
 800da20:	0c12      	lsrs	r2, r2, #16
 800da22:	fb09 1102 	mla	r1, r9, r2, r1
 800da26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da2a:	4567      	cmp	r7, ip
 800da2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da30:	d8e6      	bhi.n	800da00 <__multiply+0x10c>
 800da32:	9a01      	ldr	r2, [sp, #4]
 800da34:	50a9      	str	r1, [r5, r2]
 800da36:	3504      	adds	r5, #4
 800da38:	e79a      	b.n	800d970 <__multiply+0x7c>
 800da3a:	3e01      	subs	r6, #1
 800da3c:	e79c      	b.n	800d978 <__multiply+0x84>
 800da3e:	bf00      	nop
 800da40:	08011967 	.word	0x08011967
 800da44:	08011978 	.word	0x08011978

0800da48 <__pow5mult>:
 800da48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da4c:	4615      	mov	r5, r2
 800da4e:	f012 0203 	ands.w	r2, r2, #3
 800da52:	4606      	mov	r6, r0
 800da54:	460f      	mov	r7, r1
 800da56:	d007      	beq.n	800da68 <__pow5mult+0x20>
 800da58:	4c25      	ldr	r4, [pc, #148]	; (800daf0 <__pow5mult+0xa8>)
 800da5a:	3a01      	subs	r2, #1
 800da5c:	2300      	movs	r3, #0
 800da5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da62:	f7ff fe9b 	bl	800d79c <__multadd>
 800da66:	4607      	mov	r7, r0
 800da68:	10ad      	asrs	r5, r5, #2
 800da6a:	d03d      	beq.n	800dae8 <__pow5mult+0xa0>
 800da6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da6e:	b97c      	cbnz	r4, 800da90 <__pow5mult+0x48>
 800da70:	2010      	movs	r0, #16
 800da72:	f7ff fe1b 	bl	800d6ac <malloc>
 800da76:	4602      	mov	r2, r0
 800da78:	6270      	str	r0, [r6, #36]	; 0x24
 800da7a:	b928      	cbnz	r0, 800da88 <__pow5mult+0x40>
 800da7c:	4b1d      	ldr	r3, [pc, #116]	; (800daf4 <__pow5mult+0xac>)
 800da7e:	481e      	ldr	r0, [pc, #120]	; (800daf8 <__pow5mult+0xb0>)
 800da80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da84:	f000 fc0e 	bl	800e2a4 <__assert_func>
 800da88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da8c:	6004      	str	r4, [r0, #0]
 800da8e:	60c4      	str	r4, [r0, #12]
 800da90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da98:	b94c      	cbnz	r4, 800daae <__pow5mult+0x66>
 800da9a:	f240 2171 	movw	r1, #625	; 0x271
 800da9e:	4630      	mov	r0, r6
 800daa0:	f7ff ff12 	bl	800d8c8 <__i2b>
 800daa4:	2300      	movs	r3, #0
 800daa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800daaa:	4604      	mov	r4, r0
 800daac:	6003      	str	r3, [r0, #0]
 800daae:	f04f 0900 	mov.w	r9, #0
 800dab2:	07eb      	lsls	r3, r5, #31
 800dab4:	d50a      	bpl.n	800dacc <__pow5mult+0x84>
 800dab6:	4639      	mov	r1, r7
 800dab8:	4622      	mov	r2, r4
 800daba:	4630      	mov	r0, r6
 800dabc:	f7ff ff1a 	bl	800d8f4 <__multiply>
 800dac0:	4639      	mov	r1, r7
 800dac2:	4680      	mov	r8, r0
 800dac4:	4630      	mov	r0, r6
 800dac6:	f7ff fe47 	bl	800d758 <_Bfree>
 800daca:	4647      	mov	r7, r8
 800dacc:	106d      	asrs	r5, r5, #1
 800dace:	d00b      	beq.n	800dae8 <__pow5mult+0xa0>
 800dad0:	6820      	ldr	r0, [r4, #0]
 800dad2:	b938      	cbnz	r0, 800dae4 <__pow5mult+0x9c>
 800dad4:	4622      	mov	r2, r4
 800dad6:	4621      	mov	r1, r4
 800dad8:	4630      	mov	r0, r6
 800dada:	f7ff ff0b 	bl	800d8f4 <__multiply>
 800dade:	6020      	str	r0, [r4, #0]
 800dae0:	f8c0 9000 	str.w	r9, [r0]
 800dae4:	4604      	mov	r4, r0
 800dae6:	e7e4      	b.n	800dab2 <__pow5mult+0x6a>
 800dae8:	4638      	mov	r0, r7
 800daea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daee:	bf00      	nop
 800daf0:	08011ac8 	.word	0x08011ac8
 800daf4:	080118f5 	.word	0x080118f5
 800daf8:	08011978 	.word	0x08011978

0800dafc <__lshift>:
 800dafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db00:	460c      	mov	r4, r1
 800db02:	6849      	ldr	r1, [r1, #4]
 800db04:	6923      	ldr	r3, [r4, #16]
 800db06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db0a:	68a3      	ldr	r3, [r4, #8]
 800db0c:	4607      	mov	r7, r0
 800db0e:	4691      	mov	r9, r2
 800db10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db14:	f108 0601 	add.w	r6, r8, #1
 800db18:	42b3      	cmp	r3, r6
 800db1a:	db0b      	blt.n	800db34 <__lshift+0x38>
 800db1c:	4638      	mov	r0, r7
 800db1e:	f7ff fddb 	bl	800d6d8 <_Balloc>
 800db22:	4605      	mov	r5, r0
 800db24:	b948      	cbnz	r0, 800db3a <__lshift+0x3e>
 800db26:	4602      	mov	r2, r0
 800db28:	4b2a      	ldr	r3, [pc, #168]	; (800dbd4 <__lshift+0xd8>)
 800db2a:	482b      	ldr	r0, [pc, #172]	; (800dbd8 <__lshift+0xdc>)
 800db2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db30:	f000 fbb8 	bl	800e2a4 <__assert_func>
 800db34:	3101      	adds	r1, #1
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	e7ee      	b.n	800db18 <__lshift+0x1c>
 800db3a:	2300      	movs	r3, #0
 800db3c:	f100 0114 	add.w	r1, r0, #20
 800db40:	f100 0210 	add.w	r2, r0, #16
 800db44:	4618      	mov	r0, r3
 800db46:	4553      	cmp	r3, sl
 800db48:	db37      	blt.n	800dbba <__lshift+0xbe>
 800db4a:	6920      	ldr	r0, [r4, #16]
 800db4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db50:	f104 0314 	add.w	r3, r4, #20
 800db54:	f019 091f 	ands.w	r9, r9, #31
 800db58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db60:	d02f      	beq.n	800dbc2 <__lshift+0xc6>
 800db62:	f1c9 0e20 	rsb	lr, r9, #32
 800db66:	468a      	mov	sl, r1
 800db68:	f04f 0c00 	mov.w	ip, #0
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	fa02 f209 	lsl.w	r2, r2, r9
 800db72:	ea42 020c 	orr.w	r2, r2, ip
 800db76:	f84a 2b04 	str.w	r2, [sl], #4
 800db7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db7e:	4298      	cmp	r0, r3
 800db80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db84:	d8f2      	bhi.n	800db6c <__lshift+0x70>
 800db86:	1b03      	subs	r3, r0, r4
 800db88:	3b15      	subs	r3, #21
 800db8a:	f023 0303 	bic.w	r3, r3, #3
 800db8e:	3304      	adds	r3, #4
 800db90:	f104 0215 	add.w	r2, r4, #21
 800db94:	4290      	cmp	r0, r2
 800db96:	bf38      	it	cc
 800db98:	2304      	movcc	r3, #4
 800db9a:	f841 c003 	str.w	ip, [r1, r3]
 800db9e:	f1bc 0f00 	cmp.w	ip, #0
 800dba2:	d001      	beq.n	800dba8 <__lshift+0xac>
 800dba4:	f108 0602 	add.w	r6, r8, #2
 800dba8:	3e01      	subs	r6, #1
 800dbaa:	4638      	mov	r0, r7
 800dbac:	612e      	str	r6, [r5, #16]
 800dbae:	4621      	mov	r1, r4
 800dbb0:	f7ff fdd2 	bl	800d758 <_Bfree>
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbba:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	e7c1      	b.n	800db46 <__lshift+0x4a>
 800dbc2:	3904      	subs	r1, #4
 800dbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbcc:	4298      	cmp	r0, r3
 800dbce:	d8f9      	bhi.n	800dbc4 <__lshift+0xc8>
 800dbd0:	e7ea      	b.n	800dba8 <__lshift+0xac>
 800dbd2:	bf00      	nop
 800dbd4:	08011967 	.word	0x08011967
 800dbd8:	08011978 	.word	0x08011978

0800dbdc <__mcmp>:
 800dbdc:	b530      	push	{r4, r5, lr}
 800dbde:	6902      	ldr	r2, [r0, #16]
 800dbe0:	690c      	ldr	r4, [r1, #16]
 800dbe2:	1b12      	subs	r2, r2, r4
 800dbe4:	d10e      	bne.n	800dc04 <__mcmp+0x28>
 800dbe6:	f100 0314 	add.w	r3, r0, #20
 800dbea:	3114      	adds	r1, #20
 800dbec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbfc:	42a5      	cmp	r5, r4
 800dbfe:	d003      	beq.n	800dc08 <__mcmp+0x2c>
 800dc00:	d305      	bcc.n	800dc0e <__mcmp+0x32>
 800dc02:	2201      	movs	r2, #1
 800dc04:	4610      	mov	r0, r2
 800dc06:	bd30      	pop	{r4, r5, pc}
 800dc08:	4283      	cmp	r3, r0
 800dc0a:	d3f3      	bcc.n	800dbf4 <__mcmp+0x18>
 800dc0c:	e7fa      	b.n	800dc04 <__mcmp+0x28>
 800dc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc12:	e7f7      	b.n	800dc04 <__mcmp+0x28>

0800dc14 <__mdiff>:
 800dc14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc18:	460c      	mov	r4, r1
 800dc1a:	4606      	mov	r6, r0
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	4620      	mov	r0, r4
 800dc20:	4690      	mov	r8, r2
 800dc22:	f7ff ffdb 	bl	800dbdc <__mcmp>
 800dc26:	1e05      	subs	r5, r0, #0
 800dc28:	d110      	bne.n	800dc4c <__mdiff+0x38>
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f7ff fd53 	bl	800d6d8 <_Balloc>
 800dc32:	b930      	cbnz	r0, 800dc42 <__mdiff+0x2e>
 800dc34:	4b3a      	ldr	r3, [pc, #232]	; (800dd20 <__mdiff+0x10c>)
 800dc36:	4602      	mov	r2, r0
 800dc38:	f240 2132 	movw	r1, #562	; 0x232
 800dc3c:	4839      	ldr	r0, [pc, #228]	; (800dd24 <__mdiff+0x110>)
 800dc3e:	f000 fb31 	bl	800e2a4 <__assert_func>
 800dc42:	2301      	movs	r3, #1
 800dc44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	bfa4      	itt	ge
 800dc4e:	4643      	movge	r3, r8
 800dc50:	46a0      	movge	r8, r4
 800dc52:	4630      	mov	r0, r6
 800dc54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc58:	bfa6      	itte	ge
 800dc5a:	461c      	movge	r4, r3
 800dc5c:	2500      	movge	r5, #0
 800dc5e:	2501      	movlt	r5, #1
 800dc60:	f7ff fd3a 	bl	800d6d8 <_Balloc>
 800dc64:	b920      	cbnz	r0, 800dc70 <__mdiff+0x5c>
 800dc66:	4b2e      	ldr	r3, [pc, #184]	; (800dd20 <__mdiff+0x10c>)
 800dc68:	4602      	mov	r2, r0
 800dc6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc6e:	e7e5      	b.n	800dc3c <__mdiff+0x28>
 800dc70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc74:	6926      	ldr	r6, [r4, #16]
 800dc76:	60c5      	str	r5, [r0, #12]
 800dc78:	f104 0914 	add.w	r9, r4, #20
 800dc7c:	f108 0514 	add.w	r5, r8, #20
 800dc80:	f100 0e14 	add.w	lr, r0, #20
 800dc84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc8c:	f108 0210 	add.w	r2, r8, #16
 800dc90:	46f2      	mov	sl, lr
 800dc92:	2100      	movs	r1, #0
 800dc94:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc9c:	fa1f f883 	uxth.w	r8, r3
 800dca0:	fa11 f18b 	uxtah	r1, r1, fp
 800dca4:	0c1b      	lsrs	r3, r3, #16
 800dca6:	eba1 0808 	sub.w	r8, r1, r8
 800dcaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dcae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dcb2:	fa1f f888 	uxth.w	r8, r8
 800dcb6:	1419      	asrs	r1, r3, #16
 800dcb8:	454e      	cmp	r6, r9
 800dcba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcbe:	f84a 3b04 	str.w	r3, [sl], #4
 800dcc2:	d8e7      	bhi.n	800dc94 <__mdiff+0x80>
 800dcc4:	1b33      	subs	r3, r6, r4
 800dcc6:	3b15      	subs	r3, #21
 800dcc8:	f023 0303 	bic.w	r3, r3, #3
 800dccc:	3304      	adds	r3, #4
 800dcce:	3415      	adds	r4, #21
 800dcd0:	42a6      	cmp	r6, r4
 800dcd2:	bf38      	it	cc
 800dcd4:	2304      	movcc	r3, #4
 800dcd6:	441d      	add	r5, r3
 800dcd8:	4473      	add	r3, lr
 800dcda:	469e      	mov	lr, r3
 800dcdc:	462e      	mov	r6, r5
 800dcde:	4566      	cmp	r6, ip
 800dce0:	d30e      	bcc.n	800dd00 <__mdiff+0xec>
 800dce2:	f10c 0203 	add.w	r2, ip, #3
 800dce6:	1b52      	subs	r2, r2, r5
 800dce8:	f022 0203 	bic.w	r2, r2, #3
 800dcec:	3d03      	subs	r5, #3
 800dcee:	45ac      	cmp	ip, r5
 800dcf0:	bf38      	it	cc
 800dcf2:	2200      	movcc	r2, #0
 800dcf4:	441a      	add	r2, r3
 800dcf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcfa:	b17b      	cbz	r3, 800dd1c <__mdiff+0x108>
 800dcfc:	6107      	str	r7, [r0, #16]
 800dcfe:	e7a3      	b.n	800dc48 <__mdiff+0x34>
 800dd00:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd04:	fa11 f288 	uxtah	r2, r1, r8
 800dd08:	1414      	asrs	r4, r2, #16
 800dd0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd0e:	b292      	uxth	r2, r2
 800dd10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd14:	f84e 2b04 	str.w	r2, [lr], #4
 800dd18:	1421      	asrs	r1, r4, #16
 800dd1a:	e7e0      	b.n	800dcde <__mdiff+0xca>
 800dd1c:	3f01      	subs	r7, #1
 800dd1e:	e7ea      	b.n	800dcf6 <__mdiff+0xe2>
 800dd20:	08011967 	.word	0x08011967
 800dd24:	08011978 	.word	0x08011978

0800dd28 <__d2b>:
 800dd28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd2c:	4689      	mov	r9, r1
 800dd2e:	2101      	movs	r1, #1
 800dd30:	ec57 6b10 	vmov	r6, r7, d0
 800dd34:	4690      	mov	r8, r2
 800dd36:	f7ff fccf 	bl	800d6d8 <_Balloc>
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	b930      	cbnz	r0, 800dd4c <__d2b+0x24>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	4b25      	ldr	r3, [pc, #148]	; (800ddd8 <__d2b+0xb0>)
 800dd42:	4826      	ldr	r0, [pc, #152]	; (800dddc <__d2b+0xb4>)
 800dd44:	f240 310a 	movw	r1, #778	; 0x30a
 800dd48:	f000 faac 	bl	800e2a4 <__assert_func>
 800dd4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd54:	bb35      	cbnz	r5, 800dda4 <__d2b+0x7c>
 800dd56:	2e00      	cmp	r6, #0
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	d028      	beq.n	800ddae <__d2b+0x86>
 800dd5c:	4668      	mov	r0, sp
 800dd5e:	9600      	str	r6, [sp, #0]
 800dd60:	f7ff fd82 	bl	800d868 <__lo0bits>
 800dd64:	9900      	ldr	r1, [sp, #0]
 800dd66:	b300      	cbz	r0, 800ddaa <__d2b+0x82>
 800dd68:	9a01      	ldr	r2, [sp, #4]
 800dd6a:	f1c0 0320 	rsb	r3, r0, #32
 800dd6e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd72:	430b      	orrs	r3, r1
 800dd74:	40c2      	lsrs	r2, r0
 800dd76:	6163      	str	r3, [r4, #20]
 800dd78:	9201      	str	r2, [sp, #4]
 800dd7a:	9b01      	ldr	r3, [sp, #4]
 800dd7c:	61a3      	str	r3, [r4, #24]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	bf14      	ite	ne
 800dd82:	2202      	movne	r2, #2
 800dd84:	2201      	moveq	r2, #1
 800dd86:	6122      	str	r2, [r4, #16]
 800dd88:	b1d5      	cbz	r5, 800ddc0 <__d2b+0x98>
 800dd8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd8e:	4405      	add	r5, r0
 800dd90:	f8c9 5000 	str.w	r5, [r9]
 800dd94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd98:	f8c8 0000 	str.w	r0, [r8]
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	b003      	add	sp, #12
 800dda0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dda4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dda8:	e7d5      	b.n	800dd56 <__d2b+0x2e>
 800ddaa:	6161      	str	r1, [r4, #20]
 800ddac:	e7e5      	b.n	800dd7a <__d2b+0x52>
 800ddae:	a801      	add	r0, sp, #4
 800ddb0:	f7ff fd5a 	bl	800d868 <__lo0bits>
 800ddb4:	9b01      	ldr	r3, [sp, #4]
 800ddb6:	6163      	str	r3, [r4, #20]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	6122      	str	r2, [r4, #16]
 800ddbc:	3020      	adds	r0, #32
 800ddbe:	e7e3      	b.n	800dd88 <__d2b+0x60>
 800ddc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ddc8:	f8c9 0000 	str.w	r0, [r9]
 800ddcc:	6918      	ldr	r0, [r3, #16]
 800ddce:	f7ff fd2b 	bl	800d828 <__hi0bits>
 800ddd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddd6:	e7df      	b.n	800dd98 <__d2b+0x70>
 800ddd8:	08011967 	.word	0x08011967
 800dddc:	08011978 	.word	0x08011978

0800dde0 <_calloc_r>:
 800dde0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dde2:	fba1 2402 	umull	r2, r4, r1, r2
 800dde6:	b94c      	cbnz	r4, 800ddfc <_calloc_r+0x1c>
 800dde8:	4611      	mov	r1, r2
 800ddea:	9201      	str	r2, [sp, #4]
 800ddec:	f000 f87a 	bl	800dee4 <_malloc_r>
 800ddf0:	9a01      	ldr	r2, [sp, #4]
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	b930      	cbnz	r0, 800de04 <_calloc_r+0x24>
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	b003      	add	sp, #12
 800ddfa:	bd30      	pop	{r4, r5, pc}
 800ddfc:	220c      	movs	r2, #12
 800ddfe:	6002      	str	r2, [r0, #0]
 800de00:	2500      	movs	r5, #0
 800de02:	e7f8      	b.n	800ddf6 <_calloc_r+0x16>
 800de04:	4621      	mov	r1, r4
 800de06:	f7fe f93f 	bl	800c088 <memset>
 800de0a:	e7f4      	b.n	800ddf6 <_calloc_r+0x16>

0800de0c <_free_r>:
 800de0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de0e:	2900      	cmp	r1, #0
 800de10:	d044      	beq.n	800de9c <_free_r+0x90>
 800de12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de16:	9001      	str	r0, [sp, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f1a1 0404 	sub.w	r4, r1, #4
 800de1e:	bfb8      	it	lt
 800de20:	18e4      	addlt	r4, r4, r3
 800de22:	f000 fa9b 	bl	800e35c <__malloc_lock>
 800de26:	4a1e      	ldr	r2, [pc, #120]	; (800dea0 <_free_r+0x94>)
 800de28:	9801      	ldr	r0, [sp, #4]
 800de2a:	6813      	ldr	r3, [r2, #0]
 800de2c:	b933      	cbnz	r3, 800de3c <_free_r+0x30>
 800de2e:	6063      	str	r3, [r4, #4]
 800de30:	6014      	str	r4, [r2, #0]
 800de32:	b003      	add	sp, #12
 800de34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de38:	f000 ba96 	b.w	800e368 <__malloc_unlock>
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	d908      	bls.n	800de52 <_free_r+0x46>
 800de40:	6825      	ldr	r5, [r4, #0]
 800de42:	1961      	adds	r1, r4, r5
 800de44:	428b      	cmp	r3, r1
 800de46:	bf01      	itttt	eq
 800de48:	6819      	ldreq	r1, [r3, #0]
 800de4a:	685b      	ldreq	r3, [r3, #4]
 800de4c:	1949      	addeq	r1, r1, r5
 800de4e:	6021      	streq	r1, [r4, #0]
 800de50:	e7ed      	b.n	800de2e <_free_r+0x22>
 800de52:	461a      	mov	r2, r3
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	b10b      	cbz	r3, 800de5c <_free_r+0x50>
 800de58:	42a3      	cmp	r3, r4
 800de5a:	d9fa      	bls.n	800de52 <_free_r+0x46>
 800de5c:	6811      	ldr	r1, [r2, #0]
 800de5e:	1855      	adds	r5, r2, r1
 800de60:	42a5      	cmp	r5, r4
 800de62:	d10b      	bne.n	800de7c <_free_r+0x70>
 800de64:	6824      	ldr	r4, [r4, #0]
 800de66:	4421      	add	r1, r4
 800de68:	1854      	adds	r4, r2, r1
 800de6a:	42a3      	cmp	r3, r4
 800de6c:	6011      	str	r1, [r2, #0]
 800de6e:	d1e0      	bne.n	800de32 <_free_r+0x26>
 800de70:	681c      	ldr	r4, [r3, #0]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	6053      	str	r3, [r2, #4]
 800de76:	4421      	add	r1, r4
 800de78:	6011      	str	r1, [r2, #0]
 800de7a:	e7da      	b.n	800de32 <_free_r+0x26>
 800de7c:	d902      	bls.n	800de84 <_free_r+0x78>
 800de7e:	230c      	movs	r3, #12
 800de80:	6003      	str	r3, [r0, #0]
 800de82:	e7d6      	b.n	800de32 <_free_r+0x26>
 800de84:	6825      	ldr	r5, [r4, #0]
 800de86:	1961      	adds	r1, r4, r5
 800de88:	428b      	cmp	r3, r1
 800de8a:	bf04      	itt	eq
 800de8c:	6819      	ldreq	r1, [r3, #0]
 800de8e:	685b      	ldreq	r3, [r3, #4]
 800de90:	6063      	str	r3, [r4, #4]
 800de92:	bf04      	itt	eq
 800de94:	1949      	addeq	r1, r1, r5
 800de96:	6021      	streq	r1, [r4, #0]
 800de98:	6054      	str	r4, [r2, #4]
 800de9a:	e7ca      	b.n	800de32 <_free_r+0x26>
 800de9c:	b003      	add	sp, #12
 800de9e:	bd30      	pop	{r4, r5, pc}
 800dea0:	200022f4 	.word	0x200022f4

0800dea4 <sbrk_aligned>:
 800dea4:	b570      	push	{r4, r5, r6, lr}
 800dea6:	4e0e      	ldr	r6, [pc, #56]	; (800dee0 <sbrk_aligned+0x3c>)
 800dea8:	460c      	mov	r4, r1
 800deaa:	6831      	ldr	r1, [r6, #0]
 800deac:	4605      	mov	r5, r0
 800deae:	b911      	cbnz	r1, 800deb6 <sbrk_aligned+0x12>
 800deb0:	f000 f9e8 	bl	800e284 <_sbrk_r>
 800deb4:	6030      	str	r0, [r6, #0]
 800deb6:	4621      	mov	r1, r4
 800deb8:	4628      	mov	r0, r5
 800deba:	f000 f9e3 	bl	800e284 <_sbrk_r>
 800debe:	1c43      	adds	r3, r0, #1
 800dec0:	d00a      	beq.n	800ded8 <sbrk_aligned+0x34>
 800dec2:	1cc4      	adds	r4, r0, #3
 800dec4:	f024 0403 	bic.w	r4, r4, #3
 800dec8:	42a0      	cmp	r0, r4
 800deca:	d007      	beq.n	800dedc <sbrk_aligned+0x38>
 800decc:	1a21      	subs	r1, r4, r0
 800dece:	4628      	mov	r0, r5
 800ded0:	f000 f9d8 	bl	800e284 <_sbrk_r>
 800ded4:	3001      	adds	r0, #1
 800ded6:	d101      	bne.n	800dedc <sbrk_aligned+0x38>
 800ded8:	f04f 34ff 	mov.w	r4, #4294967295
 800dedc:	4620      	mov	r0, r4
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	200022f8 	.word	0x200022f8

0800dee4 <_malloc_r>:
 800dee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee8:	1ccd      	adds	r5, r1, #3
 800deea:	f025 0503 	bic.w	r5, r5, #3
 800deee:	3508      	adds	r5, #8
 800def0:	2d0c      	cmp	r5, #12
 800def2:	bf38      	it	cc
 800def4:	250c      	movcc	r5, #12
 800def6:	2d00      	cmp	r5, #0
 800def8:	4607      	mov	r7, r0
 800defa:	db01      	blt.n	800df00 <_malloc_r+0x1c>
 800defc:	42a9      	cmp	r1, r5
 800defe:	d905      	bls.n	800df0c <_malloc_r+0x28>
 800df00:	230c      	movs	r3, #12
 800df02:	603b      	str	r3, [r7, #0]
 800df04:	2600      	movs	r6, #0
 800df06:	4630      	mov	r0, r6
 800df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0c:	4e2e      	ldr	r6, [pc, #184]	; (800dfc8 <_malloc_r+0xe4>)
 800df0e:	f000 fa25 	bl	800e35c <__malloc_lock>
 800df12:	6833      	ldr	r3, [r6, #0]
 800df14:	461c      	mov	r4, r3
 800df16:	bb34      	cbnz	r4, 800df66 <_malloc_r+0x82>
 800df18:	4629      	mov	r1, r5
 800df1a:	4638      	mov	r0, r7
 800df1c:	f7ff ffc2 	bl	800dea4 <sbrk_aligned>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	4604      	mov	r4, r0
 800df24:	d14d      	bne.n	800dfc2 <_malloc_r+0xde>
 800df26:	6834      	ldr	r4, [r6, #0]
 800df28:	4626      	mov	r6, r4
 800df2a:	2e00      	cmp	r6, #0
 800df2c:	d140      	bne.n	800dfb0 <_malloc_r+0xcc>
 800df2e:	6823      	ldr	r3, [r4, #0]
 800df30:	4631      	mov	r1, r6
 800df32:	4638      	mov	r0, r7
 800df34:	eb04 0803 	add.w	r8, r4, r3
 800df38:	f000 f9a4 	bl	800e284 <_sbrk_r>
 800df3c:	4580      	cmp	r8, r0
 800df3e:	d13a      	bne.n	800dfb6 <_malloc_r+0xd2>
 800df40:	6821      	ldr	r1, [r4, #0]
 800df42:	3503      	adds	r5, #3
 800df44:	1a6d      	subs	r5, r5, r1
 800df46:	f025 0503 	bic.w	r5, r5, #3
 800df4a:	3508      	adds	r5, #8
 800df4c:	2d0c      	cmp	r5, #12
 800df4e:	bf38      	it	cc
 800df50:	250c      	movcc	r5, #12
 800df52:	4629      	mov	r1, r5
 800df54:	4638      	mov	r0, r7
 800df56:	f7ff ffa5 	bl	800dea4 <sbrk_aligned>
 800df5a:	3001      	adds	r0, #1
 800df5c:	d02b      	beq.n	800dfb6 <_malloc_r+0xd2>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	442b      	add	r3, r5
 800df62:	6023      	str	r3, [r4, #0]
 800df64:	e00e      	b.n	800df84 <_malloc_r+0xa0>
 800df66:	6822      	ldr	r2, [r4, #0]
 800df68:	1b52      	subs	r2, r2, r5
 800df6a:	d41e      	bmi.n	800dfaa <_malloc_r+0xc6>
 800df6c:	2a0b      	cmp	r2, #11
 800df6e:	d916      	bls.n	800df9e <_malloc_r+0xba>
 800df70:	1961      	adds	r1, r4, r5
 800df72:	42a3      	cmp	r3, r4
 800df74:	6025      	str	r5, [r4, #0]
 800df76:	bf18      	it	ne
 800df78:	6059      	strne	r1, [r3, #4]
 800df7a:	6863      	ldr	r3, [r4, #4]
 800df7c:	bf08      	it	eq
 800df7e:	6031      	streq	r1, [r6, #0]
 800df80:	5162      	str	r2, [r4, r5]
 800df82:	604b      	str	r3, [r1, #4]
 800df84:	4638      	mov	r0, r7
 800df86:	f104 060b 	add.w	r6, r4, #11
 800df8a:	f000 f9ed 	bl	800e368 <__malloc_unlock>
 800df8e:	f026 0607 	bic.w	r6, r6, #7
 800df92:	1d23      	adds	r3, r4, #4
 800df94:	1af2      	subs	r2, r6, r3
 800df96:	d0b6      	beq.n	800df06 <_malloc_r+0x22>
 800df98:	1b9b      	subs	r3, r3, r6
 800df9a:	50a3      	str	r3, [r4, r2]
 800df9c:	e7b3      	b.n	800df06 <_malloc_r+0x22>
 800df9e:	6862      	ldr	r2, [r4, #4]
 800dfa0:	42a3      	cmp	r3, r4
 800dfa2:	bf0c      	ite	eq
 800dfa4:	6032      	streq	r2, [r6, #0]
 800dfa6:	605a      	strne	r2, [r3, #4]
 800dfa8:	e7ec      	b.n	800df84 <_malloc_r+0xa0>
 800dfaa:	4623      	mov	r3, r4
 800dfac:	6864      	ldr	r4, [r4, #4]
 800dfae:	e7b2      	b.n	800df16 <_malloc_r+0x32>
 800dfb0:	4634      	mov	r4, r6
 800dfb2:	6876      	ldr	r6, [r6, #4]
 800dfb4:	e7b9      	b.n	800df2a <_malloc_r+0x46>
 800dfb6:	230c      	movs	r3, #12
 800dfb8:	603b      	str	r3, [r7, #0]
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f000 f9d4 	bl	800e368 <__malloc_unlock>
 800dfc0:	e7a1      	b.n	800df06 <_malloc_r+0x22>
 800dfc2:	6025      	str	r5, [r4, #0]
 800dfc4:	e7de      	b.n	800df84 <_malloc_r+0xa0>
 800dfc6:	bf00      	nop
 800dfc8:	200022f4 	.word	0x200022f4

0800dfcc <__ssputs_r>:
 800dfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd0:	688e      	ldr	r6, [r1, #8]
 800dfd2:	429e      	cmp	r6, r3
 800dfd4:	4682      	mov	sl, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	4690      	mov	r8, r2
 800dfda:	461f      	mov	r7, r3
 800dfdc:	d838      	bhi.n	800e050 <__ssputs_r+0x84>
 800dfde:	898a      	ldrh	r2, [r1, #12]
 800dfe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfe4:	d032      	beq.n	800e04c <__ssputs_r+0x80>
 800dfe6:	6825      	ldr	r5, [r4, #0]
 800dfe8:	6909      	ldr	r1, [r1, #16]
 800dfea:	eba5 0901 	sub.w	r9, r5, r1
 800dfee:	6965      	ldr	r5, [r4, #20]
 800dff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dff8:	3301      	adds	r3, #1
 800dffa:	444b      	add	r3, r9
 800dffc:	106d      	asrs	r5, r5, #1
 800dffe:	429d      	cmp	r5, r3
 800e000:	bf38      	it	cc
 800e002:	461d      	movcc	r5, r3
 800e004:	0553      	lsls	r3, r2, #21
 800e006:	d531      	bpl.n	800e06c <__ssputs_r+0xa0>
 800e008:	4629      	mov	r1, r5
 800e00a:	f7ff ff6b 	bl	800dee4 <_malloc_r>
 800e00e:	4606      	mov	r6, r0
 800e010:	b950      	cbnz	r0, 800e028 <__ssputs_r+0x5c>
 800e012:	230c      	movs	r3, #12
 800e014:	f8ca 3000 	str.w	r3, [sl]
 800e018:	89a3      	ldrh	r3, [r4, #12]
 800e01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e01e:	81a3      	strh	r3, [r4, #12]
 800e020:	f04f 30ff 	mov.w	r0, #4294967295
 800e024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e028:	6921      	ldr	r1, [r4, #16]
 800e02a:	464a      	mov	r2, r9
 800e02c:	f7ff fb46 	bl	800d6bc <memcpy>
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e03a:	81a3      	strh	r3, [r4, #12]
 800e03c:	6126      	str	r6, [r4, #16]
 800e03e:	6165      	str	r5, [r4, #20]
 800e040:	444e      	add	r6, r9
 800e042:	eba5 0509 	sub.w	r5, r5, r9
 800e046:	6026      	str	r6, [r4, #0]
 800e048:	60a5      	str	r5, [r4, #8]
 800e04a:	463e      	mov	r6, r7
 800e04c:	42be      	cmp	r6, r7
 800e04e:	d900      	bls.n	800e052 <__ssputs_r+0x86>
 800e050:	463e      	mov	r6, r7
 800e052:	6820      	ldr	r0, [r4, #0]
 800e054:	4632      	mov	r2, r6
 800e056:	4641      	mov	r1, r8
 800e058:	f000 f966 	bl	800e328 <memmove>
 800e05c:	68a3      	ldr	r3, [r4, #8]
 800e05e:	1b9b      	subs	r3, r3, r6
 800e060:	60a3      	str	r3, [r4, #8]
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	4433      	add	r3, r6
 800e066:	6023      	str	r3, [r4, #0]
 800e068:	2000      	movs	r0, #0
 800e06a:	e7db      	b.n	800e024 <__ssputs_r+0x58>
 800e06c:	462a      	mov	r2, r5
 800e06e:	f000 f981 	bl	800e374 <_realloc_r>
 800e072:	4606      	mov	r6, r0
 800e074:	2800      	cmp	r0, #0
 800e076:	d1e1      	bne.n	800e03c <__ssputs_r+0x70>
 800e078:	6921      	ldr	r1, [r4, #16]
 800e07a:	4650      	mov	r0, sl
 800e07c:	f7ff fec6 	bl	800de0c <_free_r>
 800e080:	e7c7      	b.n	800e012 <__ssputs_r+0x46>
	...

0800e084 <_svfiprintf_r>:
 800e084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e088:	4698      	mov	r8, r3
 800e08a:	898b      	ldrh	r3, [r1, #12]
 800e08c:	061b      	lsls	r3, r3, #24
 800e08e:	b09d      	sub	sp, #116	; 0x74
 800e090:	4607      	mov	r7, r0
 800e092:	460d      	mov	r5, r1
 800e094:	4614      	mov	r4, r2
 800e096:	d50e      	bpl.n	800e0b6 <_svfiprintf_r+0x32>
 800e098:	690b      	ldr	r3, [r1, #16]
 800e09a:	b963      	cbnz	r3, 800e0b6 <_svfiprintf_r+0x32>
 800e09c:	2140      	movs	r1, #64	; 0x40
 800e09e:	f7ff ff21 	bl	800dee4 <_malloc_r>
 800e0a2:	6028      	str	r0, [r5, #0]
 800e0a4:	6128      	str	r0, [r5, #16]
 800e0a6:	b920      	cbnz	r0, 800e0b2 <_svfiprintf_r+0x2e>
 800e0a8:	230c      	movs	r3, #12
 800e0aa:	603b      	str	r3, [r7, #0]
 800e0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b0:	e0d1      	b.n	800e256 <_svfiprintf_r+0x1d2>
 800e0b2:	2340      	movs	r3, #64	; 0x40
 800e0b4:	616b      	str	r3, [r5, #20]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ba:	2320      	movs	r3, #32
 800e0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0c4:	2330      	movs	r3, #48	; 0x30
 800e0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e270 <_svfiprintf_r+0x1ec>
 800e0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0ce:	f04f 0901 	mov.w	r9, #1
 800e0d2:	4623      	mov	r3, r4
 800e0d4:	469a      	mov	sl, r3
 800e0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0da:	b10a      	cbz	r2, 800e0e0 <_svfiprintf_r+0x5c>
 800e0dc:	2a25      	cmp	r2, #37	; 0x25
 800e0de:	d1f9      	bne.n	800e0d4 <_svfiprintf_r+0x50>
 800e0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800e0e4:	d00b      	beq.n	800e0fe <_svfiprintf_r+0x7a>
 800e0e6:	465b      	mov	r3, fp
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f7ff ff6d 	bl	800dfcc <__ssputs_r>
 800e0f2:	3001      	adds	r0, #1
 800e0f4:	f000 80aa 	beq.w	800e24c <_svfiprintf_r+0x1c8>
 800e0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0fa:	445a      	add	r2, fp
 800e0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 80a2 	beq.w	800e24c <_svfiprintf_r+0x1c8>
 800e108:	2300      	movs	r3, #0
 800e10a:	f04f 32ff 	mov.w	r2, #4294967295
 800e10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e112:	f10a 0a01 	add.w	sl, sl, #1
 800e116:	9304      	str	r3, [sp, #16]
 800e118:	9307      	str	r3, [sp, #28]
 800e11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e11e:	931a      	str	r3, [sp, #104]	; 0x68
 800e120:	4654      	mov	r4, sl
 800e122:	2205      	movs	r2, #5
 800e124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e128:	4851      	ldr	r0, [pc, #324]	; (800e270 <_svfiprintf_r+0x1ec>)
 800e12a:	f7f2 f869 	bl	8000200 <memchr>
 800e12e:	9a04      	ldr	r2, [sp, #16]
 800e130:	b9d8      	cbnz	r0, 800e16a <_svfiprintf_r+0xe6>
 800e132:	06d0      	lsls	r0, r2, #27
 800e134:	bf44      	itt	mi
 800e136:	2320      	movmi	r3, #32
 800e138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e13c:	0711      	lsls	r1, r2, #28
 800e13e:	bf44      	itt	mi
 800e140:	232b      	movmi	r3, #43	; 0x2b
 800e142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e146:	f89a 3000 	ldrb.w	r3, [sl]
 800e14a:	2b2a      	cmp	r3, #42	; 0x2a
 800e14c:	d015      	beq.n	800e17a <_svfiprintf_r+0xf6>
 800e14e:	9a07      	ldr	r2, [sp, #28]
 800e150:	4654      	mov	r4, sl
 800e152:	2000      	movs	r0, #0
 800e154:	f04f 0c0a 	mov.w	ip, #10
 800e158:	4621      	mov	r1, r4
 800e15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e15e:	3b30      	subs	r3, #48	; 0x30
 800e160:	2b09      	cmp	r3, #9
 800e162:	d94e      	bls.n	800e202 <_svfiprintf_r+0x17e>
 800e164:	b1b0      	cbz	r0, 800e194 <_svfiprintf_r+0x110>
 800e166:	9207      	str	r2, [sp, #28]
 800e168:	e014      	b.n	800e194 <_svfiprintf_r+0x110>
 800e16a:	eba0 0308 	sub.w	r3, r0, r8
 800e16e:	fa09 f303 	lsl.w	r3, r9, r3
 800e172:	4313      	orrs	r3, r2
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	46a2      	mov	sl, r4
 800e178:	e7d2      	b.n	800e120 <_svfiprintf_r+0x9c>
 800e17a:	9b03      	ldr	r3, [sp, #12]
 800e17c:	1d19      	adds	r1, r3, #4
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	9103      	str	r1, [sp, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	bfbb      	ittet	lt
 800e186:	425b      	neglt	r3, r3
 800e188:	f042 0202 	orrlt.w	r2, r2, #2
 800e18c:	9307      	strge	r3, [sp, #28]
 800e18e:	9307      	strlt	r3, [sp, #28]
 800e190:	bfb8      	it	lt
 800e192:	9204      	strlt	r2, [sp, #16]
 800e194:	7823      	ldrb	r3, [r4, #0]
 800e196:	2b2e      	cmp	r3, #46	; 0x2e
 800e198:	d10c      	bne.n	800e1b4 <_svfiprintf_r+0x130>
 800e19a:	7863      	ldrb	r3, [r4, #1]
 800e19c:	2b2a      	cmp	r3, #42	; 0x2a
 800e19e:	d135      	bne.n	800e20c <_svfiprintf_r+0x188>
 800e1a0:	9b03      	ldr	r3, [sp, #12]
 800e1a2:	1d1a      	adds	r2, r3, #4
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	9203      	str	r2, [sp, #12]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bfb8      	it	lt
 800e1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1b0:	3402      	adds	r4, #2
 800e1b2:	9305      	str	r3, [sp, #20]
 800e1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e280 <_svfiprintf_r+0x1fc>
 800e1b8:	7821      	ldrb	r1, [r4, #0]
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	4650      	mov	r0, sl
 800e1be:	f7f2 f81f 	bl	8000200 <memchr>
 800e1c2:	b140      	cbz	r0, 800e1d6 <_svfiprintf_r+0x152>
 800e1c4:	2340      	movs	r3, #64	; 0x40
 800e1c6:	eba0 000a 	sub.w	r0, r0, sl
 800e1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800e1ce:	9b04      	ldr	r3, [sp, #16]
 800e1d0:	4303      	orrs	r3, r0
 800e1d2:	3401      	adds	r4, #1
 800e1d4:	9304      	str	r3, [sp, #16]
 800e1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1da:	4826      	ldr	r0, [pc, #152]	; (800e274 <_svfiprintf_r+0x1f0>)
 800e1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1e0:	2206      	movs	r2, #6
 800e1e2:	f7f2 f80d 	bl	8000200 <memchr>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d038      	beq.n	800e25c <_svfiprintf_r+0x1d8>
 800e1ea:	4b23      	ldr	r3, [pc, #140]	; (800e278 <_svfiprintf_r+0x1f4>)
 800e1ec:	bb1b      	cbnz	r3, 800e236 <_svfiprintf_r+0x1b2>
 800e1ee:	9b03      	ldr	r3, [sp, #12]
 800e1f0:	3307      	adds	r3, #7
 800e1f2:	f023 0307 	bic.w	r3, r3, #7
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	9303      	str	r3, [sp, #12]
 800e1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1fc:	4433      	add	r3, r6
 800e1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e200:	e767      	b.n	800e0d2 <_svfiprintf_r+0x4e>
 800e202:	fb0c 3202 	mla	r2, ip, r2, r3
 800e206:	460c      	mov	r4, r1
 800e208:	2001      	movs	r0, #1
 800e20a:	e7a5      	b.n	800e158 <_svfiprintf_r+0xd4>
 800e20c:	2300      	movs	r3, #0
 800e20e:	3401      	adds	r4, #1
 800e210:	9305      	str	r3, [sp, #20]
 800e212:	4619      	mov	r1, r3
 800e214:	f04f 0c0a 	mov.w	ip, #10
 800e218:	4620      	mov	r0, r4
 800e21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e21e:	3a30      	subs	r2, #48	; 0x30
 800e220:	2a09      	cmp	r2, #9
 800e222:	d903      	bls.n	800e22c <_svfiprintf_r+0x1a8>
 800e224:	2b00      	cmp	r3, #0
 800e226:	d0c5      	beq.n	800e1b4 <_svfiprintf_r+0x130>
 800e228:	9105      	str	r1, [sp, #20]
 800e22a:	e7c3      	b.n	800e1b4 <_svfiprintf_r+0x130>
 800e22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e230:	4604      	mov	r4, r0
 800e232:	2301      	movs	r3, #1
 800e234:	e7f0      	b.n	800e218 <_svfiprintf_r+0x194>
 800e236:	ab03      	add	r3, sp, #12
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	462a      	mov	r2, r5
 800e23c:	4b0f      	ldr	r3, [pc, #60]	; (800e27c <_svfiprintf_r+0x1f8>)
 800e23e:	a904      	add	r1, sp, #16
 800e240:	4638      	mov	r0, r7
 800e242:	f7fd ffc9 	bl	800c1d8 <_printf_float>
 800e246:	1c42      	adds	r2, r0, #1
 800e248:	4606      	mov	r6, r0
 800e24a:	d1d6      	bne.n	800e1fa <_svfiprintf_r+0x176>
 800e24c:	89ab      	ldrh	r3, [r5, #12]
 800e24e:	065b      	lsls	r3, r3, #25
 800e250:	f53f af2c 	bmi.w	800e0ac <_svfiprintf_r+0x28>
 800e254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e256:	b01d      	add	sp, #116	; 0x74
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	ab03      	add	r3, sp, #12
 800e25e:	9300      	str	r3, [sp, #0]
 800e260:	462a      	mov	r2, r5
 800e262:	4b06      	ldr	r3, [pc, #24]	; (800e27c <_svfiprintf_r+0x1f8>)
 800e264:	a904      	add	r1, sp, #16
 800e266:	4638      	mov	r0, r7
 800e268:	f7fe fa5a 	bl	800c720 <_printf_i>
 800e26c:	e7eb      	b.n	800e246 <_svfiprintf_r+0x1c2>
 800e26e:	bf00      	nop
 800e270:	08011ad4 	.word	0x08011ad4
 800e274:	08011ade 	.word	0x08011ade
 800e278:	0800c1d9 	.word	0x0800c1d9
 800e27c:	0800dfcd 	.word	0x0800dfcd
 800e280:	08011ada 	.word	0x08011ada

0800e284 <_sbrk_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d06      	ldr	r5, [pc, #24]	; (800e2a0 <_sbrk_r+0x1c>)
 800e288:	2300      	movs	r3, #0
 800e28a:	4604      	mov	r4, r0
 800e28c:	4608      	mov	r0, r1
 800e28e:	602b      	str	r3, [r5, #0]
 800e290:	f7f3 f8ce 	bl	8001430 <_sbrk>
 800e294:	1c43      	adds	r3, r0, #1
 800e296:	d102      	bne.n	800e29e <_sbrk_r+0x1a>
 800e298:	682b      	ldr	r3, [r5, #0]
 800e29a:	b103      	cbz	r3, 800e29e <_sbrk_r+0x1a>
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	bd38      	pop	{r3, r4, r5, pc}
 800e2a0:	200022fc 	.word	0x200022fc

0800e2a4 <__assert_func>:
 800e2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2a6:	4614      	mov	r4, r2
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <__assert_func+0x2c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	68d8      	ldr	r0, [r3, #12]
 800e2b2:	b14c      	cbz	r4, 800e2c8 <__assert_func+0x24>
 800e2b4:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <__assert_func+0x30>)
 800e2b6:	9100      	str	r1, [sp, #0]
 800e2b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2bc:	4906      	ldr	r1, [pc, #24]	; (800e2d8 <__assert_func+0x34>)
 800e2be:	462b      	mov	r3, r5
 800e2c0:	f000 f80e 	bl	800e2e0 <fiprintf>
 800e2c4:	f000 faac 	bl	800e820 <abort>
 800e2c8:	4b04      	ldr	r3, [pc, #16]	; (800e2dc <__assert_func+0x38>)
 800e2ca:	461c      	mov	r4, r3
 800e2cc:	e7f3      	b.n	800e2b6 <__assert_func+0x12>
 800e2ce:	bf00      	nop
 800e2d0:	20000180 	.word	0x20000180
 800e2d4:	08011ae5 	.word	0x08011ae5
 800e2d8:	08011af2 	.word	0x08011af2
 800e2dc:	08011b20 	.word	0x08011b20

0800e2e0 <fiprintf>:
 800e2e0:	b40e      	push	{r1, r2, r3}
 800e2e2:	b503      	push	{r0, r1, lr}
 800e2e4:	4601      	mov	r1, r0
 800e2e6:	ab03      	add	r3, sp, #12
 800e2e8:	4805      	ldr	r0, [pc, #20]	; (800e300 <fiprintf+0x20>)
 800e2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ee:	6800      	ldr	r0, [r0, #0]
 800e2f0:	9301      	str	r3, [sp, #4]
 800e2f2:	f000 f897 	bl	800e424 <_vfiprintf_r>
 800e2f6:	b002      	add	sp, #8
 800e2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2fc:	b003      	add	sp, #12
 800e2fe:	4770      	bx	lr
 800e300:	20000180 	.word	0x20000180

0800e304 <__ascii_mbtowc>:
 800e304:	b082      	sub	sp, #8
 800e306:	b901      	cbnz	r1, 800e30a <__ascii_mbtowc+0x6>
 800e308:	a901      	add	r1, sp, #4
 800e30a:	b142      	cbz	r2, 800e31e <__ascii_mbtowc+0x1a>
 800e30c:	b14b      	cbz	r3, 800e322 <__ascii_mbtowc+0x1e>
 800e30e:	7813      	ldrb	r3, [r2, #0]
 800e310:	600b      	str	r3, [r1, #0]
 800e312:	7812      	ldrb	r2, [r2, #0]
 800e314:	1e10      	subs	r0, r2, #0
 800e316:	bf18      	it	ne
 800e318:	2001      	movne	r0, #1
 800e31a:	b002      	add	sp, #8
 800e31c:	4770      	bx	lr
 800e31e:	4610      	mov	r0, r2
 800e320:	e7fb      	b.n	800e31a <__ascii_mbtowc+0x16>
 800e322:	f06f 0001 	mvn.w	r0, #1
 800e326:	e7f8      	b.n	800e31a <__ascii_mbtowc+0x16>

0800e328 <memmove>:
 800e328:	4288      	cmp	r0, r1
 800e32a:	b510      	push	{r4, lr}
 800e32c:	eb01 0402 	add.w	r4, r1, r2
 800e330:	d902      	bls.n	800e338 <memmove+0x10>
 800e332:	4284      	cmp	r4, r0
 800e334:	4623      	mov	r3, r4
 800e336:	d807      	bhi.n	800e348 <memmove+0x20>
 800e338:	1e43      	subs	r3, r0, #1
 800e33a:	42a1      	cmp	r1, r4
 800e33c:	d008      	beq.n	800e350 <memmove+0x28>
 800e33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e346:	e7f8      	b.n	800e33a <memmove+0x12>
 800e348:	4402      	add	r2, r0
 800e34a:	4601      	mov	r1, r0
 800e34c:	428a      	cmp	r2, r1
 800e34e:	d100      	bne.n	800e352 <memmove+0x2a>
 800e350:	bd10      	pop	{r4, pc}
 800e352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e35a:	e7f7      	b.n	800e34c <memmove+0x24>

0800e35c <__malloc_lock>:
 800e35c:	4801      	ldr	r0, [pc, #4]	; (800e364 <__malloc_lock+0x8>)
 800e35e:	f000 bc1f 	b.w	800eba0 <__retarget_lock_acquire_recursive>
 800e362:	bf00      	nop
 800e364:	20002300 	.word	0x20002300

0800e368 <__malloc_unlock>:
 800e368:	4801      	ldr	r0, [pc, #4]	; (800e370 <__malloc_unlock+0x8>)
 800e36a:	f000 bc1a 	b.w	800eba2 <__retarget_lock_release_recursive>
 800e36e:	bf00      	nop
 800e370:	20002300 	.word	0x20002300

0800e374 <_realloc_r>:
 800e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e378:	4680      	mov	r8, r0
 800e37a:	4614      	mov	r4, r2
 800e37c:	460e      	mov	r6, r1
 800e37e:	b921      	cbnz	r1, 800e38a <_realloc_r+0x16>
 800e380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e384:	4611      	mov	r1, r2
 800e386:	f7ff bdad 	b.w	800dee4 <_malloc_r>
 800e38a:	b92a      	cbnz	r2, 800e398 <_realloc_r+0x24>
 800e38c:	f7ff fd3e 	bl	800de0c <_free_r>
 800e390:	4625      	mov	r5, r4
 800e392:	4628      	mov	r0, r5
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	f000 fc6a 	bl	800ec70 <_malloc_usable_size_r>
 800e39c:	4284      	cmp	r4, r0
 800e39e:	4607      	mov	r7, r0
 800e3a0:	d802      	bhi.n	800e3a8 <_realloc_r+0x34>
 800e3a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3a6:	d812      	bhi.n	800e3ce <_realloc_r+0x5a>
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f7ff fd9a 	bl	800dee4 <_malloc_r>
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d0ed      	beq.n	800e392 <_realloc_r+0x1e>
 800e3b6:	42bc      	cmp	r4, r7
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	bf28      	it	cs
 800e3be:	463a      	movcs	r2, r7
 800e3c0:	f7ff f97c 	bl	800d6bc <memcpy>
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	f7ff fd20 	bl	800de0c <_free_r>
 800e3cc:	e7e1      	b.n	800e392 <_realloc_r+0x1e>
 800e3ce:	4635      	mov	r5, r6
 800e3d0:	e7df      	b.n	800e392 <_realloc_r+0x1e>

0800e3d2 <__sfputc_r>:
 800e3d2:	6893      	ldr	r3, [r2, #8]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	b410      	push	{r4}
 800e3da:	6093      	str	r3, [r2, #8]
 800e3dc:	da08      	bge.n	800e3f0 <__sfputc_r+0x1e>
 800e3de:	6994      	ldr	r4, [r2, #24]
 800e3e0:	42a3      	cmp	r3, r4
 800e3e2:	db01      	blt.n	800e3e8 <__sfputc_r+0x16>
 800e3e4:	290a      	cmp	r1, #10
 800e3e6:	d103      	bne.n	800e3f0 <__sfputc_r+0x1e>
 800e3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3ec:	f000 b94a 	b.w	800e684 <__swbuf_r>
 800e3f0:	6813      	ldr	r3, [r2, #0]
 800e3f2:	1c58      	adds	r0, r3, #1
 800e3f4:	6010      	str	r0, [r2, #0]
 800e3f6:	7019      	strb	r1, [r3, #0]
 800e3f8:	4608      	mov	r0, r1
 800e3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <__sfputs_r>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	4606      	mov	r6, r0
 800e404:	460f      	mov	r7, r1
 800e406:	4614      	mov	r4, r2
 800e408:	18d5      	adds	r5, r2, r3
 800e40a:	42ac      	cmp	r4, r5
 800e40c:	d101      	bne.n	800e412 <__sfputs_r+0x12>
 800e40e:	2000      	movs	r0, #0
 800e410:	e007      	b.n	800e422 <__sfputs_r+0x22>
 800e412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e416:	463a      	mov	r2, r7
 800e418:	4630      	mov	r0, r6
 800e41a:	f7ff ffda 	bl	800e3d2 <__sfputc_r>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	d1f3      	bne.n	800e40a <__sfputs_r+0xa>
 800e422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e424 <_vfiprintf_r>:
 800e424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e428:	460d      	mov	r5, r1
 800e42a:	b09d      	sub	sp, #116	; 0x74
 800e42c:	4614      	mov	r4, r2
 800e42e:	4698      	mov	r8, r3
 800e430:	4606      	mov	r6, r0
 800e432:	b118      	cbz	r0, 800e43c <_vfiprintf_r+0x18>
 800e434:	6983      	ldr	r3, [r0, #24]
 800e436:	b90b      	cbnz	r3, 800e43c <_vfiprintf_r+0x18>
 800e438:	f000 fb14 	bl	800ea64 <__sinit>
 800e43c:	4b89      	ldr	r3, [pc, #548]	; (800e664 <_vfiprintf_r+0x240>)
 800e43e:	429d      	cmp	r5, r3
 800e440:	d11b      	bne.n	800e47a <_vfiprintf_r+0x56>
 800e442:	6875      	ldr	r5, [r6, #4]
 800e444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e446:	07d9      	lsls	r1, r3, #31
 800e448:	d405      	bmi.n	800e456 <_vfiprintf_r+0x32>
 800e44a:	89ab      	ldrh	r3, [r5, #12]
 800e44c:	059a      	lsls	r2, r3, #22
 800e44e:	d402      	bmi.n	800e456 <_vfiprintf_r+0x32>
 800e450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e452:	f000 fba5 	bl	800eba0 <__retarget_lock_acquire_recursive>
 800e456:	89ab      	ldrh	r3, [r5, #12]
 800e458:	071b      	lsls	r3, r3, #28
 800e45a:	d501      	bpl.n	800e460 <_vfiprintf_r+0x3c>
 800e45c:	692b      	ldr	r3, [r5, #16]
 800e45e:	b9eb      	cbnz	r3, 800e49c <_vfiprintf_r+0x78>
 800e460:	4629      	mov	r1, r5
 800e462:	4630      	mov	r0, r6
 800e464:	f000 f96e 	bl	800e744 <__swsetup_r>
 800e468:	b1c0      	cbz	r0, 800e49c <_vfiprintf_r+0x78>
 800e46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e46c:	07dc      	lsls	r4, r3, #31
 800e46e:	d50e      	bpl.n	800e48e <_vfiprintf_r+0x6a>
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	b01d      	add	sp, #116	; 0x74
 800e476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47a:	4b7b      	ldr	r3, [pc, #492]	; (800e668 <_vfiprintf_r+0x244>)
 800e47c:	429d      	cmp	r5, r3
 800e47e:	d101      	bne.n	800e484 <_vfiprintf_r+0x60>
 800e480:	68b5      	ldr	r5, [r6, #8]
 800e482:	e7df      	b.n	800e444 <_vfiprintf_r+0x20>
 800e484:	4b79      	ldr	r3, [pc, #484]	; (800e66c <_vfiprintf_r+0x248>)
 800e486:	429d      	cmp	r5, r3
 800e488:	bf08      	it	eq
 800e48a:	68f5      	ldreq	r5, [r6, #12]
 800e48c:	e7da      	b.n	800e444 <_vfiprintf_r+0x20>
 800e48e:	89ab      	ldrh	r3, [r5, #12]
 800e490:	0598      	lsls	r0, r3, #22
 800e492:	d4ed      	bmi.n	800e470 <_vfiprintf_r+0x4c>
 800e494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e496:	f000 fb84 	bl	800eba2 <__retarget_lock_release_recursive>
 800e49a:	e7e9      	b.n	800e470 <_vfiprintf_r+0x4c>
 800e49c:	2300      	movs	r3, #0
 800e49e:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a0:	2320      	movs	r3, #32
 800e4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4aa:	2330      	movs	r3, #48	; 0x30
 800e4ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e670 <_vfiprintf_r+0x24c>
 800e4b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4b4:	f04f 0901 	mov.w	r9, #1
 800e4b8:	4623      	mov	r3, r4
 800e4ba:	469a      	mov	sl, r3
 800e4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4c0:	b10a      	cbz	r2, 800e4c6 <_vfiprintf_r+0xa2>
 800e4c2:	2a25      	cmp	r2, #37	; 0x25
 800e4c4:	d1f9      	bne.n	800e4ba <_vfiprintf_r+0x96>
 800e4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800e4ca:	d00b      	beq.n	800e4e4 <_vfiprintf_r+0xc0>
 800e4cc:	465b      	mov	r3, fp
 800e4ce:	4622      	mov	r2, r4
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff ff94 	bl	800e400 <__sfputs_r>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	f000 80aa 	beq.w	800e632 <_vfiprintf_r+0x20e>
 800e4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4e0:	445a      	add	r2, fp
 800e4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800e4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f000 80a2 	beq.w	800e632 <_vfiprintf_r+0x20e>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4f8:	f10a 0a01 	add.w	sl, sl, #1
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	9307      	str	r3, [sp, #28]
 800e500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e504:	931a      	str	r3, [sp, #104]	; 0x68
 800e506:	4654      	mov	r4, sl
 800e508:	2205      	movs	r2, #5
 800e50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50e:	4858      	ldr	r0, [pc, #352]	; (800e670 <_vfiprintf_r+0x24c>)
 800e510:	f7f1 fe76 	bl	8000200 <memchr>
 800e514:	9a04      	ldr	r2, [sp, #16]
 800e516:	b9d8      	cbnz	r0, 800e550 <_vfiprintf_r+0x12c>
 800e518:	06d1      	lsls	r1, r2, #27
 800e51a:	bf44      	itt	mi
 800e51c:	2320      	movmi	r3, #32
 800e51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e522:	0713      	lsls	r3, r2, #28
 800e524:	bf44      	itt	mi
 800e526:	232b      	movmi	r3, #43	; 0x2b
 800e528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e52c:	f89a 3000 	ldrb.w	r3, [sl]
 800e530:	2b2a      	cmp	r3, #42	; 0x2a
 800e532:	d015      	beq.n	800e560 <_vfiprintf_r+0x13c>
 800e534:	9a07      	ldr	r2, [sp, #28]
 800e536:	4654      	mov	r4, sl
 800e538:	2000      	movs	r0, #0
 800e53a:	f04f 0c0a 	mov.w	ip, #10
 800e53e:	4621      	mov	r1, r4
 800e540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e544:	3b30      	subs	r3, #48	; 0x30
 800e546:	2b09      	cmp	r3, #9
 800e548:	d94e      	bls.n	800e5e8 <_vfiprintf_r+0x1c4>
 800e54a:	b1b0      	cbz	r0, 800e57a <_vfiprintf_r+0x156>
 800e54c:	9207      	str	r2, [sp, #28]
 800e54e:	e014      	b.n	800e57a <_vfiprintf_r+0x156>
 800e550:	eba0 0308 	sub.w	r3, r0, r8
 800e554:	fa09 f303 	lsl.w	r3, r9, r3
 800e558:	4313      	orrs	r3, r2
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	46a2      	mov	sl, r4
 800e55e:	e7d2      	b.n	800e506 <_vfiprintf_r+0xe2>
 800e560:	9b03      	ldr	r3, [sp, #12]
 800e562:	1d19      	adds	r1, r3, #4
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	9103      	str	r1, [sp, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bfbb      	ittet	lt
 800e56c:	425b      	neglt	r3, r3
 800e56e:	f042 0202 	orrlt.w	r2, r2, #2
 800e572:	9307      	strge	r3, [sp, #28]
 800e574:	9307      	strlt	r3, [sp, #28]
 800e576:	bfb8      	it	lt
 800e578:	9204      	strlt	r2, [sp, #16]
 800e57a:	7823      	ldrb	r3, [r4, #0]
 800e57c:	2b2e      	cmp	r3, #46	; 0x2e
 800e57e:	d10c      	bne.n	800e59a <_vfiprintf_r+0x176>
 800e580:	7863      	ldrb	r3, [r4, #1]
 800e582:	2b2a      	cmp	r3, #42	; 0x2a
 800e584:	d135      	bne.n	800e5f2 <_vfiprintf_r+0x1ce>
 800e586:	9b03      	ldr	r3, [sp, #12]
 800e588:	1d1a      	adds	r2, r3, #4
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	9203      	str	r2, [sp, #12]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	bfb8      	it	lt
 800e592:	f04f 33ff 	movlt.w	r3, #4294967295
 800e596:	3402      	adds	r4, #2
 800e598:	9305      	str	r3, [sp, #20]
 800e59a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e680 <_vfiprintf_r+0x25c>
 800e59e:	7821      	ldrb	r1, [r4, #0]
 800e5a0:	2203      	movs	r2, #3
 800e5a2:	4650      	mov	r0, sl
 800e5a4:	f7f1 fe2c 	bl	8000200 <memchr>
 800e5a8:	b140      	cbz	r0, 800e5bc <_vfiprintf_r+0x198>
 800e5aa:	2340      	movs	r3, #64	; 0x40
 800e5ac:	eba0 000a 	sub.w	r0, r0, sl
 800e5b0:	fa03 f000 	lsl.w	r0, r3, r0
 800e5b4:	9b04      	ldr	r3, [sp, #16]
 800e5b6:	4303      	orrs	r3, r0
 800e5b8:	3401      	adds	r4, #1
 800e5ba:	9304      	str	r3, [sp, #16]
 800e5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5c0:	482c      	ldr	r0, [pc, #176]	; (800e674 <_vfiprintf_r+0x250>)
 800e5c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5c6:	2206      	movs	r2, #6
 800e5c8:	f7f1 fe1a 	bl	8000200 <memchr>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d03f      	beq.n	800e650 <_vfiprintf_r+0x22c>
 800e5d0:	4b29      	ldr	r3, [pc, #164]	; (800e678 <_vfiprintf_r+0x254>)
 800e5d2:	bb1b      	cbnz	r3, 800e61c <_vfiprintf_r+0x1f8>
 800e5d4:	9b03      	ldr	r3, [sp, #12]
 800e5d6:	3307      	adds	r3, #7
 800e5d8:	f023 0307 	bic.w	r3, r3, #7
 800e5dc:	3308      	adds	r3, #8
 800e5de:	9303      	str	r3, [sp, #12]
 800e5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5e2:	443b      	add	r3, r7
 800e5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e6:	e767      	b.n	800e4b8 <_vfiprintf_r+0x94>
 800e5e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5ec:	460c      	mov	r4, r1
 800e5ee:	2001      	movs	r0, #1
 800e5f0:	e7a5      	b.n	800e53e <_vfiprintf_r+0x11a>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	3401      	adds	r4, #1
 800e5f6:	9305      	str	r3, [sp, #20]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	f04f 0c0a 	mov.w	ip, #10
 800e5fe:	4620      	mov	r0, r4
 800e600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e604:	3a30      	subs	r2, #48	; 0x30
 800e606:	2a09      	cmp	r2, #9
 800e608:	d903      	bls.n	800e612 <_vfiprintf_r+0x1ee>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d0c5      	beq.n	800e59a <_vfiprintf_r+0x176>
 800e60e:	9105      	str	r1, [sp, #20]
 800e610:	e7c3      	b.n	800e59a <_vfiprintf_r+0x176>
 800e612:	fb0c 2101 	mla	r1, ip, r1, r2
 800e616:	4604      	mov	r4, r0
 800e618:	2301      	movs	r3, #1
 800e61a:	e7f0      	b.n	800e5fe <_vfiprintf_r+0x1da>
 800e61c:	ab03      	add	r3, sp, #12
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	462a      	mov	r2, r5
 800e622:	4b16      	ldr	r3, [pc, #88]	; (800e67c <_vfiprintf_r+0x258>)
 800e624:	a904      	add	r1, sp, #16
 800e626:	4630      	mov	r0, r6
 800e628:	f7fd fdd6 	bl	800c1d8 <_printf_float>
 800e62c:	4607      	mov	r7, r0
 800e62e:	1c78      	adds	r0, r7, #1
 800e630:	d1d6      	bne.n	800e5e0 <_vfiprintf_r+0x1bc>
 800e632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e634:	07d9      	lsls	r1, r3, #31
 800e636:	d405      	bmi.n	800e644 <_vfiprintf_r+0x220>
 800e638:	89ab      	ldrh	r3, [r5, #12]
 800e63a:	059a      	lsls	r2, r3, #22
 800e63c:	d402      	bmi.n	800e644 <_vfiprintf_r+0x220>
 800e63e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e640:	f000 faaf 	bl	800eba2 <__retarget_lock_release_recursive>
 800e644:	89ab      	ldrh	r3, [r5, #12]
 800e646:	065b      	lsls	r3, r3, #25
 800e648:	f53f af12 	bmi.w	800e470 <_vfiprintf_r+0x4c>
 800e64c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e64e:	e711      	b.n	800e474 <_vfiprintf_r+0x50>
 800e650:	ab03      	add	r3, sp, #12
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	462a      	mov	r2, r5
 800e656:	4b09      	ldr	r3, [pc, #36]	; (800e67c <_vfiprintf_r+0x258>)
 800e658:	a904      	add	r1, sp, #16
 800e65a:	4630      	mov	r0, r6
 800e65c:	f7fe f860 	bl	800c720 <_printf_i>
 800e660:	e7e4      	b.n	800e62c <_vfiprintf_r+0x208>
 800e662:	bf00      	nop
 800e664:	08011c4c 	.word	0x08011c4c
 800e668:	08011c6c 	.word	0x08011c6c
 800e66c:	08011c2c 	.word	0x08011c2c
 800e670:	08011ad4 	.word	0x08011ad4
 800e674:	08011ade 	.word	0x08011ade
 800e678:	0800c1d9 	.word	0x0800c1d9
 800e67c:	0800e401 	.word	0x0800e401
 800e680:	08011ada 	.word	0x08011ada

0800e684 <__swbuf_r>:
 800e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e686:	460e      	mov	r6, r1
 800e688:	4614      	mov	r4, r2
 800e68a:	4605      	mov	r5, r0
 800e68c:	b118      	cbz	r0, 800e696 <__swbuf_r+0x12>
 800e68e:	6983      	ldr	r3, [r0, #24]
 800e690:	b90b      	cbnz	r3, 800e696 <__swbuf_r+0x12>
 800e692:	f000 f9e7 	bl	800ea64 <__sinit>
 800e696:	4b21      	ldr	r3, [pc, #132]	; (800e71c <__swbuf_r+0x98>)
 800e698:	429c      	cmp	r4, r3
 800e69a:	d12b      	bne.n	800e6f4 <__swbuf_r+0x70>
 800e69c:	686c      	ldr	r4, [r5, #4]
 800e69e:	69a3      	ldr	r3, [r4, #24]
 800e6a0:	60a3      	str	r3, [r4, #8]
 800e6a2:	89a3      	ldrh	r3, [r4, #12]
 800e6a4:	071a      	lsls	r2, r3, #28
 800e6a6:	d52f      	bpl.n	800e708 <__swbuf_r+0x84>
 800e6a8:	6923      	ldr	r3, [r4, #16]
 800e6aa:	b36b      	cbz	r3, 800e708 <__swbuf_r+0x84>
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	6820      	ldr	r0, [r4, #0]
 800e6b0:	1ac0      	subs	r0, r0, r3
 800e6b2:	6963      	ldr	r3, [r4, #20]
 800e6b4:	b2f6      	uxtb	r6, r6
 800e6b6:	4283      	cmp	r3, r0
 800e6b8:	4637      	mov	r7, r6
 800e6ba:	dc04      	bgt.n	800e6c6 <__swbuf_r+0x42>
 800e6bc:	4621      	mov	r1, r4
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f000 f93c 	bl	800e93c <_fflush_r>
 800e6c4:	bb30      	cbnz	r0, 800e714 <__swbuf_r+0x90>
 800e6c6:	68a3      	ldr	r3, [r4, #8]
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	60a3      	str	r3, [r4, #8]
 800e6cc:	6823      	ldr	r3, [r4, #0]
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	6022      	str	r2, [r4, #0]
 800e6d2:	701e      	strb	r6, [r3, #0]
 800e6d4:	6963      	ldr	r3, [r4, #20]
 800e6d6:	3001      	adds	r0, #1
 800e6d8:	4283      	cmp	r3, r0
 800e6da:	d004      	beq.n	800e6e6 <__swbuf_r+0x62>
 800e6dc:	89a3      	ldrh	r3, [r4, #12]
 800e6de:	07db      	lsls	r3, r3, #31
 800e6e0:	d506      	bpl.n	800e6f0 <__swbuf_r+0x6c>
 800e6e2:	2e0a      	cmp	r6, #10
 800e6e4:	d104      	bne.n	800e6f0 <__swbuf_r+0x6c>
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f000 f927 	bl	800e93c <_fflush_r>
 800e6ee:	b988      	cbnz	r0, 800e714 <__swbuf_r+0x90>
 800e6f0:	4638      	mov	r0, r7
 800e6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6f4:	4b0a      	ldr	r3, [pc, #40]	; (800e720 <__swbuf_r+0x9c>)
 800e6f6:	429c      	cmp	r4, r3
 800e6f8:	d101      	bne.n	800e6fe <__swbuf_r+0x7a>
 800e6fa:	68ac      	ldr	r4, [r5, #8]
 800e6fc:	e7cf      	b.n	800e69e <__swbuf_r+0x1a>
 800e6fe:	4b09      	ldr	r3, [pc, #36]	; (800e724 <__swbuf_r+0xa0>)
 800e700:	429c      	cmp	r4, r3
 800e702:	bf08      	it	eq
 800e704:	68ec      	ldreq	r4, [r5, #12]
 800e706:	e7ca      	b.n	800e69e <__swbuf_r+0x1a>
 800e708:	4621      	mov	r1, r4
 800e70a:	4628      	mov	r0, r5
 800e70c:	f000 f81a 	bl	800e744 <__swsetup_r>
 800e710:	2800      	cmp	r0, #0
 800e712:	d0cb      	beq.n	800e6ac <__swbuf_r+0x28>
 800e714:	f04f 37ff 	mov.w	r7, #4294967295
 800e718:	e7ea      	b.n	800e6f0 <__swbuf_r+0x6c>
 800e71a:	bf00      	nop
 800e71c:	08011c4c 	.word	0x08011c4c
 800e720:	08011c6c 	.word	0x08011c6c
 800e724:	08011c2c 	.word	0x08011c2c

0800e728 <__ascii_wctomb>:
 800e728:	b149      	cbz	r1, 800e73e <__ascii_wctomb+0x16>
 800e72a:	2aff      	cmp	r2, #255	; 0xff
 800e72c:	bf85      	ittet	hi
 800e72e:	238a      	movhi	r3, #138	; 0x8a
 800e730:	6003      	strhi	r3, [r0, #0]
 800e732:	700a      	strbls	r2, [r1, #0]
 800e734:	f04f 30ff 	movhi.w	r0, #4294967295
 800e738:	bf98      	it	ls
 800e73a:	2001      	movls	r0, #1
 800e73c:	4770      	bx	lr
 800e73e:	4608      	mov	r0, r1
 800e740:	4770      	bx	lr
	...

0800e744 <__swsetup_r>:
 800e744:	4b32      	ldr	r3, [pc, #200]	; (800e810 <__swsetup_r+0xcc>)
 800e746:	b570      	push	{r4, r5, r6, lr}
 800e748:	681d      	ldr	r5, [r3, #0]
 800e74a:	4606      	mov	r6, r0
 800e74c:	460c      	mov	r4, r1
 800e74e:	b125      	cbz	r5, 800e75a <__swsetup_r+0x16>
 800e750:	69ab      	ldr	r3, [r5, #24]
 800e752:	b913      	cbnz	r3, 800e75a <__swsetup_r+0x16>
 800e754:	4628      	mov	r0, r5
 800e756:	f000 f985 	bl	800ea64 <__sinit>
 800e75a:	4b2e      	ldr	r3, [pc, #184]	; (800e814 <__swsetup_r+0xd0>)
 800e75c:	429c      	cmp	r4, r3
 800e75e:	d10f      	bne.n	800e780 <__swsetup_r+0x3c>
 800e760:	686c      	ldr	r4, [r5, #4]
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e768:	0719      	lsls	r1, r3, #28
 800e76a:	d42c      	bmi.n	800e7c6 <__swsetup_r+0x82>
 800e76c:	06dd      	lsls	r5, r3, #27
 800e76e:	d411      	bmi.n	800e794 <__swsetup_r+0x50>
 800e770:	2309      	movs	r3, #9
 800e772:	6033      	str	r3, [r6, #0]
 800e774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e778:	81a3      	strh	r3, [r4, #12]
 800e77a:	f04f 30ff 	mov.w	r0, #4294967295
 800e77e:	e03e      	b.n	800e7fe <__swsetup_r+0xba>
 800e780:	4b25      	ldr	r3, [pc, #148]	; (800e818 <__swsetup_r+0xd4>)
 800e782:	429c      	cmp	r4, r3
 800e784:	d101      	bne.n	800e78a <__swsetup_r+0x46>
 800e786:	68ac      	ldr	r4, [r5, #8]
 800e788:	e7eb      	b.n	800e762 <__swsetup_r+0x1e>
 800e78a:	4b24      	ldr	r3, [pc, #144]	; (800e81c <__swsetup_r+0xd8>)
 800e78c:	429c      	cmp	r4, r3
 800e78e:	bf08      	it	eq
 800e790:	68ec      	ldreq	r4, [r5, #12]
 800e792:	e7e6      	b.n	800e762 <__swsetup_r+0x1e>
 800e794:	0758      	lsls	r0, r3, #29
 800e796:	d512      	bpl.n	800e7be <__swsetup_r+0x7a>
 800e798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e79a:	b141      	cbz	r1, 800e7ae <__swsetup_r+0x6a>
 800e79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7a0:	4299      	cmp	r1, r3
 800e7a2:	d002      	beq.n	800e7aa <__swsetup_r+0x66>
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f7ff fb31 	bl	800de0c <_free_r>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	6363      	str	r3, [r4, #52]	; 0x34
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7b4:	81a3      	strh	r3, [r4, #12]
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	6063      	str	r3, [r4, #4]
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	f043 0308 	orr.w	r3, r3, #8
 800e7c4:	81a3      	strh	r3, [r4, #12]
 800e7c6:	6923      	ldr	r3, [r4, #16]
 800e7c8:	b94b      	cbnz	r3, 800e7de <__swsetup_r+0x9a>
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7d4:	d003      	beq.n	800e7de <__swsetup_r+0x9a>
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f000 fa09 	bl	800ebf0 <__smakebuf_r>
 800e7de:	89a0      	ldrh	r0, [r4, #12]
 800e7e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7e4:	f010 0301 	ands.w	r3, r0, #1
 800e7e8:	d00a      	beq.n	800e800 <__swsetup_r+0xbc>
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60a3      	str	r3, [r4, #8]
 800e7ee:	6963      	ldr	r3, [r4, #20]
 800e7f0:	425b      	negs	r3, r3
 800e7f2:	61a3      	str	r3, [r4, #24]
 800e7f4:	6923      	ldr	r3, [r4, #16]
 800e7f6:	b943      	cbnz	r3, 800e80a <__swsetup_r+0xc6>
 800e7f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e7fc:	d1ba      	bne.n	800e774 <__swsetup_r+0x30>
 800e7fe:	bd70      	pop	{r4, r5, r6, pc}
 800e800:	0781      	lsls	r1, r0, #30
 800e802:	bf58      	it	pl
 800e804:	6963      	ldrpl	r3, [r4, #20]
 800e806:	60a3      	str	r3, [r4, #8]
 800e808:	e7f4      	b.n	800e7f4 <__swsetup_r+0xb0>
 800e80a:	2000      	movs	r0, #0
 800e80c:	e7f7      	b.n	800e7fe <__swsetup_r+0xba>
 800e80e:	bf00      	nop
 800e810:	20000180 	.word	0x20000180
 800e814:	08011c4c 	.word	0x08011c4c
 800e818:	08011c6c 	.word	0x08011c6c
 800e81c:	08011c2c 	.word	0x08011c2c

0800e820 <abort>:
 800e820:	b508      	push	{r3, lr}
 800e822:	2006      	movs	r0, #6
 800e824:	f000 fa54 	bl	800ecd0 <raise>
 800e828:	2001      	movs	r0, #1
 800e82a:	f7f2 fd89 	bl	8001340 <_exit>
	...

0800e830 <__sflush_r>:
 800e830:	898a      	ldrh	r2, [r1, #12]
 800e832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e836:	4605      	mov	r5, r0
 800e838:	0710      	lsls	r0, r2, #28
 800e83a:	460c      	mov	r4, r1
 800e83c:	d458      	bmi.n	800e8f0 <__sflush_r+0xc0>
 800e83e:	684b      	ldr	r3, [r1, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	dc05      	bgt.n	800e850 <__sflush_r+0x20>
 800e844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e846:	2b00      	cmp	r3, #0
 800e848:	dc02      	bgt.n	800e850 <__sflush_r+0x20>
 800e84a:	2000      	movs	r0, #0
 800e84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e852:	2e00      	cmp	r6, #0
 800e854:	d0f9      	beq.n	800e84a <__sflush_r+0x1a>
 800e856:	2300      	movs	r3, #0
 800e858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e85c:	682f      	ldr	r7, [r5, #0]
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	d032      	beq.n	800e8c8 <__sflush_r+0x98>
 800e862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	075a      	lsls	r2, r3, #29
 800e868:	d505      	bpl.n	800e876 <__sflush_r+0x46>
 800e86a:	6863      	ldr	r3, [r4, #4]
 800e86c:	1ac0      	subs	r0, r0, r3
 800e86e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e870:	b10b      	cbz	r3, 800e876 <__sflush_r+0x46>
 800e872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e874:	1ac0      	subs	r0, r0, r3
 800e876:	2300      	movs	r3, #0
 800e878:	4602      	mov	r2, r0
 800e87a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e87c:	6a21      	ldr	r1, [r4, #32]
 800e87e:	4628      	mov	r0, r5
 800e880:	47b0      	blx	r6
 800e882:	1c43      	adds	r3, r0, #1
 800e884:	89a3      	ldrh	r3, [r4, #12]
 800e886:	d106      	bne.n	800e896 <__sflush_r+0x66>
 800e888:	6829      	ldr	r1, [r5, #0]
 800e88a:	291d      	cmp	r1, #29
 800e88c:	d82c      	bhi.n	800e8e8 <__sflush_r+0xb8>
 800e88e:	4a2a      	ldr	r2, [pc, #168]	; (800e938 <__sflush_r+0x108>)
 800e890:	40ca      	lsrs	r2, r1
 800e892:	07d6      	lsls	r6, r2, #31
 800e894:	d528      	bpl.n	800e8e8 <__sflush_r+0xb8>
 800e896:	2200      	movs	r2, #0
 800e898:	6062      	str	r2, [r4, #4]
 800e89a:	04d9      	lsls	r1, r3, #19
 800e89c:	6922      	ldr	r2, [r4, #16]
 800e89e:	6022      	str	r2, [r4, #0]
 800e8a0:	d504      	bpl.n	800e8ac <__sflush_r+0x7c>
 800e8a2:	1c42      	adds	r2, r0, #1
 800e8a4:	d101      	bne.n	800e8aa <__sflush_r+0x7a>
 800e8a6:	682b      	ldr	r3, [r5, #0]
 800e8a8:	b903      	cbnz	r3, 800e8ac <__sflush_r+0x7c>
 800e8aa:	6560      	str	r0, [r4, #84]	; 0x54
 800e8ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8ae:	602f      	str	r7, [r5, #0]
 800e8b0:	2900      	cmp	r1, #0
 800e8b2:	d0ca      	beq.n	800e84a <__sflush_r+0x1a>
 800e8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8b8:	4299      	cmp	r1, r3
 800e8ba:	d002      	beq.n	800e8c2 <__sflush_r+0x92>
 800e8bc:	4628      	mov	r0, r5
 800e8be:	f7ff faa5 	bl	800de0c <_free_r>
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	6360      	str	r0, [r4, #52]	; 0x34
 800e8c6:	e7c1      	b.n	800e84c <__sflush_r+0x1c>
 800e8c8:	6a21      	ldr	r1, [r4, #32]
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	47b0      	blx	r6
 800e8d0:	1c41      	adds	r1, r0, #1
 800e8d2:	d1c7      	bne.n	800e864 <__sflush_r+0x34>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d0c4      	beq.n	800e864 <__sflush_r+0x34>
 800e8da:	2b1d      	cmp	r3, #29
 800e8dc:	d001      	beq.n	800e8e2 <__sflush_r+0xb2>
 800e8de:	2b16      	cmp	r3, #22
 800e8e0:	d101      	bne.n	800e8e6 <__sflush_r+0xb6>
 800e8e2:	602f      	str	r7, [r5, #0]
 800e8e4:	e7b1      	b.n	800e84a <__sflush_r+0x1a>
 800e8e6:	89a3      	ldrh	r3, [r4, #12]
 800e8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ec:	81a3      	strh	r3, [r4, #12]
 800e8ee:	e7ad      	b.n	800e84c <__sflush_r+0x1c>
 800e8f0:	690f      	ldr	r7, [r1, #16]
 800e8f2:	2f00      	cmp	r7, #0
 800e8f4:	d0a9      	beq.n	800e84a <__sflush_r+0x1a>
 800e8f6:	0793      	lsls	r3, r2, #30
 800e8f8:	680e      	ldr	r6, [r1, #0]
 800e8fa:	bf08      	it	eq
 800e8fc:	694b      	ldreq	r3, [r1, #20]
 800e8fe:	600f      	str	r7, [r1, #0]
 800e900:	bf18      	it	ne
 800e902:	2300      	movne	r3, #0
 800e904:	eba6 0807 	sub.w	r8, r6, r7
 800e908:	608b      	str	r3, [r1, #8]
 800e90a:	f1b8 0f00 	cmp.w	r8, #0
 800e90e:	dd9c      	ble.n	800e84a <__sflush_r+0x1a>
 800e910:	6a21      	ldr	r1, [r4, #32]
 800e912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e914:	4643      	mov	r3, r8
 800e916:	463a      	mov	r2, r7
 800e918:	4628      	mov	r0, r5
 800e91a:	47b0      	blx	r6
 800e91c:	2800      	cmp	r0, #0
 800e91e:	dc06      	bgt.n	800e92e <__sflush_r+0xfe>
 800e920:	89a3      	ldrh	r3, [r4, #12]
 800e922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e926:	81a3      	strh	r3, [r4, #12]
 800e928:	f04f 30ff 	mov.w	r0, #4294967295
 800e92c:	e78e      	b.n	800e84c <__sflush_r+0x1c>
 800e92e:	4407      	add	r7, r0
 800e930:	eba8 0800 	sub.w	r8, r8, r0
 800e934:	e7e9      	b.n	800e90a <__sflush_r+0xda>
 800e936:	bf00      	nop
 800e938:	20400001 	.word	0x20400001

0800e93c <_fflush_r>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	690b      	ldr	r3, [r1, #16]
 800e940:	4605      	mov	r5, r0
 800e942:	460c      	mov	r4, r1
 800e944:	b913      	cbnz	r3, 800e94c <_fflush_r+0x10>
 800e946:	2500      	movs	r5, #0
 800e948:	4628      	mov	r0, r5
 800e94a:	bd38      	pop	{r3, r4, r5, pc}
 800e94c:	b118      	cbz	r0, 800e956 <_fflush_r+0x1a>
 800e94e:	6983      	ldr	r3, [r0, #24]
 800e950:	b90b      	cbnz	r3, 800e956 <_fflush_r+0x1a>
 800e952:	f000 f887 	bl	800ea64 <__sinit>
 800e956:	4b14      	ldr	r3, [pc, #80]	; (800e9a8 <_fflush_r+0x6c>)
 800e958:	429c      	cmp	r4, r3
 800e95a:	d11b      	bne.n	800e994 <_fflush_r+0x58>
 800e95c:	686c      	ldr	r4, [r5, #4]
 800e95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d0ef      	beq.n	800e946 <_fflush_r+0xa>
 800e966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e968:	07d0      	lsls	r0, r2, #31
 800e96a:	d404      	bmi.n	800e976 <_fflush_r+0x3a>
 800e96c:	0599      	lsls	r1, r3, #22
 800e96e:	d402      	bmi.n	800e976 <_fflush_r+0x3a>
 800e970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e972:	f000 f915 	bl	800eba0 <__retarget_lock_acquire_recursive>
 800e976:	4628      	mov	r0, r5
 800e978:	4621      	mov	r1, r4
 800e97a:	f7ff ff59 	bl	800e830 <__sflush_r>
 800e97e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e980:	07da      	lsls	r2, r3, #31
 800e982:	4605      	mov	r5, r0
 800e984:	d4e0      	bmi.n	800e948 <_fflush_r+0xc>
 800e986:	89a3      	ldrh	r3, [r4, #12]
 800e988:	059b      	lsls	r3, r3, #22
 800e98a:	d4dd      	bmi.n	800e948 <_fflush_r+0xc>
 800e98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e98e:	f000 f908 	bl	800eba2 <__retarget_lock_release_recursive>
 800e992:	e7d9      	b.n	800e948 <_fflush_r+0xc>
 800e994:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <_fflush_r+0x70>)
 800e996:	429c      	cmp	r4, r3
 800e998:	d101      	bne.n	800e99e <_fflush_r+0x62>
 800e99a:	68ac      	ldr	r4, [r5, #8]
 800e99c:	e7df      	b.n	800e95e <_fflush_r+0x22>
 800e99e:	4b04      	ldr	r3, [pc, #16]	; (800e9b0 <_fflush_r+0x74>)
 800e9a0:	429c      	cmp	r4, r3
 800e9a2:	bf08      	it	eq
 800e9a4:	68ec      	ldreq	r4, [r5, #12]
 800e9a6:	e7da      	b.n	800e95e <_fflush_r+0x22>
 800e9a8:	08011c4c 	.word	0x08011c4c
 800e9ac:	08011c6c 	.word	0x08011c6c
 800e9b0:	08011c2c 	.word	0x08011c2c

0800e9b4 <std>:
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	b510      	push	{r4, lr}
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	e9c0 3300 	strd	r3, r3, [r0]
 800e9be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9c2:	6083      	str	r3, [r0, #8]
 800e9c4:	8181      	strh	r1, [r0, #12]
 800e9c6:	6643      	str	r3, [r0, #100]	; 0x64
 800e9c8:	81c2      	strh	r2, [r0, #14]
 800e9ca:	6183      	str	r3, [r0, #24]
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	2208      	movs	r2, #8
 800e9d0:	305c      	adds	r0, #92	; 0x5c
 800e9d2:	f7fd fb59 	bl	800c088 <memset>
 800e9d6:	4b05      	ldr	r3, [pc, #20]	; (800e9ec <std+0x38>)
 800e9d8:	6263      	str	r3, [r4, #36]	; 0x24
 800e9da:	4b05      	ldr	r3, [pc, #20]	; (800e9f0 <std+0x3c>)
 800e9dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9de:	4b05      	ldr	r3, [pc, #20]	; (800e9f4 <std+0x40>)
 800e9e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9e2:	4b05      	ldr	r3, [pc, #20]	; (800e9f8 <std+0x44>)
 800e9e4:	6224      	str	r4, [r4, #32]
 800e9e6:	6323      	str	r3, [r4, #48]	; 0x30
 800e9e8:	bd10      	pop	{r4, pc}
 800e9ea:	bf00      	nop
 800e9ec:	0800ed09 	.word	0x0800ed09
 800e9f0:	0800ed2b 	.word	0x0800ed2b
 800e9f4:	0800ed63 	.word	0x0800ed63
 800e9f8:	0800ed87 	.word	0x0800ed87

0800e9fc <_cleanup_r>:
 800e9fc:	4901      	ldr	r1, [pc, #4]	; (800ea04 <_cleanup_r+0x8>)
 800e9fe:	f000 b8af 	b.w	800eb60 <_fwalk_reent>
 800ea02:	bf00      	nop
 800ea04:	0800e93d 	.word	0x0800e93d

0800ea08 <__sfmoreglue>:
 800ea08:	b570      	push	{r4, r5, r6, lr}
 800ea0a:	2268      	movs	r2, #104	; 0x68
 800ea0c:	1e4d      	subs	r5, r1, #1
 800ea0e:	4355      	muls	r5, r2
 800ea10:	460e      	mov	r6, r1
 800ea12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea16:	f7ff fa65 	bl	800dee4 <_malloc_r>
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	b140      	cbz	r0, 800ea30 <__sfmoreglue+0x28>
 800ea1e:	2100      	movs	r1, #0
 800ea20:	e9c0 1600 	strd	r1, r6, [r0]
 800ea24:	300c      	adds	r0, #12
 800ea26:	60a0      	str	r0, [r4, #8]
 800ea28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea2c:	f7fd fb2c 	bl	800c088 <memset>
 800ea30:	4620      	mov	r0, r4
 800ea32:	bd70      	pop	{r4, r5, r6, pc}

0800ea34 <__sfp_lock_acquire>:
 800ea34:	4801      	ldr	r0, [pc, #4]	; (800ea3c <__sfp_lock_acquire+0x8>)
 800ea36:	f000 b8b3 	b.w	800eba0 <__retarget_lock_acquire_recursive>
 800ea3a:	bf00      	nop
 800ea3c:	20002301 	.word	0x20002301

0800ea40 <__sfp_lock_release>:
 800ea40:	4801      	ldr	r0, [pc, #4]	; (800ea48 <__sfp_lock_release+0x8>)
 800ea42:	f000 b8ae 	b.w	800eba2 <__retarget_lock_release_recursive>
 800ea46:	bf00      	nop
 800ea48:	20002301 	.word	0x20002301

0800ea4c <__sinit_lock_acquire>:
 800ea4c:	4801      	ldr	r0, [pc, #4]	; (800ea54 <__sinit_lock_acquire+0x8>)
 800ea4e:	f000 b8a7 	b.w	800eba0 <__retarget_lock_acquire_recursive>
 800ea52:	bf00      	nop
 800ea54:	20002302 	.word	0x20002302

0800ea58 <__sinit_lock_release>:
 800ea58:	4801      	ldr	r0, [pc, #4]	; (800ea60 <__sinit_lock_release+0x8>)
 800ea5a:	f000 b8a2 	b.w	800eba2 <__retarget_lock_release_recursive>
 800ea5e:	bf00      	nop
 800ea60:	20002302 	.word	0x20002302

0800ea64 <__sinit>:
 800ea64:	b510      	push	{r4, lr}
 800ea66:	4604      	mov	r4, r0
 800ea68:	f7ff fff0 	bl	800ea4c <__sinit_lock_acquire>
 800ea6c:	69a3      	ldr	r3, [r4, #24]
 800ea6e:	b11b      	cbz	r3, 800ea78 <__sinit+0x14>
 800ea70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea74:	f7ff bff0 	b.w	800ea58 <__sinit_lock_release>
 800ea78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea7c:	6523      	str	r3, [r4, #80]	; 0x50
 800ea7e:	4b13      	ldr	r3, [pc, #76]	; (800eacc <__sinit+0x68>)
 800ea80:	4a13      	ldr	r2, [pc, #76]	; (800ead0 <__sinit+0x6c>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea86:	42a3      	cmp	r3, r4
 800ea88:	bf04      	itt	eq
 800ea8a:	2301      	moveq	r3, #1
 800ea8c:	61a3      	streq	r3, [r4, #24]
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f000 f820 	bl	800ead4 <__sfp>
 800ea94:	6060      	str	r0, [r4, #4]
 800ea96:	4620      	mov	r0, r4
 800ea98:	f000 f81c 	bl	800ead4 <__sfp>
 800ea9c:	60a0      	str	r0, [r4, #8]
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f000 f818 	bl	800ead4 <__sfp>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	60e0      	str	r0, [r4, #12]
 800eaa8:	2104      	movs	r1, #4
 800eaaa:	6860      	ldr	r0, [r4, #4]
 800eaac:	f7ff ff82 	bl	800e9b4 <std>
 800eab0:	68a0      	ldr	r0, [r4, #8]
 800eab2:	2201      	movs	r2, #1
 800eab4:	2109      	movs	r1, #9
 800eab6:	f7ff ff7d 	bl	800e9b4 <std>
 800eaba:	68e0      	ldr	r0, [r4, #12]
 800eabc:	2202      	movs	r2, #2
 800eabe:	2112      	movs	r1, #18
 800eac0:	f7ff ff78 	bl	800e9b4 <std>
 800eac4:	2301      	movs	r3, #1
 800eac6:	61a3      	str	r3, [r4, #24]
 800eac8:	e7d2      	b.n	800ea70 <__sinit+0xc>
 800eaca:	bf00      	nop
 800eacc:	080118b0 	.word	0x080118b0
 800ead0:	0800e9fd 	.word	0x0800e9fd

0800ead4 <__sfp>:
 800ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead6:	4607      	mov	r7, r0
 800ead8:	f7ff ffac 	bl	800ea34 <__sfp_lock_acquire>
 800eadc:	4b1e      	ldr	r3, [pc, #120]	; (800eb58 <__sfp+0x84>)
 800eade:	681e      	ldr	r6, [r3, #0]
 800eae0:	69b3      	ldr	r3, [r6, #24]
 800eae2:	b913      	cbnz	r3, 800eaea <__sfp+0x16>
 800eae4:	4630      	mov	r0, r6
 800eae6:	f7ff ffbd 	bl	800ea64 <__sinit>
 800eaea:	3648      	adds	r6, #72	; 0x48
 800eaec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	d503      	bpl.n	800eafc <__sfp+0x28>
 800eaf4:	6833      	ldr	r3, [r6, #0]
 800eaf6:	b30b      	cbz	r3, 800eb3c <__sfp+0x68>
 800eaf8:	6836      	ldr	r6, [r6, #0]
 800eafa:	e7f7      	b.n	800eaec <__sfp+0x18>
 800eafc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb00:	b9d5      	cbnz	r5, 800eb38 <__sfp+0x64>
 800eb02:	4b16      	ldr	r3, [pc, #88]	; (800eb5c <__sfp+0x88>)
 800eb04:	60e3      	str	r3, [r4, #12]
 800eb06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb0a:	6665      	str	r5, [r4, #100]	; 0x64
 800eb0c:	f000 f847 	bl	800eb9e <__retarget_lock_init_recursive>
 800eb10:	f7ff ff96 	bl	800ea40 <__sfp_lock_release>
 800eb14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb1c:	6025      	str	r5, [r4, #0]
 800eb1e:	61a5      	str	r5, [r4, #24]
 800eb20:	2208      	movs	r2, #8
 800eb22:	4629      	mov	r1, r5
 800eb24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb28:	f7fd faae 	bl	800c088 <memset>
 800eb2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb34:	4620      	mov	r0, r4
 800eb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb38:	3468      	adds	r4, #104	; 0x68
 800eb3a:	e7d9      	b.n	800eaf0 <__sfp+0x1c>
 800eb3c:	2104      	movs	r1, #4
 800eb3e:	4638      	mov	r0, r7
 800eb40:	f7ff ff62 	bl	800ea08 <__sfmoreglue>
 800eb44:	4604      	mov	r4, r0
 800eb46:	6030      	str	r0, [r6, #0]
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d1d5      	bne.n	800eaf8 <__sfp+0x24>
 800eb4c:	f7ff ff78 	bl	800ea40 <__sfp_lock_release>
 800eb50:	230c      	movs	r3, #12
 800eb52:	603b      	str	r3, [r7, #0]
 800eb54:	e7ee      	b.n	800eb34 <__sfp+0x60>
 800eb56:	bf00      	nop
 800eb58:	080118b0 	.word	0x080118b0
 800eb5c:	ffff0001 	.word	0xffff0001

0800eb60 <_fwalk_reent>:
 800eb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb64:	4606      	mov	r6, r0
 800eb66:	4688      	mov	r8, r1
 800eb68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb6c:	2700      	movs	r7, #0
 800eb6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb72:	f1b9 0901 	subs.w	r9, r9, #1
 800eb76:	d505      	bpl.n	800eb84 <_fwalk_reent+0x24>
 800eb78:	6824      	ldr	r4, [r4, #0]
 800eb7a:	2c00      	cmp	r4, #0
 800eb7c:	d1f7      	bne.n	800eb6e <_fwalk_reent+0xe>
 800eb7e:	4638      	mov	r0, r7
 800eb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb84:	89ab      	ldrh	r3, [r5, #12]
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d907      	bls.n	800eb9a <_fwalk_reent+0x3a>
 800eb8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	d003      	beq.n	800eb9a <_fwalk_reent+0x3a>
 800eb92:	4629      	mov	r1, r5
 800eb94:	4630      	mov	r0, r6
 800eb96:	47c0      	blx	r8
 800eb98:	4307      	orrs	r7, r0
 800eb9a:	3568      	adds	r5, #104	; 0x68
 800eb9c:	e7e9      	b.n	800eb72 <_fwalk_reent+0x12>

0800eb9e <__retarget_lock_init_recursive>:
 800eb9e:	4770      	bx	lr

0800eba0 <__retarget_lock_acquire_recursive>:
 800eba0:	4770      	bx	lr

0800eba2 <__retarget_lock_release_recursive>:
 800eba2:	4770      	bx	lr

0800eba4 <__swhatbuf_r>:
 800eba4:	b570      	push	{r4, r5, r6, lr}
 800eba6:	460e      	mov	r6, r1
 800eba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebac:	2900      	cmp	r1, #0
 800ebae:	b096      	sub	sp, #88	; 0x58
 800ebb0:	4614      	mov	r4, r2
 800ebb2:	461d      	mov	r5, r3
 800ebb4:	da08      	bge.n	800ebc8 <__swhatbuf_r+0x24>
 800ebb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	602a      	str	r2, [r5, #0]
 800ebbe:	061a      	lsls	r2, r3, #24
 800ebc0:	d410      	bmi.n	800ebe4 <__swhatbuf_r+0x40>
 800ebc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebc6:	e00e      	b.n	800ebe6 <__swhatbuf_r+0x42>
 800ebc8:	466a      	mov	r2, sp
 800ebca:	f000 f903 	bl	800edd4 <_fstat_r>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	dbf1      	blt.n	800ebb6 <__swhatbuf_r+0x12>
 800ebd2:	9a01      	ldr	r2, [sp, #4]
 800ebd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ebd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ebdc:	425a      	negs	r2, r3
 800ebde:	415a      	adcs	r2, r3
 800ebe0:	602a      	str	r2, [r5, #0]
 800ebe2:	e7ee      	b.n	800ebc2 <__swhatbuf_r+0x1e>
 800ebe4:	2340      	movs	r3, #64	; 0x40
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	b016      	add	sp, #88	; 0x58
 800ebec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ebf0 <__smakebuf_r>:
 800ebf0:	898b      	ldrh	r3, [r1, #12]
 800ebf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebf4:	079d      	lsls	r5, r3, #30
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	460c      	mov	r4, r1
 800ebfa:	d507      	bpl.n	800ec0c <__smakebuf_r+0x1c>
 800ebfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec00:	6023      	str	r3, [r4, #0]
 800ec02:	6123      	str	r3, [r4, #16]
 800ec04:	2301      	movs	r3, #1
 800ec06:	6163      	str	r3, [r4, #20]
 800ec08:	b002      	add	sp, #8
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}
 800ec0c:	ab01      	add	r3, sp, #4
 800ec0e:	466a      	mov	r2, sp
 800ec10:	f7ff ffc8 	bl	800eba4 <__swhatbuf_r>
 800ec14:	9900      	ldr	r1, [sp, #0]
 800ec16:	4605      	mov	r5, r0
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f7ff f963 	bl	800dee4 <_malloc_r>
 800ec1e:	b948      	cbnz	r0, 800ec34 <__smakebuf_r+0x44>
 800ec20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec24:	059a      	lsls	r2, r3, #22
 800ec26:	d4ef      	bmi.n	800ec08 <__smakebuf_r+0x18>
 800ec28:	f023 0303 	bic.w	r3, r3, #3
 800ec2c:	f043 0302 	orr.w	r3, r3, #2
 800ec30:	81a3      	strh	r3, [r4, #12]
 800ec32:	e7e3      	b.n	800ebfc <__smakebuf_r+0xc>
 800ec34:	4b0d      	ldr	r3, [pc, #52]	; (800ec6c <__smakebuf_r+0x7c>)
 800ec36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	6020      	str	r0, [r4, #0]
 800ec3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec40:	81a3      	strh	r3, [r4, #12]
 800ec42:	9b00      	ldr	r3, [sp, #0]
 800ec44:	6163      	str	r3, [r4, #20]
 800ec46:	9b01      	ldr	r3, [sp, #4]
 800ec48:	6120      	str	r0, [r4, #16]
 800ec4a:	b15b      	cbz	r3, 800ec64 <__smakebuf_r+0x74>
 800ec4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec50:	4630      	mov	r0, r6
 800ec52:	f000 f8d1 	bl	800edf8 <_isatty_r>
 800ec56:	b128      	cbz	r0, 800ec64 <__smakebuf_r+0x74>
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	f023 0303 	bic.w	r3, r3, #3
 800ec5e:	f043 0301 	orr.w	r3, r3, #1
 800ec62:	81a3      	strh	r3, [r4, #12]
 800ec64:	89a0      	ldrh	r0, [r4, #12]
 800ec66:	4305      	orrs	r5, r0
 800ec68:	81a5      	strh	r5, [r4, #12]
 800ec6a:	e7cd      	b.n	800ec08 <__smakebuf_r+0x18>
 800ec6c:	0800e9fd 	.word	0x0800e9fd

0800ec70 <_malloc_usable_size_r>:
 800ec70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec74:	1f18      	subs	r0, r3, #4
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	bfbc      	itt	lt
 800ec7a:	580b      	ldrlt	r3, [r1, r0]
 800ec7c:	18c0      	addlt	r0, r0, r3
 800ec7e:	4770      	bx	lr

0800ec80 <_raise_r>:
 800ec80:	291f      	cmp	r1, #31
 800ec82:	b538      	push	{r3, r4, r5, lr}
 800ec84:	4604      	mov	r4, r0
 800ec86:	460d      	mov	r5, r1
 800ec88:	d904      	bls.n	800ec94 <_raise_r+0x14>
 800ec8a:	2316      	movs	r3, #22
 800ec8c:	6003      	str	r3, [r0, #0]
 800ec8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec96:	b112      	cbz	r2, 800ec9e <_raise_r+0x1e>
 800ec98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec9c:	b94b      	cbnz	r3, 800ecb2 <_raise_r+0x32>
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f000 f830 	bl	800ed04 <_getpid_r>
 800eca4:	462a      	mov	r2, r5
 800eca6:	4601      	mov	r1, r0
 800eca8:	4620      	mov	r0, r4
 800ecaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecae:	f000 b817 	b.w	800ece0 <_kill_r>
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d00a      	beq.n	800eccc <_raise_r+0x4c>
 800ecb6:	1c59      	adds	r1, r3, #1
 800ecb8:	d103      	bne.n	800ecc2 <_raise_r+0x42>
 800ecba:	2316      	movs	r3, #22
 800ecbc:	6003      	str	r3, [r0, #0]
 800ecbe:	2001      	movs	r0, #1
 800ecc0:	e7e7      	b.n	800ec92 <_raise_r+0x12>
 800ecc2:	2400      	movs	r4, #0
 800ecc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	4798      	blx	r3
 800eccc:	2000      	movs	r0, #0
 800ecce:	e7e0      	b.n	800ec92 <_raise_r+0x12>

0800ecd0 <raise>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <raise+0xc>)
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	6818      	ldr	r0, [r3, #0]
 800ecd6:	f7ff bfd3 	b.w	800ec80 <_raise_r>
 800ecda:	bf00      	nop
 800ecdc:	20000180 	.word	0x20000180

0800ece0 <_kill_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d07      	ldr	r5, [pc, #28]	; (800ed00 <_kill_r+0x20>)
 800ece4:	2300      	movs	r3, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	4611      	mov	r1, r2
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	f7f2 fb17 	bl	8001320 <_kill>
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	d102      	bne.n	800ecfc <_kill_r+0x1c>
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	b103      	cbz	r3, 800ecfc <_kill_r+0x1c>
 800ecfa:	6023      	str	r3, [r4, #0]
 800ecfc:	bd38      	pop	{r3, r4, r5, pc}
 800ecfe:	bf00      	nop
 800ed00:	200022fc 	.word	0x200022fc

0800ed04 <_getpid_r>:
 800ed04:	f7f2 bb04 	b.w	8001310 <_getpid>

0800ed08 <__sread>:
 800ed08:	b510      	push	{r4, lr}
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed10:	f000 f894 	bl	800ee3c <_read_r>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	bfab      	itete	ge
 800ed18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ed1c:	181b      	addge	r3, r3, r0
 800ed1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed22:	bfac      	ite	ge
 800ed24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed26:	81a3      	strhlt	r3, [r4, #12]
 800ed28:	bd10      	pop	{r4, pc}

0800ed2a <__swrite>:
 800ed2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed2e:	461f      	mov	r7, r3
 800ed30:	898b      	ldrh	r3, [r1, #12]
 800ed32:	05db      	lsls	r3, r3, #23
 800ed34:	4605      	mov	r5, r0
 800ed36:	460c      	mov	r4, r1
 800ed38:	4616      	mov	r6, r2
 800ed3a:	d505      	bpl.n	800ed48 <__swrite+0x1e>
 800ed3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed40:	2302      	movs	r3, #2
 800ed42:	2200      	movs	r2, #0
 800ed44:	f000 f868 	bl	800ee18 <_lseek_r>
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	4632      	mov	r2, r6
 800ed56:	463b      	mov	r3, r7
 800ed58:	4628      	mov	r0, r5
 800ed5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed5e:	f000 b817 	b.w	800ed90 <_write_r>

0800ed62 <__sseek>:
 800ed62:	b510      	push	{r4, lr}
 800ed64:	460c      	mov	r4, r1
 800ed66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed6a:	f000 f855 	bl	800ee18 <_lseek_r>
 800ed6e:	1c43      	adds	r3, r0, #1
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	bf15      	itete	ne
 800ed74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed7e:	81a3      	strheq	r3, [r4, #12]
 800ed80:	bf18      	it	ne
 800ed82:	81a3      	strhne	r3, [r4, #12]
 800ed84:	bd10      	pop	{r4, pc}

0800ed86 <__sclose>:
 800ed86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed8a:	f000 b813 	b.w	800edb4 <_close_r>
	...

0800ed90 <_write_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4d07      	ldr	r5, [pc, #28]	; (800edb0 <_write_r+0x20>)
 800ed94:	4604      	mov	r4, r0
 800ed96:	4608      	mov	r0, r1
 800ed98:	4611      	mov	r1, r2
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	602a      	str	r2, [r5, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	f7f2 faf5 	bl	800138e <_write>
 800eda4:	1c43      	adds	r3, r0, #1
 800eda6:	d102      	bne.n	800edae <_write_r+0x1e>
 800eda8:	682b      	ldr	r3, [r5, #0]
 800edaa:	b103      	cbz	r3, 800edae <_write_r+0x1e>
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	bd38      	pop	{r3, r4, r5, pc}
 800edb0:	200022fc 	.word	0x200022fc

0800edb4 <_close_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	4d06      	ldr	r5, [pc, #24]	; (800edd0 <_close_r+0x1c>)
 800edb8:	2300      	movs	r3, #0
 800edba:	4604      	mov	r4, r0
 800edbc:	4608      	mov	r0, r1
 800edbe:	602b      	str	r3, [r5, #0]
 800edc0:	f7f2 fb01 	bl	80013c6 <_close>
 800edc4:	1c43      	adds	r3, r0, #1
 800edc6:	d102      	bne.n	800edce <_close_r+0x1a>
 800edc8:	682b      	ldr	r3, [r5, #0]
 800edca:	b103      	cbz	r3, 800edce <_close_r+0x1a>
 800edcc:	6023      	str	r3, [r4, #0]
 800edce:	bd38      	pop	{r3, r4, r5, pc}
 800edd0:	200022fc 	.word	0x200022fc

0800edd4 <_fstat_r>:
 800edd4:	b538      	push	{r3, r4, r5, lr}
 800edd6:	4d07      	ldr	r5, [pc, #28]	; (800edf4 <_fstat_r+0x20>)
 800edd8:	2300      	movs	r3, #0
 800edda:	4604      	mov	r4, r0
 800eddc:	4608      	mov	r0, r1
 800edde:	4611      	mov	r1, r2
 800ede0:	602b      	str	r3, [r5, #0]
 800ede2:	f7f2 fafc 	bl	80013de <_fstat>
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	d102      	bne.n	800edf0 <_fstat_r+0x1c>
 800edea:	682b      	ldr	r3, [r5, #0]
 800edec:	b103      	cbz	r3, 800edf0 <_fstat_r+0x1c>
 800edee:	6023      	str	r3, [r4, #0]
 800edf0:	bd38      	pop	{r3, r4, r5, pc}
 800edf2:	bf00      	nop
 800edf4:	200022fc 	.word	0x200022fc

0800edf8 <_isatty_r>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	4d06      	ldr	r5, [pc, #24]	; (800ee14 <_isatty_r+0x1c>)
 800edfc:	2300      	movs	r3, #0
 800edfe:	4604      	mov	r4, r0
 800ee00:	4608      	mov	r0, r1
 800ee02:	602b      	str	r3, [r5, #0]
 800ee04:	f7f2 fafb 	bl	80013fe <_isatty>
 800ee08:	1c43      	adds	r3, r0, #1
 800ee0a:	d102      	bne.n	800ee12 <_isatty_r+0x1a>
 800ee0c:	682b      	ldr	r3, [r5, #0]
 800ee0e:	b103      	cbz	r3, 800ee12 <_isatty_r+0x1a>
 800ee10:	6023      	str	r3, [r4, #0]
 800ee12:	bd38      	pop	{r3, r4, r5, pc}
 800ee14:	200022fc 	.word	0x200022fc

0800ee18 <_lseek_r>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	4d07      	ldr	r5, [pc, #28]	; (800ee38 <_lseek_r+0x20>)
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	4608      	mov	r0, r1
 800ee20:	4611      	mov	r1, r2
 800ee22:	2200      	movs	r2, #0
 800ee24:	602a      	str	r2, [r5, #0]
 800ee26:	461a      	mov	r2, r3
 800ee28:	f7f2 faf4 	bl	8001414 <_lseek>
 800ee2c:	1c43      	adds	r3, r0, #1
 800ee2e:	d102      	bne.n	800ee36 <_lseek_r+0x1e>
 800ee30:	682b      	ldr	r3, [r5, #0]
 800ee32:	b103      	cbz	r3, 800ee36 <_lseek_r+0x1e>
 800ee34:	6023      	str	r3, [r4, #0]
 800ee36:	bd38      	pop	{r3, r4, r5, pc}
 800ee38:	200022fc 	.word	0x200022fc

0800ee3c <_read_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4d07      	ldr	r5, [pc, #28]	; (800ee5c <_read_r+0x20>)
 800ee40:	4604      	mov	r4, r0
 800ee42:	4608      	mov	r0, r1
 800ee44:	4611      	mov	r1, r2
 800ee46:	2200      	movs	r2, #0
 800ee48:	602a      	str	r2, [r5, #0]
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	f7f2 fa82 	bl	8001354 <_read>
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	d102      	bne.n	800ee5a <_read_r+0x1e>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	b103      	cbz	r3, 800ee5a <_read_r+0x1e>
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	bd38      	pop	{r3, r4, r5, pc}
 800ee5c:	200022fc 	.word	0x200022fc

0800ee60 <_init>:
 800ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee62:	bf00      	nop
 800ee64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee66:	bc08      	pop	{r3}
 800ee68:	469e      	mov	lr, r3
 800ee6a:	4770      	bx	lr

0800ee6c <_fini>:
 800ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6e:	bf00      	nop
 800ee70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee72:	bc08      	pop	{r3}
 800ee74:	469e      	mov	lr, r3
 800ee76:	4770      	bx	lr
