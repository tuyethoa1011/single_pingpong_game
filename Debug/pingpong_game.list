
pingpong_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002eac  08011190  08011190  00021190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801403c  0801403c  000303e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801403c  0801403c  0002403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014044  08014044  000303e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014044  08014044  00024044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014048  08014048  00024048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20000000  0801404c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000303e0  2**0
                  CONTENTS
 10 .bss          00005fd0  200003e0  200003e0  000303e0  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200063b0  200063b0  000303e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028908  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ec4  00000000  00000000  00058d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002210  00000000  00000000  0005ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f58  00000000  00000000  00060df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ccf6  00000000  00000000  00062d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d25e  00000000  00000000  0008fa3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5f3e  00000000  00000000  000bcc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b2bda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f34  00000000  00000000  001b2c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003e0 	.word	0x200003e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011174 	.word	0x08011174

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003e4 	.word	0x200003e4
 80001ec:	08011174 	.word	0x08011174

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000edc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <vApplicationGetIdleTaskMemory+0x30>)
 8000ee2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200003fc 	.word	0x200003fc
 8000efc:	200004b0 	.word	0x200004b0

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b0a4      	sub	sp, #144	; 0x90
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f002 fd1d 	bl	8003944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f899 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 f96d 	bl	80011ec <MX_GPIO_Init>
  MX_SPI5_Init();
 8000f12:	f000 f8ff 	bl	8001114 <MX_SPI5_Init>
  MX_TIM7_Init();
 8000f16:	f000 f933 	bl	8001180 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
    //Init LCD
	BSP_LCD_Init();
 8000f1a:	f001 fd01 	bl	8002920 <BSP_LCD_Init>

  //thiet lap cac thong so mac dinh ban dau cho viec hien thi ra man hinh LCD
  BSP_LCD_LayerDefaultInit(1,SDRAM_DEVICE_ADDR);
 8000f1e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f22:	2001      	movs	r0, #1
 8000f24:	f001 fd7e 	bl	8002a24 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f001 fddf 	bl	8002aec <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000f2e:	f002 f941 	bl	80031b4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8000f32:	4837      	ldr	r0, [pc, #220]	; (8001010 <main+0x110>)
 8000f34:	f001 fe4c 	bl	8002bd0 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 8000f38:	4835      	ldr	r0, [pc, #212]	; (8001010 <main+0x110>)
 8000f3a:	f001 fdff 	bl	8002b3c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f42:	f001 fde3 	bl	8002b0c <BSP_LCD_SetTextColor>

  BSP_LCD_SetFont(&Font20); //set kich thuoc font cho viec hien thi text ra man hinh LCD
 8000f46:	4833      	ldr	r0, [pc, #204]	; (8001014 <main+0x114>)
 8000f48:	f001 fe12 	bl	8002b70 <BSP_LCD_SetFont>
  BSP_LCD_GetFont();
 8000f4c:	f001 fe2a 	bl	8002ba4 <BSP_LCD_GetFont>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, Task01_Init, osPriorityAboveNormal, 0, 216);
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <main+0x118>)
 8000f52:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000f56:	461d      	mov	r5, r3
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000f64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 f9b7 	bl	800a2de <osThreadCreate>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a2a      	ldr	r2, [pc, #168]	; (800101c <main+0x11c>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Task02_Init, osPriorityNormal, 0, 216);
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <main+0x120>)
 8000f78:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f009 f9a4 	bl	800a2de <osThreadCreate>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a22      	ldr	r2, [pc, #136]	; (8001024 <main+0x124>)
 8000f9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, Task03_Init, osPriorityNormal, 0, 216);
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <main+0x128>)
 8000f9e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000fb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f009 f991 	bl	800a2de <osThreadCreate>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <main+0x12c>)
 8000fc0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, Task04_Init, osPriorityAboveNormal, 0, 216);
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <main+0x130>)
 8000fc4:	f107 0420 	add.w	r4, r7, #32
 8000fc8:	461d      	mov	r5, r3
 8000fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f009 f97e 	bl	800a2de <osThreadCreate>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <main+0x134>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task05, Task05_Init, osPriorityNormal, 0, 216);
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <main+0x138>)
 8000fea:	1d3c      	adds	r4, r7, #4
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task05Handle = osThreadCreate(osThread(Task05), NULL);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f009 f96d 	bl	800a2de <osThreadCreate>
 8001004:	4603      	mov	r3, r0
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <main+0x13c>)
 8001008:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800100a:	f009 f961 	bl	800a2d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100e:	e7fe      	b.n	800100e <main+0x10e>
 8001010:	ff008000 	.word	0xff008000
 8001014:	20000108 	.word	0x20000108
 8001018:	080111b8 	.word	0x080111b8
 800101c:	20000750 	.word	0x20000750
 8001020:	080111d4 	.word	0x080111d4
 8001024:	20000754 	.word	0x20000754
 8001028:	080111f0 	.word	0x080111f0
 800102c:	20000758 	.word	0x20000758
 8001030:	0801120c 	.word	0x0801120c
 8001034:	2000075c 	.word	0x2000075c
 8001038:	08011228 	.word	0x08011228
 800103c:	20000760 	.word	0x20000760

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d fa43 	bl	800e4da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <SystemClock_Config+0xcc>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <SystemClock_Config+0xd0>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010be:	2307      	movs	r3, #7
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 fa54 	bl	8006574 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010d2:	f000 fb01 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2302      	movs	r3, #2
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2105      	movs	r1, #5
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fcb5 	bl	8006a64 <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001100:	f000 faea 	bl	80016d8 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3750      	adds	r7, #80	; 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_SPI5_Init+0x64>)
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_SPI5_Init+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_SPI5_Init+0x64>)
 8001120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001124:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_SPI5_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_SPI5_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_SPI5_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_SPI5_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_SPI5_Init+0x64>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_SPI5_Init+0x64>)
 8001148:	2218      	movs	r2, #24
 800114a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_SPI5_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_SPI5_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_SPI5_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_SPI5_Init+0x64>)
 8001160:	220a      	movs	r2, #10
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_SPI5_Init+0x64>)
 8001166:	f006 f916 	bl	8007396 <HAL_SPI_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001170:	f000 fab2 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200006b0 	.word	0x200006b0
 800117c:	40015000 	.word	0x40015000

08001180 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM7_Init+0x64>)
 8001190:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_TIM7_Init+0x68>)
 8001192:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_TIM7_Init+0x64>)
 8001196:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800119a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_TIM7_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_TIM7_Init+0x64>)
 80011a4:	2209      	movs	r2, #9
 80011a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_TIM7_Init+0x64>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_TIM7_Init+0x64>)
 80011b0:	f006 ffee 	bl	8008190 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011ba:	f000 fa8d 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_TIM7_Init+0x64>)
 80011cc:	f007 fa70 	bl	80086b0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80011d6:	f000 fa7f 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000708 	.word	0x20000708
 80011e8:	40001400 	.word	0x40001400

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <MX_GPIO_Init+0xd4>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_GPIO_Init+0xd4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_GPIO_Init+0xd4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <MX_GPIO_Init+0xd4>)
 800127c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_GPIO_Init+0xd4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <MX_GPIO_Init+0xd8>)
 8001296:	f003 fbfd 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 800129a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_GPIO_Init+0xd8>)
 80012b4:	f003 f936 	bl	8004524 <HAL_GPIO_Init>

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021800 	.word	0x40021800

080012c8 <Task01_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01_Init */
void Task01_Init(void const * argument) //Task01: Khoi tao USB Virtual COM Port, lay toc do goc 3 truc xyz tu gyro va chuyen doi sang angular rate cho ca 3 truc
{										//Xuat gia tri sensor cung nhu cac the loai bien qua COM de debug
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80012d0:	f00c fab6 	bl	800d840 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  //Init Gyro
  BSP_GYRO_Init();
 80012d4:	f001 fab0 	bl	8002838 <BSP_GYRO_Init>

  for(;;)
  {
	 //lay gia tri toa do goc tu gyroscope
	  BSP_GYRO_GetXYZ(xyz_rotation);
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <Task01_Init+0x58>)
 80012da:	f001 fb0d 	bl	80028f8 <BSP_GYRO_GetXYZ>

	  for(int i = 0;i<3;i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	e016      	b.n	8001312 <Task01_Init+0x4a>
	  {
		  xyz_ang_rate[i] = (xyz_rotation[i]/2000)*70; //lay angular rate
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <Task01_Init+0x58>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001324 <Task01_Init+0x5c>
 80012f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001328 <Task01_Init+0x60>
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <Task01_Init+0x64>)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0;i<3;i++)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b02      	cmp	r3, #2
 8001316:	dde5      	ble.n	80012e4 <Task01_Init+0x1c>
	  }
	  //sprintf(msg_buf,"x:%f\n", xyz_ang_rate[0]);
	  //CDC_Transmit_HS(msg_buf,strlen((const char*)msg_buf)); //đoạn code được để trong comment để debug thông qua COM

	  osDelay(1);
 8001318:	2001      	movs	r0, #1
 800131a:	f009 f82c 	bl	800a376 <osDelay>
	  BSP_GYRO_GetXYZ(xyz_rotation);
 800131e:	e7db      	b.n	80012d8 <Task01_Init+0x10>
 8001320:	20000764 	.word	0x20000764
 8001324:	44fa0000 	.word	0x44fa0000
 8001328:	428c0000 	.word	0x428c0000
 800132c:	20000770 	.word	0x20000770

08001330 <Task02_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_Init */
void Task02_Init(void const * argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	if(xyz_ang_rate[0] >= 0){
 8001338:	4b72      	ldr	r3, [pc, #456]	; (8001504 <Task02_Init+0x1d4>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	f2c0 80d9 	blt.w	80014fc <Task02_Init+0x1cc>

    if(xyz_ang_rate[0] <= 25) //trang thai luc bong chua duoc tang - trang thai can bang
 800134a:	4b6e      	ldr	r3, [pc, #440]	; (8001504 <Task02_Init+0x1d4>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	d829      	bhi.n	80013b2 <Task02_Init+0x82>
    {
    	BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 800135e:	486a      	ldr	r0, [pc, #424]	; (8001508 <Task02_Init+0x1d8>)
 8001360:	f001 fc36 	bl	8002bd0 <BSP_LCD_Clear>
    	BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 160, 25);
 8001364:	f001 fb46 	bl	80029f4 <BSP_LCD_GetXSize>
 8001368:	4603      	mov	r3, r0
 800136a:	b29b      	uxth	r3, r3
 800136c:	3b78      	subs	r3, #120	; 0x78
 800136e:	b29b      	uxth	r3, r3
 8001370:	2219      	movs	r2, #25
 8001372:	21a0      	movs	r1, #160	; 0xa0
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fd93 	bl	8002ea0 <BSP_LCD_DrawCircle>
    	BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 120, 160, 25);
 800137a:	f001 fb3b 	bl	80029f4 <BSP_LCD_GetXSize>
 800137e:	4603      	mov	r3, r0
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b78      	subs	r3, #120	; 0x78
 8001384:	b29b      	uxth	r3, r3
 8001386:	2219      	movs	r2, #25
 8001388:	21a0      	movs	r1, #160	; 0xa0
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fe72 	bl	8003074 <BSP_LCD_FillCircle>


  	  sprintf(str,"%d",count_score);
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <Task02_Init+0x1dc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	495e      	ldr	r1, [pc, #376]	; (8001510 <Task02_Init+0x1e0>)
 8001398:	485e      	ldr	r0, [pc, #376]	; (8001514 <Task02_Init+0x1e4>)
 800139a:	f00d fe1f 	bl	800efdc <siprintf>
  	  //hien thi diem dat duoc tren man hinh
  	  //noi ket chuoi
  	  //BSP_LCD_DisplayStringAtLine(1,display_score);
  	  BSP_LCD_DisplayStringAt(11,13,display_score,LEFT_MODE);
 800139e:	2303      	movs	r3, #3
 80013a0:	4a5d      	ldr	r2, [pc, #372]	; (8001518 <Task02_Init+0x1e8>)
 80013a2:	210d      	movs	r1, #13
 80013a4:	200b      	movs	r0, #11
 80013a6:	f001 fc7f 	bl	8002ca8 <BSP_LCD_DisplayStringAt>


  	  osDelay(50);
 80013aa:	2032      	movs	r0, #50	; 0x32
 80013ac:	f008 ffe3 	bl	800a376 <osDelay>
 80013b0:	e0a4      	b.n	80014fc <Task02_Init+0x1cc>
    else //truong hop bong da duoc tang len
    {
    	//phu thuoc vao muc do tang bong tuc la lay tu angular rate x quyet dinh do to cua bong
      //do to cua bong cung chinh la khoang cach giua mat vot voi diem can bang
      //luc nay cho bong duoc tang len max roi tu tu ha xuong den diem can bang
    	height = fabs(xyz_ang_rate[0])/30 + 25;
 80013b2:	4b54      	ldr	r3, [pc, #336]	; (8001504 <Task02_Init+0x1d4>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eef0 7ae7 	vabs.f32	s15, s15
 80013bc:	ee17 0a90 	vmov	r0, s15
 80013c0:	f7ff f8d2 	bl	8000568 <__aeabi_f2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b54      	ldr	r3, [pc, #336]	; (800151c <Task02_Init+0x1ec>)
 80013ca:	f7ff fa4f 	bl	800086c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <Task02_Init+0x1f0>)
 80013dc:	f7fe ff66 	bl	80002ac <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbc6 	bl	8000b78 <__aeabi_d2iz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a4d      	ldr	r2, [pc, #308]	; (8001524 <Task02_Init+0x1f4>)
 80013f0:	6013      	str	r3, [r2, #0]

    	//neu height qua lon chung ta se set max height, tranh truong hop bong vuot ra ngoai pham vi cho phep
    	if(height > 110)
 80013f2:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <Task02_Init+0x1f4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b6e      	cmp	r3, #110	; 0x6e
 80013f8:	dd02      	ble.n	8001400 <Task02_Init+0xd0>
    	{
    		height = 110; //ep height khong vuot tam
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <Task02_Init+0x1f4>)
 80013fc:	226e      	movs	r2, #110	; 0x6e
 80013fe:	601a      	str	r2, [r3, #0]
    	}
    	//-- ket thuc set max height

 
		  flag = 1; //flag co de nhan biet khi nao bong duoc tang len va tinh diem
 8001400:	4b49      	ldr	r3, [pc, #292]	; (8001528 <Task02_Init+0x1f8>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
    	while(height!=25){
 8001406:	e033      	b.n	8001470 <Task02_Init+0x140>

    		if(count_height == height) break;
 8001408:	4b48      	ldr	r3, [pc, #288]	; (800152c <Task02_Init+0x1fc>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b45      	ldr	r3, [pc, #276]	; (8001524 <Task02_Init+0x1f4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d032      	beq.n	800147a <Task02_Init+0x14a>

    		++count_height;
 8001414:	4b45      	ldr	r3, [pc, #276]	; (800152c <Task02_Init+0x1fc>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a44      	ldr	r2, [pc, #272]	; (800152c <Task02_Init+0x1fc>)
 800141c:	6013      	str	r3, [r2, #0]

    		BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 160, count_height);
 800141e:	f001 fae9 	bl	80029f4 <BSP_LCD_GetXSize>
 8001422:	4603      	mov	r3, r0
 8001424:	b29b      	uxth	r3, r3
 8001426:	3b78      	subs	r3, #120	; 0x78
 8001428:	b29b      	uxth	r3, r3
 800142a:	4a40      	ldr	r2, [pc, #256]	; (800152c <Task02_Init+0x1fc>)
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	b292      	uxth	r2, r2
 8001430:	21a0      	movs	r1, #160	; 0xa0
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fd34 	bl	8002ea0 <BSP_LCD_DrawCircle>
    		BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 120, 160, count_height);
 8001438:	f001 fadc 	bl	80029f4 <BSP_LCD_GetXSize>
 800143c:	4603      	mov	r3, r0
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b78      	subs	r3, #120	; 0x78
 8001442:	b29b      	uxth	r3, r3
 8001444:	4a39      	ldr	r2, [pc, #228]	; (800152c <Task02_Init+0x1fc>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	b292      	uxth	r2, r2
 800144a:	21a0      	movs	r1, #160	; 0xa0
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fe11 	bl	8003074 <BSP_LCD_FillCircle>

    		BSP_LCD_DisplayStringAt(11,13,display_score,LEFT_MODE);
 8001452:	2303      	movs	r3, #3
 8001454:	4a30      	ldr	r2, [pc, #192]	; (8001518 <Task02_Init+0x1e8>)
 8001456:	210d      	movs	r1, #13
 8001458:	200b      	movs	r0, #11
 800145a:	f001 fc25 	bl	8002ca8 <BSP_LCD_DisplayStringAt>
    		BSP_LCD_DisplayStringAt(100,13,(uint8_t*)str,LEFT_MODE);
 800145e:	2303      	movs	r3, #3
 8001460:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <Task02_Init+0x1e4>)
 8001462:	210d      	movs	r1, #13
 8001464:	2064      	movs	r0, #100	; 0x64
 8001466:	f001 fc1f 	bl	8002ca8 <BSP_LCD_DisplayStringAt>

    		osDelay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f008 ff83 	bl	800a376 <osDelay>
    	while(height!=25){
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <Task02_Init+0x1f4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b19      	cmp	r3, #25
 8001476:	d1c7      	bne.n	8001408 <Task02_Init+0xd8>
 8001478:	e039      	b.n	80014ee <Task02_Init+0x1be>
    		if(count_height == height) break;
 800147a:	bf00      	nop

    		} //end while

    	while(count_height != 25)
 800147c:	e037      	b.n	80014ee <Task02_Init+0x1be>
    	{
    		count_height--;
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <Task02_Init+0x1fc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3b01      	subs	r3, #1
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <Task02_Init+0x1fc>)
 8001486:	6013      	str	r3, [r2, #0]
    		BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8001488:	481f      	ldr	r0, [pc, #124]	; (8001508 <Task02_Init+0x1d8>)
 800148a:	f001 fba1 	bl	8002bd0 <BSP_LCD_Clear>
    		BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 160, count_height);
 800148e:	f001 fab1 	bl	80029f4 <BSP_LCD_GetXSize>
 8001492:	4603      	mov	r3, r0
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b78      	subs	r3, #120	; 0x78
 8001498:	b29b      	uxth	r3, r3
 800149a:	4a24      	ldr	r2, [pc, #144]	; (800152c <Task02_Init+0x1fc>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	b292      	uxth	r2, r2
 80014a0:	21a0      	movs	r1, #160	; 0xa0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fcfc 	bl	8002ea0 <BSP_LCD_DrawCircle>
    		BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 120, 160, count_height);
 80014a8:	f001 faa4 	bl	80029f4 <BSP_LCD_GetXSize>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b78      	subs	r3, #120	; 0x78
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4a1d      	ldr	r2, [pc, #116]	; (800152c <Task02_Init+0x1fc>)
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	21a0      	movs	r1, #160	; 0xa0
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fdd9 	bl	8003074 <BSP_LCD_FillCircle>

    		sprintf(str,"%d",count_score);
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <Task02_Init+0x1dc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4911      	ldr	r1, [pc, #68]	; (8001510 <Task02_Init+0x1e0>)
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <Task02_Init+0x1e4>)
 80014cc:	f00d fd86 	bl	800efdc <siprintf>
    		//hien thi diem dat duoc tren man hinh
    		BSP_LCD_DisplayStringAt(11,13,display_score,LEFT_MODE);
 80014d0:	2303      	movs	r3, #3
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <Task02_Init+0x1e8>)
 80014d4:	210d      	movs	r1, #13
 80014d6:	200b      	movs	r0, #11
 80014d8:	f001 fbe6 	bl	8002ca8 <BSP_LCD_DisplayStringAt>
    		BSP_LCD_DisplayStringAt(100,13,(uint8_t*)str,LEFT_MODE);
 80014dc:	2303      	movs	r3, #3
 80014de:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <Task02_Init+0x1e4>)
 80014e0:	210d      	movs	r1, #13
 80014e2:	2064      	movs	r0, #100	; 0x64
 80014e4:	f001 fbe0 	bl	8002ca8 <BSP_LCD_DisplayStringAt>
    		osDelay(10);
 80014e8:	200a      	movs	r0, #10
 80014ea:	f008 ff44 	bl	800a376 <osDelay>
    	while(count_height != 25)
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <Task02_Init+0x1fc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b19      	cmp	r3, #25
 80014f4:	d1c3      	bne.n	800147e <Task02_Init+0x14e>
    	}
    	count_height = 25; //reset lai bien dem do do cao bong
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <Task02_Init+0x1fc>)
 80014f8:	2219      	movs	r2, #25
 80014fa:	601a      	str	r2, [r3, #0]
    	}
	}
	  osDelay(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f008 ff3a 	bl	800a376 <osDelay>
	if(xyz_ang_rate[0] >= 0){
 8001502:	e719      	b.n	8001338 <Task02_Init+0x8>
 8001504:	20000770 	.word	0x20000770
 8001508:	ff008000 	.word	0xff008000
 800150c:	20000788 	.word	0x20000788
 8001510:	08011244 	.word	0x08011244
 8001514:	2000078c 	.word	0x2000078c
 8001518:	20000084 	.word	0x20000084
 800151c:	403e0000 	.word	0x403e0000
 8001520:	40390000 	.word	0x40390000
 8001524:	2000077c 	.word	0x2000077c
 8001528:	20000784 	.word	0x20000784
 800152c:	20000080 	.word	0x20000080

08001530 <Task03_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03_Init */
void Task03_Init(void const * argument) //Task03: Xuat do cao bong qua Virtual COM port
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03_Init */
  /* Infinite loop */
  for(;;)
  {
  	sprintf(msg_buf,"Do cao bong:%d\n", count_height);
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <Task03_Init+0x30>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4909      	ldr	r1, [pc, #36]	; (8001564 <Task03_Init+0x34>)
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <Task03_Init+0x38>)
 8001542:	f00d fd4b 	bl	800efdc <siprintf>
  	CDC_Transmit_HS(msg_buf,strlen((const char*)msg_buf));
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <Task03_Init+0x38>)
 8001548:	f7fe fe52 	bl	80001f0 <strlen>
 800154c:	4603      	mov	r3, r0
 800154e:	b29b      	uxth	r3, r3
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <Task03_Init+0x38>)
 8001554:	f00c fa32 	bl	800d9bc <CDC_Transmit_HS>
    osDelay(100); // cu 100ms xuat do cao bong 1 lan
 8001558:	2064      	movs	r0, #100	; 0x64
 800155a:	f008 ff0c 	bl	800a376 <osDelay>
  	sprintf(msg_buf,"Do cao bong:%d\n", count_height);
 800155e:	e7eb      	b.n	8001538 <Task03_Init+0x8>
 8001560:	20000080 	.word	0x20000080
 8001564:	08011248 	.word	0x08011248
 8001568:	20000000 	.word	0x20000000

0800156c <Task04_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04_Init */
void Task04_Init(void const * argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task04_Init */
  /* Infinite loop */
  for(;;)
  {

	if(height >= 40 && height <= 110 && flag == 1)
 8001574:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <Task04_Init+0xfc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b27      	cmp	r3, #39	; 0x27
 800157a:	dd71      	ble.n	8001660 <Task04_Init+0xf4>
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <Task04_Init+0xfc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b6e      	cmp	r3, #110	; 0x6e
 8001582:	dc6d      	bgt.n	8001660 <Task04_Init+0xf4>
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <Task04_Init+0x100>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d169      	bne.n	8001660 <Task04_Init+0xf4>
	{
		++count_score;
 800158c:	4b38      	ldr	r3, [pc, #224]	; (8001670 <Task04_Init+0x104>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	4a37      	ldr	r2, [pc, #220]	; (8001670 <Task04_Init+0x104>)
 8001594:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	4835      	ldr	r0, [pc, #212]	; (8001674 <Task04_Init+0x108>)
 800159e:	f003 fa79 	bl	8004a94 <HAL_GPIO_WritePin>
		osDelay(1000);
 80015a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a6:	f008 fee6 	bl	800a376 <osDelay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b0:	4830      	ldr	r0, [pc, #192]	; (8001674 <Task04_Init+0x108>)
 80015b2:	f003 fa6f 	bl	8004a94 <HAL_GPIO_WritePin>

		  flag = 0;
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <Task04_Init+0x100>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
			//get current height
			compare_height = fabs(xyz_ang_rate[0])/30 + 25;
 80015bc:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <Task04_Init+0x10c>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eef0 7ae7 	vabs.f32	s15, s15
 80015c6:	ee17 0a90 	vmov	r0, s15
 80015ca:	f7fe ffcd 	bl	8000568 <__aeabi_f2d>
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <Task04_Init+0x110>)
 80015d4:	f7ff f94a 	bl	800086c <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <Task04_Init+0x114>)
 80015e6:	f7fe fe61 	bl	80002ac <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fac1 	bl	8000b78 <__aeabi_d2iz>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a22      	ldr	r2, [pc, #136]	; (8001684 <Task04_Init+0x118>)
 80015fa:	6013      	str	r3, [r2, #0]

			//neu height qua lon chung ta se set max height, tranh truong hop bong vuot ra ngoai pham vi cho phep
			if(compare_height > 110)
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <Task04_Init+0x118>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b6e      	cmp	r3, #110	; 0x6e
 8001602:	dd02      	ble.n	800160a <Task04_Init+0x9e>
			{
			    compare_height = 110; //ep height khong vuot tam
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <Task04_Init+0x118>)
 8001606:	226e      	movs	r2, #110	; 0x6e
 8001608:	601a      	str	r2, [r3, #0]
			}
			//-- ket thuc set max height
			if(compare_height >= 80)
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <Task04_Init+0x118>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b4f      	cmp	r3, #79	; 0x4f
 8001610:	dd26      	ble.n	8001660 <Task04_Init+0xf4>
			{
				//---- GAME OVER SCREEN ----
				//BEGIN
				    BSP_LCD_Clear(LCD_COLOR_RED);
 8001612:	481d      	ldr	r0, [pc, #116]	; (8001688 <Task04_Init+0x11c>)
 8001614:	f001 fadc 	bl	8002bd0 <BSP_LCD_Clear>
				    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001618:	481b      	ldr	r0, [pc, #108]	; (8001688 <Task04_Init+0x11c>)
 800161a:	f001 fa8f 	bl	8002b3c <BSP_LCD_SetBackColor>
				    BSP_LCD_DisplayStringAt(1, 130, "GAME OVER", CENTER_MODE);
 800161e:	2301      	movs	r3, #1
 8001620:	4a1a      	ldr	r2, [pc, #104]	; (800168c <Task04_Init+0x120>)
 8001622:	2182      	movs	r1, #130	; 0x82
 8001624:	2001      	movs	r0, #1
 8001626:	f001 fb3f 	bl	8002ca8 <BSP_LCD_DisplayStringAt>

				    BSP_LCD_DisplayStringAt(1,150,display_score,CENTER_MODE);
 800162a:	2301      	movs	r3, #1
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <Task04_Init+0x124>)
 800162e:	2196      	movs	r1, #150	; 0x96
 8001630:	2001      	movs	r0, #1
 8001632:	f001 fb39 	bl	8002ca8 <BSP_LCD_DisplayStringAt>
				    BSP_LCD_DisplayStringAt(1,175,(uint8_t*)str,CENTER_MODE);
 8001636:	2301      	movs	r3, #1
 8001638:	4a16      	ldr	r2, [pc, #88]	; (8001694 <Task04_Init+0x128>)
 800163a:	21af      	movs	r1, #175	; 0xaf
 800163c:	2001      	movs	r0, #1
 800163e:	f001 fb33 	bl	8002ca8 <BSP_LCD_DisplayStringAt>

				 //END

				    //turn on RED LED
				    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <Task04_Init+0x108>)
 800164a:	f003 fa23 	bl	8004a94 <HAL_GPIO_WritePin>

				    vTaskDelete(Task01_Init); //Xóa đi các task sau khi game over chỉ giữ lại mỗi task4 để hiển thị 'GAME OVER'
 800164e:	4812      	ldr	r0, [pc, #72]	; (8001698 <Task04_Init+0x12c>)
 8001650:	f009 fcfc 	bl	800b04c <vTaskDelete>
				    vTaskDelete(Task02_Init);
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <Task04_Init+0x130>)
 8001656:	f009 fcf9 	bl	800b04c <vTaskDelete>
				    vTaskDelete(Task03_Init);
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <Task04_Init+0x134>)
 800165c:	f009 fcf6 	bl	800b04c <vTaskDelete>
			}

	}
    osDelay(1);
 8001660:	2001      	movs	r0, #1
 8001662:	f008 fe88 	bl	800a376 <osDelay>
	if(height >= 40 && height <= 110 && flag == 1)
 8001666:	e785      	b.n	8001574 <Task04_Init+0x8>
 8001668:	2000077c 	.word	0x2000077c
 800166c:	20000784 	.word	0x20000784
 8001670:	20000788 	.word	0x20000788
 8001674:	40021800 	.word	0x40021800
 8001678:	20000770 	.word	0x20000770
 800167c:	403e0000 	.word	0x403e0000
 8001680:	40390000 	.word	0x40390000
 8001684:	20000780 	.word	0x20000780
 8001688:	ffff0000 	.word	0xffff0000
 800168c:	08011258 	.word	0x08011258
 8001690:	20000084 	.word	0x20000084
 8001694:	2000078c 	.word	0x2000078c
 8001698:	080012c9 	.word	0x080012c9
 800169c:	08001331 	.word	0x08001331
 80016a0:	08001531 	.word	0x08001531

080016a4 <Task05_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05_Init */
void Task05_Init(void const * argument) //Task05 để sẵn hiện tại chưa sử dụng, nhưng mục đích của task này là để khiển bóng bay theo phương chiều
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	  //thi oke
	  //doan nay minh co the lay angular rate y de xu ly tuy nhien thi neu dung thi minh phai lay goc
	  // dung moi 100s chang han
	  //nhan biet duoc do nghieng, thi bong se chay xuong chang han the ma tiec gio UART hu roi thi debug sao ta

  	osDelay(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f008 fe62 	bl	800a376 <osDelay>
 80016b2:	e7fb      	b.n	80016ac <Task05_Init+0x8>

080016b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016c6:	f002 f95f 	bl	8003988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40001000 	.word	0x40001000

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_MspInit+0x54>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_MspInit+0x54>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x54>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_MspInit+0x54>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_MspInit+0x54>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_MspInit+0x54>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	210f      	movs	r1, #15
 8001726:	f06f 0001 	mvn.w	r0, #1
 800172a:	f002 fa4d 	bl	8003bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <HAL_SPI_MspInit+0x94>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d134      	bne.n	80017c8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_SPI_MspInit+0x98>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_SPI_MspInit+0x98>)
 8001768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_SPI_MspInit+0x98>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_SPI_MspInit+0x98>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_SPI_MspInit+0x98>)
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_SPI_MspInit+0x98>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001796:	f44f 7360 	mov.w	r3, #896	; 0x380
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017a8:	2305      	movs	r3, #5
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4809      	ldr	r0, [pc, #36]	; (80017d8 <HAL_SPI_MspInit+0x9c>)
 80017b4:	f002 feb6 	bl	8004524 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2105      	movs	r1, #5
 80017bc:	2055      	movs	r0, #85	; 0x55
 80017be:	f002 fa03 	bl	8003bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80017c2:	2055      	movs	r0, #85	; 0x55
 80017c4:	f002 fa1c 	bl	8003c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40015000 	.word	0x40015000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40021400 	.word	0x40021400

080017dc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_SPI_MspDeInit+0x38>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_SPI_MspDeInit+0x3c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_SPI_MspDeInit+0x3c>)
 80017f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80017fa:	f44f 7160 	mov.w	r1, #896	; 0x380
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <HAL_SPI_MspDeInit+0x40>)
 8001800:	f003 f83c 	bl	800487c <HAL_GPIO_DeInit>

    /* SPI5 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI5_IRQn);
 8001804:	2055      	movs	r0, #85	; 0x55
 8001806:	f002 fa09 	bl	8003c1c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40015000 	.word	0x40015000
 8001818:	40023800 	.word	0x40023800
 800181c:	40021400 	.word	0x40021400

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_TIM_Base_MspInit+0x48>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d115      	bne.n	800185e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_TIM_Base_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_TIM_Base_MspInit+0x4c>)
 800183c:	f043 0320 	orr.w	r3, r3, #32
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	2037      	movs	r0, #55	; 0x37
 8001854:	f002 f9b8 	bl	8003bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001858:	2037      	movs	r0, #55	; 0x37
 800185a:	f002 f9d1 	bl	8003c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40001400 	.word	0x40001400
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_InitTick+0xe4>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a32      	ldr	r2, [pc, #200]	; (8001954 <HAL_InitTick+0xe4>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6413      	str	r3, [r2, #64]	; 0x40
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_InitTick+0xe4>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189c:	f107 0210 	add.w	r2, r7, #16
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 fae8 	bl	8006e7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018b6:	f005 facd 	bl	8006e54 <HAL_RCC_GetPCLK1Freq>
 80018ba:	6378      	str	r0, [r7, #52]	; 0x34
 80018bc:	e004      	b.n	80018c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018be:	f005 fac9 	bl	8006e54 <HAL_RCC_GetPCLK1Freq>
 80018c2:	4603      	mov	r3, r0
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <HAL_InitTick+0xe8>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	3b01      	subs	r3, #1
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_InitTick+0xec>)
 80018d8:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_InitTick+0xf0>)
 80018da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HAL_InitTick+0xec>)
 80018de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018e4:	4a1d      	ldr	r2, [pc, #116]	; (800195c <HAL_InitTick+0xec>)
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_InitTick+0xec>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_InitTick+0xec>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_InitTick+0xec>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018fc:	4817      	ldr	r0, [pc, #92]	; (800195c <HAL_InitTick+0xec>)
 80018fe:	f006 fc47 	bl	8008190 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800190c:	2b00      	cmp	r3, #0
 800190e:	d11b      	bne.n	8001948 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001910:	4812      	ldr	r0, [pc, #72]	; (800195c <HAL_InitTick+0xec>)
 8001912:	f006 fc8d 	bl	8008230 <HAL_TIM_Base_Start_IT>
 8001916:	4603      	mov	r3, r0
 8001918:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800191c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001924:	2036      	movs	r0, #54	; 0x36
 8001926:	f002 f96b 	bl	8003c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d808      	bhi.n	8001942 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	2036      	movs	r0, #54	; 0x36
 8001936:	f002 f947 	bl	8003bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_InitTick+0xf4>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e002      	b.n	8001948 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001948:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800194c:	4618      	mov	r0, r3
 800194e:	3738      	adds	r7, #56	; 0x38
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	431bde83 	.word	0x431bde83
 800195c:	20000798 	.word	0x20000798
 8001960:	40001000 	.word	0x40001000
 8001964:	20000114 	.word	0x20000114

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TIM6_DAC_IRQHandler+0x10>)
 800199a:	f006 fcb9 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000798 	.word	0x20000798

080019a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM7_IRQHandler+0x10>)
 80019ae:	f006 fcaf 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000708 	.word	0x20000708

080019bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <OTG_HS_IRQHandler+0x10>)
 80019c2:	f003 fcaa 	bl	800531a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20005c74 	.word	0x20005c74

080019d0 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <SPI5_IRQHandler+0x10>)
 80019d6:	f006 f97f 	bl	8007cd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200006b0 	.word	0x200006b0

080019e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_kill>:

int _kill(int pid, int sig)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019fe:	f00c fc3b 	bl	800e278 <__errno>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2216      	movs	r2, #22
 8001a06:	601a      	str	r2, [r3, #0]
	return -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_exit>:

void _exit (int status)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffe7 	bl	80019f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a26:	e7fe      	b.n	8001a26 <_exit+0x12>

08001a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00a      	b.n	8001a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4601      	mov	r1, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf0      	blt.n	8001a3a <_read+0x12>
	}

return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e009      	b.n	8001a88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf1      	blt.n	8001a74 <_write+0x12>
	}
	return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_close>:

int _close(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f00c fba0 	bl	800e278 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20030000 	.word	0x20030000
 8001b64:	00004000 	.word	0x00004000
 8001b68:	200007e0 	.word	0x200007e0
 8001b6c:	200063b0 	.word	0x200063b0

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
	  ldr   sp, =_estack       /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff ffd7 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f00c fc55 	bl	800e470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff f99b 	bl	8000f00 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
	  ldr   sp, =_estack       /* set stack pointer */
 8001bcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	200003e0 	.word	0x200003e0
  ldr r2, =_sidata
 8001bd8:	0801404c 	.word	0x0801404c
  ldr r2, =_sbss
 8001bdc:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 8001be0:	200063b0 	.word	0x200063b0

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>

08001be6 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8001bf4:	f000 fd68 	bl	80026c8 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8001bfe:	f107 030f 	add.w	r3, r7, #15
 8001c02:	2201      	movs	r2, #1
 8001c04:	2120      	movs	r1, #32
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fdaa 	bl	8002760 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2123      	movs	r1, #35	; 0x23
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fd9e 	bl	8002760 <GYRO_IO_Write>
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8001c40:	f000 fd42 	bl	80026c8 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8001c44:	1dfb      	adds	r3, r7, #7
 8001c46:	2201      	movs	r2, #1
 8001c48:	210f      	movs	r1, #15
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fdba 	bl	80027c4 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8001c50:	79fb      	ldrb	r3, [r7, #7]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	2201      	movs	r2, #1
 8001c64:	2124      	movs	r1, #36	; 0x24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fdac 	bl	80027c4 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2124      	movs	r1, #36	; 0x24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fd6f 	bl	8002760 <GYRO_IO_Write>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fd5a 	bl	8002760 <GYRO_IO_Write>
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001cc6:	f107 030f 	add.w	r3, r7, #15
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2130      	movs	r1, #48	; 0x30
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fd78 	bl	80027c4 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8001cd4:	f107 030e 	add.w	r3, r7, #14
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2122      	movs	r1, #34	; 0x22
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fd71 	bl	80027c4 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	121b      	asrs	r3, r3, #8
 8001cf2:	b25a      	sxtb	r2, r3
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	f023 0320 	bic.w	r3, r3, #32
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001d16:	f107 030f 	add.w	r3, r7, #15
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2130      	movs	r1, #48	; 0x30
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fd1e 	bl	8002760 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8001d24:	f107 030e 	add.w	r3, r7, #14
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2122      	movs	r1, #34	; 0x22
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fd17 	bl	8002760 <GYRO_IO_Write>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001d44:	f107 030f 	add.w	r3, r7, #15
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2122      	movs	r1, #34	; 0x22
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fd39 	bl	80027c4 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e00c      	b.n	8001d88 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d109      	bne.n	8001d88 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	f023 0308 	bic.w	r3, r3, #8
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001d88:	f107 030f 	add.w	r3, r7, #15
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2122      	movs	r1, #34	; 0x22
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fce5 	bl	8002760 <GYRO_IO_Write>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001da8:	f107 030f 	add.w	r3, r7, #15
 8001dac:	2201      	movs	r2, #1
 8001dae:	2122      	movs	r1, #34	; 0x22
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fd07 	bl	80027c4 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e009      	b.n	8001de0 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d106      	bne.n	8001de0 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	f023 0308 	bic.w	r3, r3, #8
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001de0:	f107 030f 	add.w	r3, r7, #15
 8001de4:	2201      	movs	r2, #1
 8001de6:	2122      	movs	r1, #34	; 0x22
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fcb9 	bl	8002760 <GYRO_IO_Write>
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8001e00:	f107 030f 	add.w	r3, r7, #15
 8001e04:	2201      	movs	r2, #1
 8001e06:	2121      	movs	r1, #33	; 0x21
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fcdb 	bl	80027c4 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8001e22:	f107 030f 	add.w	r3, r7, #15
 8001e26:	2201      	movs	r2, #1
 8001e28:	2121      	movs	r1, #33	; 0x21
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fc98 	bl	8002760 <GYRO_IO_Write>
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001e42:	f107 030f 	add.w	r3, r7, #15
 8001e46:	2201      	movs	r2, #1
 8001e48:	2124      	movs	r1, #36	; 0x24
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fcba 	bl	80027c4 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	f023 0310 	bic.w	r3, r3, #16
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001e64:	f107 030f 	add.w	r3, r7, #15
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2124      	movs	r1, #36	; 0x24
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fc77 	bl	8002760 <GYRO_IO_Write>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8001ea4:	f107 030f 	add.w	r3, r7, #15
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	2123      	movs	r1, #35	; 0x23
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fc89 	bl	80027c4 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	2206      	movs	r2, #6
 8001eb8:	2128      	movs	r1, #40	; 0x28
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fc82 	bl	80027c4 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d123      	bne.n	8001f12 <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	e01c      	b.n	8001f0a <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	3328      	adds	r3, #40	; 0x28
 8001ed8:	443b      	add	r3, r7
 8001eda:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	3328      	adds	r3, #40	; 0x28
 8001eea:	443b      	add	r3, r7
 8001eec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	3328      	adds	r3, #40	; 0x28
 8001efe:	443b      	add	r3, r7
 8001f00:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	3301      	adds	r3, #1
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	dddf      	ble.n	8001ed0 <I3G4250D_ReadXYZAngRate+0x54>
 8001f10:	e022      	b.n	8001f58 <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
 8001f16:	e01c      	b.n	8001f52 <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	3328      	adds	r3, #40	; 0x28
 8001f1e:	443b      	add	r3, r7
 8001f20:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	3301      	adds	r3, #1
 8001f30:	3328      	adds	r3, #40	; 0x28
 8001f32:	443b      	add	r3, r7
 8001f34:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	3328      	adds	r3, #40	; 0x28
 8001f46:	443b      	add	r3, r7
 8001f48:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	623b      	str	r3, [r7, #32]
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	dddf      	ble.n	8001f18 <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d00c      	beq.n	8001f7c <I3G4250D_ReadXYZAngRate+0x100>
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	dc0d      	bgt.n	8001f82 <I3G4250D_ReadXYZAngRate+0x106>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <I3G4250D_ReadXYZAngRate+0xf4>
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d003      	beq.n	8001f76 <I3G4250D_ReadXYZAngRate+0xfa>
 8001f6e:	e008      	b.n	8001f82 <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8001f70:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <I3G4250D_ReadXYZAngRate+0x14c>)
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001f74:	e005      	b.n	8001f82 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <I3G4250D_ReadXYZAngRate+0x150>)
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001f7a:	e002      	b.n	8001f82 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <I3G4250D_ReadXYZAngRate+0x154>)
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001f80:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	e016      	b.n	8001fb6 <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	3328      	adds	r3, #40	; 0x28
 8001f8e:	443b      	add	r3, r7
 8001f90:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fac:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	dde5      	ble.n	8001f88 <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	410c0000 	.word	0x410c0000
 8001fcc:	418c0000 	.word	0x418c0000
 8001fd0:	428c0000 	.word	0x428c0000

08001fd4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001fd8:	f000 fa7c 	bl	80024d4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001fdc:	20ca      	movs	r0, #202	; 0xca
 8001fde:	f000 f95d 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001fe2:	20c3      	movs	r0, #195	; 0xc3
 8001fe4:	f000 f967 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001fe8:	2008      	movs	r0, #8
 8001fea:	f000 f964 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001fee:	2050      	movs	r0, #80	; 0x50
 8001ff0:	f000 f961 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001ff4:	20cf      	movs	r0, #207	; 0xcf
 8001ff6:	f000 f951 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f95b 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002000:	20c1      	movs	r0, #193	; 0xc1
 8002002:	f000 f958 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002006:	2030      	movs	r0, #48	; 0x30
 8002008:	f000 f955 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800200c:	20ed      	movs	r0, #237	; 0xed
 800200e:	f000 f945 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	f000 f94f 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f94c 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800201e:	2012      	movs	r0, #18
 8002020:	f000 f949 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002024:	2081      	movs	r0, #129	; 0x81
 8002026:	f000 f946 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800202a:	20e8      	movs	r0, #232	; 0xe8
 800202c:	f000 f936 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002030:	2085      	movs	r0, #133	; 0x85
 8002032:	f000 f940 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f93d 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800203c:	2078      	movs	r0, #120	; 0x78
 800203e:	f000 f93a 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002042:	20cb      	movs	r0, #203	; 0xcb
 8002044:	f000 f92a 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002048:	2039      	movs	r0, #57	; 0x39
 800204a:	f000 f934 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800204e:	202c      	movs	r0, #44	; 0x2c
 8002050:	f000 f931 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f000 f92e 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800205a:	2034      	movs	r0, #52	; 0x34
 800205c:	f000 f92b 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002060:	2002      	movs	r0, #2
 8002062:	f000 f928 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002066:	20f7      	movs	r0, #247	; 0xf7
 8002068:	f000 f918 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800206c:	2020      	movs	r0, #32
 800206e:	f000 f922 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002072:	20ea      	movs	r0, #234	; 0xea
 8002074:	f000 f912 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f000 f91c 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f000 f919 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002084:	20b1      	movs	r0, #177	; 0xb1
 8002086:	f000 f909 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800208a:	2000      	movs	r0, #0
 800208c:	f000 f913 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002090:	201b      	movs	r0, #27
 8002092:	f000 f910 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002096:	20b6      	movs	r0, #182	; 0xb6
 8002098:	f000 f900 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800209c:	200a      	movs	r0, #10
 800209e:	f000 f90a 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80020a2:	20a2      	movs	r0, #162	; 0xa2
 80020a4:	f000 f907 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80020a8:	20c0      	movs	r0, #192	; 0xc0
 80020aa:	f000 f8f7 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80020ae:	2010      	movs	r0, #16
 80020b0:	f000 f901 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80020b4:	20c1      	movs	r0, #193	; 0xc1
 80020b6:	f000 f8f1 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80020ba:	2010      	movs	r0, #16
 80020bc:	f000 f8fb 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80020c0:	20c5      	movs	r0, #197	; 0xc5
 80020c2:	f000 f8eb 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80020c6:	2045      	movs	r0, #69	; 0x45
 80020c8:	f000 f8f5 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80020cc:	2015      	movs	r0, #21
 80020ce:	f000 f8f2 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80020d2:	20c7      	movs	r0, #199	; 0xc7
 80020d4:	f000 f8e2 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80020d8:	2090      	movs	r0, #144	; 0x90
 80020da:	f000 f8ec 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80020de:	2036      	movs	r0, #54	; 0x36
 80020e0:	f000 f8dc 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80020e4:	20c8      	movs	r0, #200	; 0xc8
 80020e6:	f000 f8e6 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80020ea:	20f2      	movs	r0, #242	; 0xf2
 80020ec:	f000 f8d6 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f000 f8e0 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80020f6:	20b0      	movs	r0, #176	; 0xb0
 80020f8:	f000 f8d0 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80020fc:	20c2      	movs	r0, #194	; 0xc2
 80020fe:	f000 f8da 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002102:	20b6      	movs	r0, #182	; 0xb6
 8002104:	f000 f8ca 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002108:	200a      	movs	r0, #10
 800210a:	f000 f8d4 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800210e:	20a7      	movs	r0, #167	; 0xa7
 8002110:	f000 f8d1 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002114:	2027      	movs	r0, #39	; 0x27
 8002116:	f000 f8ce 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800211a:	2004      	movs	r0, #4
 800211c:	f000 f8cb 	bl	80022b6 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002120:	202a      	movs	r0, #42	; 0x2a
 8002122:	f000 f8bb 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f8c5 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800212c:	2000      	movs	r0, #0
 800212e:	f000 f8c2 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002132:	2000      	movs	r0, #0
 8002134:	f000 f8bf 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002138:	20ef      	movs	r0, #239	; 0xef
 800213a:	f000 f8bc 	bl	80022b6 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800213e:	202b      	movs	r0, #43	; 0x2b
 8002140:	f000 f8ac 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f000 f8b6 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f8b3 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002150:	2001      	movs	r0, #1
 8002152:	f000 f8b0 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002156:	203f      	movs	r0, #63	; 0x3f
 8002158:	f000 f8ad 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800215c:	20f6      	movs	r0, #246	; 0xf6
 800215e:	f000 f89d 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 f8a7 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f000 f8a4 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800216e:	2006      	movs	r0, #6
 8002170:	f000 f8a1 	bl	80022b6 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002174:	202c      	movs	r0, #44	; 0x2c
 8002176:	f000 f891 	bl	800229c <ili9341_WriteReg>
  LCD_Delay(200);
 800217a:	20c8      	movs	r0, #200	; 0xc8
 800217c:	f000 fa98 	bl	80026b0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002180:	2026      	movs	r0, #38	; 0x26
 8002182:	f000 f88b 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002186:	2001      	movs	r0, #1
 8002188:	f000 f895 	bl	80022b6 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800218c:	20e0      	movs	r0, #224	; 0xe0
 800218e:	f000 f885 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002192:	200f      	movs	r0, #15
 8002194:	f000 f88f 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002198:	2029      	movs	r0, #41	; 0x29
 800219a:	f000 f88c 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800219e:	2024      	movs	r0, #36	; 0x24
 80021a0:	f000 f889 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80021a4:	200c      	movs	r0, #12
 80021a6:	f000 f886 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80021aa:	200e      	movs	r0, #14
 80021ac:	f000 f883 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80021b0:	2009      	movs	r0, #9
 80021b2:	f000 f880 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80021b6:	204e      	movs	r0, #78	; 0x4e
 80021b8:	f000 f87d 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80021bc:	2078      	movs	r0, #120	; 0x78
 80021be:	f000 f87a 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80021c2:	203c      	movs	r0, #60	; 0x3c
 80021c4:	f000 f877 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80021c8:	2009      	movs	r0, #9
 80021ca:	f000 f874 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80021ce:	2013      	movs	r0, #19
 80021d0:	f000 f871 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80021d4:	2005      	movs	r0, #5
 80021d6:	f000 f86e 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80021da:	2017      	movs	r0, #23
 80021dc:	f000 f86b 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80021e0:	2011      	movs	r0, #17
 80021e2:	f000 f868 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f000 f865 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80021ec:	20e1      	movs	r0, #225	; 0xe1
 80021ee:	f000 f855 	bl	800229c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 f85f 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80021f8:	2016      	movs	r0, #22
 80021fa:	f000 f85c 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80021fe:	201b      	movs	r0, #27
 8002200:	f000 f859 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002204:	2004      	movs	r0, #4
 8002206:	f000 f856 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800220a:	2011      	movs	r0, #17
 800220c:	f000 f853 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002210:	2007      	movs	r0, #7
 8002212:	f000 f850 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002216:	2031      	movs	r0, #49	; 0x31
 8002218:	f000 f84d 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800221c:	2033      	movs	r0, #51	; 0x33
 800221e:	f000 f84a 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002222:	2042      	movs	r0, #66	; 0x42
 8002224:	f000 f847 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002228:	2005      	movs	r0, #5
 800222a:	f000 f844 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800222e:	200c      	movs	r0, #12
 8002230:	f000 f841 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002234:	200a      	movs	r0, #10
 8002236:	f000 f83e 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800223a:	2028      	movs	r0, #40	; 0x28
 800223c:	f000 f83b 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002240:	202f      	movs	r0, #47	; 0x2f
 8002242:	f000 f838 	bl	80022b6 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002246:	200f      	movs	r0, #15
 8002248:	f000 f835 	bl	80022b6 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800224c:	2011      	movs	r0, #17
 800224e:	f000 f825 	bl	800229c <ili9341_WriteReg>
  LCD_Delay(200);
 8002252:	20c8      	movs	r0, #200	; 0xc8
 8002254:	f000 fa2c 	bl	80026b0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002258:	2029      	movs	r0, #41	; 0x29
 800225a:	f000 f81f 	bl	800229c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800225e:	202c      	movs	r0, #44	; 0x2c
 8002260:	f000 f81c 	bl	800229c <ili9341_WriteReg>
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800226c:	f000 f932 	bl	80024d4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002270:	2103      	movs	r1, #3
 8002272:	20d3      	movs	r0, #211	; 0xd3
 8002274:	f000 f82c 	bl	80022d0 <ili9341_ReadData>
 8002278:	4603      	mov	r3, r0
 800227a:	b29b      	uxth	r3, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}

08002280 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002284:	2029      	movs	r0, #41	; 0x29
 8002286:	f000 f809 	bl	800229c <ili9341_WriteReg>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}

0800228e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002292:	2028      	movs	r0, #40	; 0x28
 8002294:	f000 f802 	bl	800229c <ili9341_WriteReg>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f9ad 	bl	8002608 <LCD_IO_WriteReg>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f97e 	bl	80025c4 <LCD_IO_WriteData>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	460a      	mov	r2, r1
 80022da:	80fb      	strh	r3, [r7, #6]
 80022dc:	4613      	mov	r3, r2
 80022de:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80022e0:	797a      	ldrb	r2, [r7, #5]
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f9b0 	bl	800264c <LCD_IO_ReadData>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80022fa:	23f0      	movs	r3, #240	; 0xf0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800230a:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800231c:	4819      	ldr	r0, [pc, #100]	; (8002384 <SPIx_Init+0x6c>)
 800231e:	f005 fde5 	bl	8007eec <HAL_SPI_GetState>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d12b      	bne.n	8002380 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <SPIx_Init+0x6c>)
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <SPIx_Init+0x70>)
 800232c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <SPIx_Init+0x6c>)
 8002330:	2218      	movs	r2, #24
 8002332:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <SPIx_Init+0x6c>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <SPIx_Init+0x6c>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <SPIx_Init+0x6c>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <SPIx_Init+0x6c>)
 8002348:	2200      	movs	r2, #0
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <SPIx_Init+0x6c>)
 800234e:	2207      	movs	r2, #7
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <SPIx_Init+0x6c>)
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <SPIx_Init+0x6c>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <SPIx_Init+0x6c>)
 8002360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002364:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <SPIx_Init+0x6c>)
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SPIx_Init+0x6c>)
 800236e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002372:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <SPIx_Init+0x6c>)
 8002376:	f000 f873 	bl	8002460 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800237a:	4802      	ldr	r0, [pc, #8]	; (8002384 <SPIx_Init+0x6c>)
 800237c:	f005 f80b 	bl	8007396 <HAL_SPI_Init>
  } 
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200007e4 	.word	0x200007e4
 8002388:	40015000 	.word	0x40015000

0800238c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <SPIx_Read+0x38>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f107 0108 	add.w	r1, r7, #8
 80023a6:	4808      	ldr	r0, [pc, #32]	; (80023c8 <SPIx_Read+0x3c>)
 80023a8:	f005 f9e2 	bl	8007770 <HAL_SPI_Receive>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80023b6:	f000 f847 	bl	8002448 <SPIx_Error>
  }
  
  return readvalue;
 80023ba:	68bb      	ldr	r3, [r7, #8]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200000fc 	.word	0x200000fc
 80023c8:	200007e4 	.word	0x200007e4

080023cc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <SPIx_Write+0x34>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1db9      	adds	r1, r7, #6
 80023e0:	2201      	movs	r2, #1
 80023e2:	4808      	ldr	r0, [pc, #32]	; (8002404 <SPIx_Write+0x38>)
 80023e4:	f005 f888 	bl	80074f8 <HAL_SPI_Transmit>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80023f2:	f000 f829 	bl	8002448 <SPIx_Error>
  }
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200000fc 	.word	0x200000fc
 8002404:	200007e4 	.word	0x200007e4

08002408 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <SPIx_WriteRead+0x38>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f107 020f 	add.w	r2, r7, #15
 800241e:	1df9      	adds	r1, r7, #7
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <SPIx_WriteRead+0x3c>)
 8002426:	f005 fab4 	bl	8007992 <HAL_SPI_TransmitReceive>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002430:	f000 f80a 	bl	8002448 <SPIx_Error>
  }
  
  return receivedbyte;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200000fc 	.word	0x200000fc
 8002444:	200007e4 	.word	0x200007e4

08002448 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <SPIx_Error+0x14>)
 800244e:	f005 f82b 	bl	80074a8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002452:	f7ff ff61 	bl	8002318 <SPIx_Init>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200007e4 	.word	0x200007e4

08002460 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <SPIx_MspInit+0x6c>)
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	4a16      	ldr	r2, [pc, #88]	; (80024cc <SPIx_MspInit+0x6c>)
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002476:	6453      	str	r3, [r2, #68]	; 0x44
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <SPIx_MspInit+0x6c>)
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <SPIx_MspInit+0x6c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <SPIx_MspInit+0x6c>)
 800248e:	f043 0320 	orr.w	r3, r3, #32
 8002492:	6313      	str	r3, [r2, #48]	; 0x30
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <SPIx_MspInit+0x6c>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80024a0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80024aa:	2302      	movs	r3, #2
 80024ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80024ae:	2301      	movs	r3, #1
 80024b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80024b2:	2305      	movs	r3, #5
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <SPIx_MspInit+0x70>)
 80024be:	f002 f831 	bl	8004524 <HAL_GPIO_Init>
}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40021400 	.word	0x40021400

080024d4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <LCD_IO_Init+0xe0>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d164      	bne.n	80025ac <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80024e2:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <LCD_IO_Init+0xe0>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <LCD_IO_Init+0xe4>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <LCD_IO_Init+0xe4>)
 80024f2:	f043 0308 	orr.w	r3, r3, #8
 80024f6:	6313      	str	r3, [r2, #48]	; 0x30
 80024f8:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <LCD_IO_Init+0xe4>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002508:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800250a:	2301      	movs	r3, #1
 800250c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	4619      	mov	r1, r3
 800251c:	4827      	ldr	r0, [pc, #156]	; (80025bc <LCD_IO_Init+0xe8>)
 800251e:	f002 f801 	bl	8004524 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <LCD_IO_Init+0xe4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <LCD_IO_Init+0xe4>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <LCD_IO_Init+0xe4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800254c:	2302      	movs	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	4619      	mov	r1, r3
 8002556:	4819      	ldr	r0, [pc, #100]	; (80025bc <LCD_IO_Init+0xe8>)
 8002558:	f001 ffe4 	bl	8004524 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <LCD_IO_Init+0xe4>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <LCD_IO_Init+0xe4>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6313      	str	r3, [r2, #48]	; 0x30
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <LCD_IO_Init+0xe4>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002578:	2304      	movs	r3, #4
 800257a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002584:	2302      	movs	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	4619      	mov	r1, r3
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <LCD_IO_Init+0xec>)
 8002590:	f001 ffc8 	bl	8004524 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002594:	2200      	movs	r2, #0
 8002596:	2104      	movs	r1, #4
 8002598:	4809      	ldr	r0, [pc, #36]	; (80025c0 <LCD_IO_Init+0xec>)
 800259a:	f002 fa7b 	bl	8004a94 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800259e:	2201      	movs	r2, #1
 80025a0:	2104      	movs	r1, #4
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <LCD_IO_Init+0xec>)
 80025a4:	f002 fa76 	bl	8004a94 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80025a8:	f7ff feb6 	bl	8002318 <SPIx_Init>
  }
}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2000083c 	.word	0x2000083c
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40020800 	.word	0x40020800

080025c4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80025ce:	2201      	movs	r2, #1
 80025d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d4:	480a      	ldr	r0, [pc, #40]	; (8002600 <LCD_IO_WriteData+0x3c>)
 80025d6:	f002 fa5d 	bl	8004a94 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80025da:	2200      	movs	r2, #0
 80025dc:	2104      	movs	r1, #4
 80025de:	4809      	ldr	r0, [pc, #36]	; (8002604 <LCD_IO_WriteData+0x40>)
 80025e0:	f002 fa58 	bl	8004a94 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fef0 	bl	80023cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80025ec:	2201      	movs	r2, #1
 80025ee:	2104      	movs	r1, #4
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <LCD_IO_WriteData+0x40>)
 80025f2:	f002 fa4f 	bl	8004a94 <HAL_GPIO_WritePin>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40020800 	.word	0x40020800

08002608 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002612:	2200      	movs	r2, #0
 8002614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002618:	480a      	ldr	r0, [pc, #40]	; (8002644 <LCD_IO_WriteReg+0x3c>)
 800261a:	f002 fa3b 	bl	8004a94 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800261e:	2200      	movs	r2, #0
 8002620:	2104      	movs	r1, #4
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <LCD_IO_WriteReg+0x40>)
 8002624:	f002 fa36 	bl	8004a94 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	b29b      	uxth	r3, r3
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fecd 	bl	80023cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002632:	2201      	movs	r2, #1
 8002634:	2104      	movs	r1, #4
 8002636:	4804      	ldr	r0, [pc, #16]	; (8002648 <LCD_IO_WriteReg+0x40>)
 8002638:	f002 fa2c 	bl	8004a94 <HAL_GPIO_WritePin>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40020c00 	.word	0x40020c00
 8002648:	40020800 	.word	0x40020800

0800264c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	460a      	mov	r2, r1
 8002656:	80fb      	strh	r3, [r7, #6]
 8002658:	4613      	mov	r3, r2
 800265a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002660:	2200      	movs	r2, #0
 8002662:	2104      	movs	r1, #4
 8002664:	4810      	ldr	r0, [pc, #64]	; (80026a8 <LCD_IO_ReadData+0x5c>)
 8002666:	f002 fa15 	bl	8004a94 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800266a:	2200      	movs	r2, #0
 800266c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002670:	480e      	ldr	r0, [pc, #56]	; (80026ac <LCD_IO_ReadData+0x60>)
 8002672:	f002 fa0f 	bl	8004a94 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fea7 	bl	80023cc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800267e:	797b      	ldrb	r3, [r7, #5]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe83 	bl	800238c <SPIx_Read>
 8002686:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800268e:	4807      	ldr	r0, [pc, #28]	; (80026ac <LCD_IO_ReadData+0x60>)
 8002690:	f002 fa00 	bl	8004a94 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002694:	2201      	movs	r2, #1
 8002696:	2104      	movs	r1, #4
 8002698:	4803      	ldr	r0, [pc, #12]	; (80026a8 <LCD_IO_ReadData+0x5c>)
 800269a:	f002 f9fb 	bl	8004a94 <HAL_GPIO_WritePin>
  
  return readvalue;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020c00 	.word	0x40020c00

080026b0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 f985 	bl	80039c8 <HAL_Delay>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <GYRO_IO_Init+0x8c>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <GYRO_IO_Init+0x8c>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <GYRO_IO_Init+0x8c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80026ea:	2302      	movs	r3, #2
 80026ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	4619      	mov	r1, r3
 8002700:	4815      	ldr	r0, [pc, #84]	; (8002758 <GYRO_IO_Init+0x90>)
 8002702:	f001 ff0f 	bl	8004524 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002706:	2201      	movs	r2, #1
 8002708:	2102      	movs	r1, #2
 800270a:	4813      	ldr	r0, [pc, #76]	; (8002758 <GYRO_IO_Init+0x90>)
 800270c:	f002 f9c2 	bl	8004a94 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <GYRO_IO_Init+0x8c>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <GYRO_IO_Init+0x8c>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6313      	str	r3, [r2, #48]	; 0x30
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <GYRO_IO_Init+0x8c>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800272c:	2306      	movs	r3, #6
 800272e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002734:	2302      	movs	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <GYRO_IO_Init+0x94>)
 8002744:	f001 feee 	bl	8004524 <HAL_GPIO_Init>

  SPIx_Init();
 8002748:	f7ff fde6 	bl	8002318 <SPIx_Init>
}
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	40020800 	.word	0x40020800
 800275c:	40020000 	.word	0x40020000

08002760 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	4613      	mov	r3, r2
 800276e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002770:	883b      	ldrh	r3, [r7, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d903      	bls.n	800277e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800277e:	2200      	movs	r2, #0
 8002780:	2102      	movs	r1, #2
 8002782:	480f      	ldr	r0, [pc, #60]	; (80027c0 <GYRO_IO_Write+0x60>)
 8002784:	f002 f986 	bl	8004a94 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fe3c 	bl	8002408 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002790:	e00a      	b.n	80027a8 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fe36 	bl	8002408 <SPIx_WriteRead>
    NumByteToWrite--;
 800279c:	883b      	ldrh	r3, [r7, #0]
 800279e:	3b01      	subs	r3, #1
 80027a0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3301      	adds	r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80027a8:	883b      	ldrh	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f1      	bne.n	8002792 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80027ae:	2201      	movs	r2, #1
 80027b0:	2102      	movs	r1, #2
 80027b2:	4803      	ldr	r0, [pc, #12]	; (80027c0 <GYRO_IO_Write+0x60>)
 80027b4:	f002 f96e 	bl	8004a94 <HAL_GPIO_WritePin>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40020800 	.word	0x40020800

080027c4 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
 80027d0:	4613      	mov	r3, r2
 80027d2:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80027d4:	883b      	ldrh	r3, [r7, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d904      	bls.n	80027e4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80027e0:	70fb      	strb	r3, [r7, #3]
 80027e2:	e003      	b.n	80027ec <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ea:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80027ec:	2200      	movs	r2, #0
 80027ee:	2102      	movs	r1, #2
 80027f0:	4810      	ldr	r0, [pc, #64]	; (8002834 <GYRO_IO_Read+0x70>)
 80027f2:	f002 f94f 	bl	8004a94 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fe05 	bl	8002408 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80027fe:	e00c      	b.n	800281a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff fe01 	bl	8002408 <SPIx_WriteRead>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800280e:	883b      	ldrh	r3, [r7, #0]
 8002810:	3b01      	subs	r3, #1
 8002812:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3301      	adds	r3, #1
 8002818:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800281a:	883b      	ldrh	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ef      	bne.n	8002800 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002820:	2201      	movs	r2, #1
 8002822:	2102      	movs	r1, #2
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <GYRO_IO_Read+0x70>)
 8002826:	f002 f935 	bl	8004a94 <HAL_GPIO_WritePin>
}  
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40020800 	.word	0x40020800

08002838 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002842:	2300      	movs	r3, #0
 8002844:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002846:	2300      	movs	r3, #0
 8002848:	703b      	strb	r3, [r7, #0]
 800284a:	2300      	movs	r3, #0
 800284c:	707b      	strb	r3, [r7, #1]

  if(I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <BSP_GYRO_Init+0xb8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4798      	blx	r3
 8002854:	4603      	mov	r3, r0
 8002856:	2bd3      	cmp	r3, #211	; 0xd3
 8002858:	d145      	bne.n	80028e6 <BSP_GYRO_Init+0xae>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <BSP_GYRO_Init+0xbc>)
 800285c:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <BSP_GYRO_Init+0xb8>)
 800285e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8002860:	2308      	movs	r3, #8
 8002862:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8002864:	2300      	movs	r3, #0
 8002866:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8002868:	2307      	movs	r3, #7
 800286a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 800286c:	2330      	movs	r3, #48	; 0x30
 800286e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8002870:	2300      	movs	r3, #0
 8002872:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8002874:	2300      	movs	r3, #0
 8002876:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8002878:	2310      	movs	r3, #16
 800287a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800287c:	793a      	ldrb	r2, [r7, #4]
 800287e:	797b      	ldrb	r3, [r7, #5]
 8002880:	4313      	orrs	r3, r2
 8002882:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002884:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002886:	4313      	orrs	r3, r2
 8002888:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800288a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800288c:	4313      	orrs	r3, r2
 800288e:	b2db      	uxtb	r3, r3
 8002890:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002892:	7a3a      	ldrb	r2, [r7, #8]
 8002894:	7a7b      	ldrb	r3, [r7, #9]
 8002896:	4313      	orrs	r3, r2
 8002898:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800289a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800289c:	4313      	orrs	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	89bb      	ldrh	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <BSP_GYRO_Init+0xbc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	89ba      	ldrh	r2, [r7, #12]
 80028b4:	4610      	mov	r0, r2
 80028b6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 80028b8:	2300      	movs	r3, #0
 80028ba:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 80028bc:	2300      	movs	r3, #0
 80028be:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80028c0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80028c2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <BSP_GYRO_Init+0xbc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	89ba      	ldrh	r2, [r7, #12]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4610      	mov	r0, r2
 80028d6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <BSP_GYRO_Init+0xbc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	2010      	movs	r0, #16
 80028e0:	4798      	blx	r3

    ret = GYRO_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000090 	.word	0x20000090
 80028f4:	20000840 	.word	0x20000840

080028f8 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <BSP_GYRO_GetXYZ+0x24>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <BSP_GYRO_GetXYZ+0x24>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
  }
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000840 	.word	0x20000840

08002920 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <BSP_LCD_Init+0xbc>)
 8002926:	4a2e      	ldr	r2, [pc, #184]	; (80029e0 <BSP_LCD_Init+0xc0>)
 8002928:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800292a:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <BSP_LCD_Init+0xbc>)
 800292c:	2209      	movs	r2, #9
 800292e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <BSP_LCD_Init+0xbc>)
 8002932:	2201      	movs	r2, #1
 8002934:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <BSP_LCD_Init+0xbc>)
 8002938:	221d      	movs	r2, #29
 800293a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <BSP_LCD_Init+0xbc>)
 800293e:	2203      	movs	r2, #3
 8002940:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <BSP_LCD_Init+0xbc>)
 8002944:	f240 120d 	movw	r2, #269	; 0x10d
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <BSP_LCD_Init+0xbc>)
 800294c:	f240 1243 	movw	r2, #323	; 0x143
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <BSP_LCD_Init+0xbc>)
 8002954:	f240 1217 	movw	r2, #279	; 0x117
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <BSP_LCD_Init+0xbc>)
 800295c:	f240 1247 	movw	r2, #327	; 0x147
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <BSP_LCD_Init+0xbc>)
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <BSP_LCD_Init+0xbc>)
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <BSP_LCD_Init+0xbc>)
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <BSP_LCD_Init+0xc4>)
 800297c:	2208      	movs	r2, #8
 800297e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <BSP_LCD_Init+0xc4>)
 8002982:	22c0      	movs	r2, #192	; 0xc0
 8002984:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <BSP_LCD_Init+0xc4>)
 8002988:	2204      	movs	r2, #4
 800298a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <BSP_LCD_Init+0xc4>)
 800298e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002994:	4813      	ldr	r0, [pc, #76]	; (80029e4 <BSP_LCD_Init+0xc4>)
 8002996:	f004 faa3 	bl	8006ee0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <BSP_LCD_Init+0xbc>)
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <BSP_LCD_Init+0xbc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <BSP_LCD_Init+0xbc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <BSP_LCD_Init+0xbc>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80029b2:	f000 fc0f 	bl	80031d4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <BSP_LCD_Init+0xbc>)
 80029b8:	f002 f886 	bl	8004ac8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <BSP_LCD_Init+0xc8>)
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <BSP_LCD_Init+0xcc>)
 80029c0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <BSP_LCD_Init+0xc8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80029ca:	f000 fdf1 	bl	80035b0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80029ce:	4808      	ldr	r0, [pc, #32]	; (80029f0 <BSP_LCD_Init+0xd0>)
 80029d0:	f000 f8ce 	bl	8002b70 <BSP_LCD_SetFont>

  return LCD_OK;
 80029d4:	2300      	movs	r3, #0
}  
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000844 	.word	0x20000844
 80029e0:	40016800 	.word	0x40016800
 80029e4:	2000092c 	.word	0x2000092c
 80029e8:	20000978 	.word	0x20000978
 80029ec:	200000c4 	.word	0x200000c4
 80029f0:	20000100 	.word	0x20000100

080029f4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <BSP_LCD_GetXSize+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	4798      	blx	r3
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000978 	.word	0x20000978

08002a0c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <BSP_LCD_GetYSize+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	4798      	blx	r3
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000978 	.word	0x20000978

08002a24 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b090      	sub	sp, #64	; 0x40
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002a34:	f7ff ffde 	bl	80029f4 <BSP_LCD_GetXSize>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002a40:	f7ff ffe4 	bl	8002a0c <BSP_LCD_GetYSize>
 8002a44:	4603      	mov	r3, r0
 8002a46:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002a50:	23ff      	movs	r3, #255	; 0xff
 8002a52:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a70:	2307      	movs	r3, #7
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002a74:	f7ff ffbe 	bl	80029f4 <BSP_LCD_GetXSize>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002a7c:	f7ff ffc6 	bl	8002a0c <BSP_LCD_GetYSize>
 8002a80:	4603      	mov	r3, r0
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002a8e:	f002 f8f5 	bl	8004c7c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	4913      	ldr	r1, [pc, #76]	; (8002ae4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002aba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	4909      	ldr	r1, [pc, #36]	; (8002ae4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ace:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ad2:	f002 f911 	bl	8004cf8 <HAL_LTDC_EnableDither>
}
 8002ad6:	bf00      	nop
 8002ad8:	3740      	adds	r7, #64	; 0x40
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000844 	.word	0x20000844
 8002ae4:	20000960 	.word	0x20000960
 8002ae8:	20000100 	.word	0x20000100

08002aec <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <BSP_LCD_SelectLayer+0x1c>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6013      	str	r3, [r2, #0]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	2000095c 	.word	0x2000095c

08002b0c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <BSP_LCD_SetTextColor+0x28>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <BSP_LCD_SetTextColor+0x2c>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	2000095c 	.word	0x2000095c
 8002b38:	20000960 	.word	0x20000960

08002b3c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <BSP_LCD_SetBackColor+0x2c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4908      	ldr	r1, [pc, #32]	; (8002b6c <BSP_LCD_SetBackColor+0x30>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3304      	adds	r3, #4
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000095c 	.word	0x2000095c
 8002b6c:	20000960 	.word	0x20000960

08002b70 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <BSP_LCD_SetFont+0x2c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4908      	ldr	r1, [pc, #32]	; (8002ba0 <BSP_LCD_SetFont+0x30>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3308      	adds	r3, #8
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000095c 	.word	0x2000095c
 8002ba0:	20000960 	.word	0x20000960

08002ba4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <BSP_LCD_GetFont+0x24>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <BSP_LCD_GetFont+0x28>)
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3308      	adds	r3, #8
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	2000095c 	.word	0x2000095c
 8002bcc:	20000960 	.word	0x20000960

08002bd0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <BSP_LCD_Clear+0x48>)
 8002bda:	681c      	ldr	r4, [r3, #0]
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <BSP_LCD_Clear+0x48>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <BSP_LCD_Clear+0x4c>)
 8002be2:	2134      	movs	r1, #52	; 0x34
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	335c      	adds	r3, #92	; 0x5c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461e      	mov	r6, r3
 8002bf0:	f7ff ff00 	bl	80029f4 <BSP_LCD_GetXSize>
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	f7ff ff09 	bl	8002a0c <BSP_LCD_GetYSize>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	2300      	movs	r3, #0
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	462a      	mov	r2, r5
 8002c08:	4631      	mov	r1, r6
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f000 fc98 	bl	8003540 <FillBuffer>
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c18:	2000095c 	.word	0x2000095c
 8002c1c:	20000844 	.word	0x20000844

08002c20 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	80bb      	strh	r3, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <BSP_LCD_DisplayChar+0x80>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	491b      	ldr	r1, [pc, #108]	; (8002ca4 <BSP_LCD_DisplayChar+0x84>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3308      	adds	r3, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <BSP_LCD_DisplayChar+0x80>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4c14      	ldr	r4, [pc, #80]	; (8002ca4 <BSP_LCD_DisplayChar+0x84>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4423      	add	r3, r4
 8002c5e:	3308      	adds	r3, #8
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c64:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <BSP_LCD_DisplayChar+0x80>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4c0d      	ldr	r4, [pc, #52]	; (8002ca4 <BSP_LCD_DisplayChar+0x84>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4423      	add	r3, r4
 8002c78:	3308      	adds	r3, #8
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	889b      	ldrh	r3, [r3, #4]
 8002c7e:	3307      	adds	r3, #7
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da00      	bge.n	8002c86 <BSP_LCD_DisplayChar+0x66>
 8002c84:	3307      	adds	r3, #7
 8002c86:	10db      	asrs	r3, r3, #3
 8002c88:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c8c:	18ca      	adds	r2, r1, r3
 8002c8e:	88b9      	ldrh	r1, [r7, #4]
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fb9a 	bl	80033cc <DrawChar>
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	2000095c 	.word	0x2000095c
 8002ca4:	20000960 	.word	0x20000960

08002ca8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60ba      	str	r2, [r7, #8]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	81fb      	strh	r3, [r7, #14]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	81bb      	strh	r3, [r7, #12]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	83fb      	strh	r3, [r7, #30]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002cd2:	e002      	b.n	8002cda <BSP_LCD_DisplayStringAt+0x32>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	617a      	str	r2, [r7, #20]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f6      	bne.n	8002cd4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ce6:	f7ff fe85 	bl	80029f4 <BSP_LCD_GetXSize>
 8002cea:	4601      	mov	r1, r0
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <BSP_LCD_DisplayStringAt+0x174>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	484b      	ldr	r0, [pc, #300]	; (8002e20 <BSP_LCD_DisplayStringAt+0x178>)
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4403      	add	r3, r0
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	889b      	ldrh	r3, [r3, #4]
 8002d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d06:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d01c      	beq.n	8002d48 <BSP_LCD_DisplayStringAt+0xa0>
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	dc33      	bgt.n	8002d7a <BSP_LCD_DisplayStringAt+0xd2>
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d002      	beq.n	8002d1c <BSP_LCD_DisplayStringAt+0x74>
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d019      	beq.n	8002d4e <BSP_LCD_DisplayStringAt+0xa6>
 8002d1a:	e02e      	b.n	8002d7a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad1      	subs	r1, r2, r3
 8002d22:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <BSP_LCD_DisplayStringAt+0x174>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	483e      	ldr	r0, [pc, #248]	; (8002e20 <BSP_LCD_DisplayStringAt+0x178>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4403      	add	r3, r0
 8002d32:	3308      	adds	r3, #8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	889b      	ldrh	r3, [r3, #4]
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	89fb      	ldrh	r3, [r7, #14]
 8002d42:	4413      	add	r3, r2
 8002d44:	83fb      	strh	r3, [r7, #30]
      break;
 8002d46:	e01b      	b.n	8002d80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	83fb      	strh	r3, [r7, #30]
      break;
 8002d4c:	e018      	b.n	8002d80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	b299      	uxth	r1, r3
 8002d56:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <BSP_LCD_DisplayStringAt+0x174>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4831      	ldr	r0, [pc, #196]	; (8002e20 <BSP_LCD_DisplayStringAt+0x178>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4403      	add	r3, r0
 8002d66:	3308      	adds	r3, #8
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	889b      	ldrh	r3, [r3, #4]
 8002d6c:	fb11 f303 	smulbb	r3, r1, r3
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	4413      	add	r3, r2
 8002d76:	83fb      	strh	r3, [r7, #30]
      break;
 8002d78:	e002      	b.n	8002d80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002d7a:	89fb      	ldrh	r3, [r7, #14]
 8002d7c:	83fb      	strh	r3, [r7, #30]
      break;
 8002d7e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002d80:	e01a      	b.n	8002db8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	89b9      	ldrh	r1, [r7, #12]
 8002d88:	8bfb      	ldrh	r3, [r7, #30]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff48 	bl	8002c20 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <BSP_LCD_DisplayStringAt+0x174>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4922      	ldr	r1, [pc, #136]	; (8002e20 <BSP_LCD_DisplayStringAt+0x178>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3308      	adds	r3, #8
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	889a      	ldrh	r2, [r3, #4]
 8002da6:	8bfb      	ldrh	r3, [r7, #30]
 8002da8:	4413      	add	r3, r2
 8002daa:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3301      	adds	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
    i++;
 8002db2:	8bbb      	ldrh	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2dc      	uxtb	r4, r3
 8002dc6:	f7ff fe15 	bl	80029f4 <BSP_LCD_GetXSize>
 8002dca:	8bb9      	ldrh	r1, [r7, #28]
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <BSP_LCD_DisplayStringAt+0x174>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4d13      	ldr	r5, [pc, #76]	; (8002e20 <BSP_LCD_DisplayStringAt+0x178>)
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	442b      	add	r3, r5
 8002ddc:	3308      	adds	r3, #8
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	889b      	ldrh	r3, [r3, #4]
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	1ac3      	subs	r3, r0, r3
 8002de8:	b299      	uxth	r1, r3
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <BSP_LCD_DisplayStringAt+0x174>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	480c      	ldr	r0, [pc, #48]	; (8002e20 <BSP_LCD_DisplayStringAt+0x178>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4403      	add	r3, r0
 8002dfa:	3308      	adds	r3, #8
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	889b      	ldrh	r3, [r3, #4]
 8002e00:	4299      	cmp	r1, r3
 8002e02:	bf2c      	ite	cs
 8002e04:	2301      	movcs	r3, #1
 8002e06:	2300      	movcc	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4023      	ands	r3, r4
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1b7      	bne.n	8002d82 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1c:	2000095c 	.word	0x2000095c
 8002e20:	20000960 	.word	0x20000960

08002e24 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	80bb      	strh	r3, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <BSP_LCD_DrawHLine+0x70>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <BSP_LCD_DrawHLine+0x74>)
 8002e40:	2134      	movs	r1, #52	; 0x34
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	335c      	adds	r3, #92	; 0x5c
 8002e4a:	681c      	ldr	r4, [r3, #0]
 8002e4c:	f7ff fdd2 	bl	80029f4 <BSP_LCD_GetXSize>
 8002e50:	4602      	mov	r2, r0
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	fb03 f202 	mul.w	r2, r3, r2
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4423      	add	r3, r4
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <BSP_LCD_DrawHLine+0x70>)
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	887c      	ldrh	r4, [r7, #2]
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <BSP_LCD_DrawHLine+0x70>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4d0b      	ldr	r5, [pc, #44]	; (8002e9c <BSP_LCD_DrawHLine+0x78>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	442b      	add	r3, r5
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2301      	movs	r3, #1
 8002e84:	4622      	mov	r2, r4
 8002e86:	f000 fb5b 	bl	8003540 <FillBuffer>
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000095c 	.word	0x2000095c
 8002e98:	20000844 	.word	0x20000844
 8002e9c:	20000960 	.word	0x20000960

08002ea0 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	80bb      	strh	r3, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	f1c3 0303 	rsb	r3, r3, #3
 8002eba:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002ec4:	e0c7      	b.n	8003056 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b298      	uxth	r0, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	88ba      	ldrh	r2, [r7, #4]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	b299      	uxth	r1, r3
 8002eda:	4b64      	ldr	r3, [pc, #400]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4c64      	ldr	r4, [pc, #400]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4423      	add	r3, r4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f000 fa47 	bl	8003380 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	b298      	uxth	r0, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	88ba      	ldrh	r2, [r7, #4]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b299      	uxth	r1, r3
 8002f06:	4b59      	ldr	r3, [pc, #356]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4c59      	ldr	r4, [pc, #356]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4423      	add	r3, r4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f000 fa31 	bl	8003380 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	4413      	add	r3, r2
 8002f26:	b298      	uxth	r0, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	88ba      	ldrh	r2, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	b299      	uxth	r1, r3
 8002f32:	4b4e      	ldr	r3, [pc, #312]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4c4e      	ldr	r4, [pc, #312]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4423      	add	r3, r4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f000 fa1b 	bl	8003380 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	b298      	uxth	r0, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	88ba      	ldrh	r2, [r7, #4]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	b299      	uxth	r1, r3
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4c43      	ldr	r4, [pc, #268]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4423      	add	r3, r4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f000 fa05 	bl	8003380 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	b298      	uxth	r0, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	b299      	uxth	r1, r3
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4c38      	ldr	r4, [pc, #224]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4423      	add	r3, r4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f000 f9ef 	bl	8003380 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	b298      	uxth	r0, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	88bb      	ldrh	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	b299      	uxth	r1, r3
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4c2d      	ldr	r4, [pc, #180]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4423      	add	r3, r4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f000 f9d9 	bl	8003380 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b298      	uxth	r0, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	b299      	uxth	r1, r3
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4c22      	ldr	r4, [pc, #136]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4423      	add	r3, r4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f000 f9c3 	bl	8003380 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b298      	uxth	r0, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	b29a      	uxth	r2, r3
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	b299      	uxth	r1, r3
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <BSP_LCD_DrawCircle+0x1cc>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4c17      	ldr	r4, [pc, #92]	; (8003070 <BSP_LCD_DrawCircle+0x1d0>)
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4423      	add	r3, r4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	f000 f9ad 	bl	8003380 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	da06      	bge.n	800303a <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	009a      	lsls	r2, r3, #2
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	4413      	add	r3, r2
 8003034:	3306      	adds	r3, #6
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e00a      	b.n	8003050 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	009a      	lsls	r2, r3, #2
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4413      	add	r3, r2
 8003046:	330a      	adds	r3, #10
 8003048:	617b      	str	r3, [r7, #20]
      cury--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3b01      	subs	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	3301      	adds	r3, #1
 8003054:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	429a      	cmp	r2, r3
 800305c:	f67f af33 	bls.w	8002ec6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	2000095c 	.word	0x2000095c
 8003070:	20000960 	.word	0x20000960

08003074 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
 800307e:	460b      	mov	r3, r1
 8003080:	80bb      	strh	r3, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	f1c3 0303 	rsb	r3, r3, #3
 800308e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003098:	4b44      	ldr	r3, [pc, #272]	; (80031ac <BSP_LCD_FillCircle+0x138>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4944      	ldr	r1, [pc, #272]	; (80031b0 <BSP_LCD_FillCircle+0x13c>)
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fd2e 	bl	8002b0c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80030b0:	e061      	b.n	8003176 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d021      	beq.n	80030fc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	b298      	uxth	r0, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	88bb      	ldrh	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	b299      	uxth	r1, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	f7ff fea5 	bl	8002e24 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	b298      	uxth	r0, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	88ba      	ldrh	r2, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	b299      	uxth	r1, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7ff fe94 	bl	8002e24 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d021      	beq.n	8003146 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	b29b      	uxth	r3, r3
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	b298      	uxth	r0, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	b29b      	uxth	r3, r3
 8003110:	88ba      	ldrh	r2, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	b299      	uxth	r1, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	b29b      	uxth	r3, r3
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	f7ff fe80 	bl	8002e24 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	b29b      	uxth	r3, r3
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b298      	uxth	r0, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	b29a      	uxth	r2, r3
 8003132:	88bb      	ldrh	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	b299      	uxth	r1, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	b29b      	uxth	r3, r3
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	f7ff fe6f 	bl	8002e24 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da06      	bge.n	800315a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	4413      	add	r3, r2
 8003154:	3306      	adds	r3, #6
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e00a      	b.n	8003170 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	4413      	add	r3, r2
 8003166:	330a      	adds	r3, #10
 8003168:	617b      	str	r3, [r7, #20]
      cury--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3b01      	subs	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	3301      	adds	r3, #1
 8003174:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	429a      	cmp	r2, r3
 800317c:	d999      	bls.n	80030b2 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <BSP_LCD_FillCircle+0x138>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	490b      	ldr	r1, [pc, #44]	; (80031b0 <BSP_LCD_FillCircle+0x13c>)
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fcbb 	bl	8002b0c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	88b9      	ldrh	r1, [r7, #4]
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fe7f 	bl	8002ea0 <BSP_LCD_DrawCircle>
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000095c 	.word	0x2000095c
 80031b0:	20000960 	.word	0x20000960

080031b4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <BSP_LCD_DisplayOn+0x1c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80031c2:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <BSP_LCD_DisplayOn+0x1c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4798      	blx	r3
  }
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000978 	.word	0x20000978

080031d4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08e      	sub	sp, #56	; 0x38
 80031d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	4b61      	ldr	r3, [pc, #388]	; (8003364 <BSP_LCD_MspInit+0x190>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a60      	ldr	r2, [pc, #384]	; (8003364 <BSP_LCD_MspInit+0x190>)
 80031e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <BSP_LCD_MspInit+0x190>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	4b5a      	ldr	r3, [pc, #360]	; (8003364 <BSP_LCD_MspInit+0x190>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a59      	ldr	r2, [pc, #356]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b57      	ldr	r3, [pc, #348]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	4b53      	ldr	r3, [pc, #332]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a52      	ldr	r2, [pc, #328]	; (8003364 <BSP_LCD_MspInit+0x190>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b50      	ldr	r3, [pc, #320]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	4b45      	ldr	r3, [pc, #276]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a44      	ldr	r2, [pc, #272]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b42      	ldr	r3, [pc, #264]	; (8003364 <BSP_LCD_MspInit+0x190>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <BSP_LCD_MspInit+0x190>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a3d      	ldr	r2, [pc, #244]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003270:	f043 0308 	orr.w	r3, r3, #8
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a36      	ldr	r2, [pc, #216]	; (8003364 <BSP_LCD_MspInit+0x190>)
 800328c:	f043 0320 	orr.w	r3, r3, #32
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <BSP_LCD_MspInit+0x190>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <BSP_LCD_MspInit+0x190>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <BSP_LCD_MspInit+0x190>)
 80032a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <BSP_LCD_MspInit+0x190>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80032ba:	f641 0358 	movw	r3, #6232	; 0x1858
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80032c8:	2302      	movs	r3, #2
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80032cc:	230e      	movs	r3, #14
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d4:	4619      	mov	r1, r3
 80032d6:	4824      	ldr	r0, [pc, #144]	; (8003368 <BSP_LCD_MspInit+0x194>)
 80032d8:	f001 f924 	bl	8004524 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80032dc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e6:	4619      	mov	r1, r3
 80032e8:	4820      	ldr	r0, [pc, #128]	; (800336c <BSP_LCD_MspInit+0x198>)
 80032ea:	f001 f91b 	bl	8004524 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80032ee:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80032f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f8:	4619      	mov	r1, r3
 80032fa:	481d      	ldr	r0, [pc, #116]	; (8003370 <BSP_LCD_MspInit+0x19c>)
 80032fc:	f001 f912 	bl	8004524 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003300:	2348      	movs	r3, #72	; 0x48
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003308:	4619      	mov	r1, r3
 800330a:	481a      	ldr	r0, [pc, #104]	; (8003374 <BSP_LCD_MspInit+0x1a0>)
 800330c:	f001 f90a 	bl	8004524 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331a:	4619      	mov	r1, r3
 800331c:	4816      	ldr	r0, [pc, #88]	; (8003378 <BSP_LCD_MspInit+0x1a4>)
 800331e:	f001 f901 	bl	8004524 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003322:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332c:	4619      	mov	r1, r3
 800332e:	4813      	ldr	r0, [pc, #76]	; (800337c <BSP_LCD_MspInit+0x1a8>)
 8003330:	f001 f8f8 	bl	8004524 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003334:	2303      	movs	r3, #3
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003338:	2309      	movs	r3, #9
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800333c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003340:	4619      	mov	r1, r3
 8003342:	480a      	ldr	r0, [pc, #40]	; (800336c <BSP_LCD_MspInit+0x198>)
 8003344:	f001 f8ee 	bl	8004524 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003348:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800334e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003352:	4619      	mov	r1, r3
 8003354:	4809      	ldr	r0, [pc, #36]	; (800337c <BSP_LCD_MspInit+0x1a8>)
 8003356:	f001 f8e5 	bl	8004524 <HAL_GPIO_Init>
}
 800335a:	bf00      	nop
 800335c:	3738      	adds	r7, #56	; 0x38
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40020000 	.word	0x40020000
 800336c:	40020400 	.word	0x40020400
 8003370:	40020800 	.word	0x40020800
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40021400 	.word	0x40021400
 800337c:	40021800 	.word	0x40021800

08003380 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003380:	b5b0      	push	{r4, r5, r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	603a      	str	r2, [r7, #0]
 800338a:	80fb      	strh	r3, [r7, #6]
 800338c:	460b      	mov	r3, r1
 800338e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <BSP_LCD_DrawPixel+0x44>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <BSP_LCD_DrawPixel+0x48>)
 8003396:	2134      	movs	r1, #52	; 0x34
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	335c      	adds	r3, #92	; 0x5c
 80033a0:	681c      	ldr	r4, [r3, #0]
 80033a2:	88bd      	ldrh	r5, [r7, #4]
 80033a4:	f7ff fb26 	bl	80029f4 <BSP_LCD_GetXSize>
 80033a8:	4603      	mov	r3, r0
 80033aa:	fb03 f205 	mul.w	r2, r3, r5
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4423      	add	r3, r4
 80033b6:	461a      	mov	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6013      	str	r3, [r2, #0]
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bdb0      	pop	{r4, r5, r7, pc}
 80033c4:	2000095c 	.word	0x2000095c
 80033c8:	20000844 	.word	0x20000844

080033cc <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	603a      	str	r2, [r7, #0]
 80033d6:	80fb      	strh	r3, [r7, #6]
 80033d8:	460b      	mov	r3, r1
 80033da:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <DrawChar+0x16c>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4953      	ldr	r1, [pc, #332]	; (800353c <DrawChar+0x170>)
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3308      	adds	r3, #8
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	88db      	ldrh	r3, [r3, #6]
 80033fe:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003400:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <DrawChar+0x16c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	494d      	ldr	r1, [pc, #308]	; (800353c <DrawChar+0x170>)
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3308      	adds	r3, #8
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	889b      	ldrh	r3, [r3, #4]
 8003416:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003418:	8a3b      	ldrh	r3, [r7, #16]
 800341a:	3307      	adds	r3, #7
 800341c:	2b00      	cmp	r3, #0
 800341e:	da00      	bge.n	8003422 <DrawChar+0x56>
 8003420:	3307      	adds	r3, #7
 8003422:	10db      	asrs	r3, r3, #3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	b2da      	uxtb	r2, r3
 800342a:	8a3b      	ldrh	r3, [r7, #16]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e076      	b.n	8003526 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003438:	8a3b      	ldrh	r3, [r7, #16]
 800343a:	3307      	adds	r3, #7
 800343c:	2b00      	cmp	r3, #0
 800343e:	da00      	bge.n	8003442 <DrawChar+0x76>
 8003440:	3307      	adds	r3, #7
 8003442:	10db      	asrs	r3, r3, #3
 8003444:	461a      	mov	r2, r3
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	4413      	add	r3, r2
 8003450:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003452:	8a3b      	ldrh	r3, [r7, #16]
 8003454:	3307      	adds	r3, #7
 8003456:	2b00      	cmp	r3, #0
 8003458:	da00      	bge.n	800345c <DrawChar+0x90>
 800345a:	3307      	adds	r3, #7
 800345c:	10db      	asrs	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d002      	beq.n	8003468 <DrawChar+0x9c>
 8003462:	2b02      	cmp	r3, #2
 8003464:	d004      	beq.n	8003470 <DrawChar+0xa4>
 8003466:	e00c      	b.n	8003482 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	617b      	str	r3, [r7, #20]
      break;
 800346e:	e016      	b.n	800349e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	3201      	adds	r2, #1
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
      break;
 8003480:	e00d      	b.n	800349e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	041a      	lsls	r2, r3, #16
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3301      	adds	r3, #1
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	4313      	orrs	r3, r2
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	3202      	adds	r2, #2
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
      break;
 800349c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e036      	b.n	8003512 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80034a4:	8a3a      	ldrh	r2, [r7, #16]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	1ad2      	subs	r2, r2, r3
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	4413      	add	r3, r2
 80034ae:	3b01      	subs	r3, #1
 80034b0:	2201      	movs	r2, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	4413      	add	r3, r2
 80034c8:	b298      	uxth	r0, r3
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <DrawChar+0x16c>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	491b      	ldr	r1, [pc, #108]	; (800353c <DrawChar+0x170>)
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	88bb      	ldrh	r3, [r7, #4]
 80034de:	4619      	mov	r1, r3
 80034e0:	f7ff ff4e 	bl	8003380 <BSP_LCD_DrawPixel>
 80034e4:	e012      	b.n	800350c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	4413      	add	r3, r2
 80034ee:	b298      	uxth	r0, r3
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <DrawChar+0x16c>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4911      	ldr	r1, [pc, #68]	; (800353c <DrawChar+0x170>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3304      	adds	r3, #4
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	88bb      	ldrh	r3, [r7, #4]
 8003506:	4619      	mov	r1, r3
 8003508:	f7ff ff3a 	bl	8003380 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	3301      	adds	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	8a3b      	ldrh	r3, [r7, #16]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	429a      	cmp	r2, r3
 8003518:	d3c4      	bcc.n	80034a4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800351a:	88bb      	ldrh	r3, [r7, #4]
 800351c:	3301      	adds	r3, #1
 800351e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	3301      	adds	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	8a7b      	ldrh	r3, [r7, #18]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	429a      	cmp	r2, r3
 800352c:	d384      	bcc.n	8003438 <DrawChar+0x6c>
  }
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	2000095c 	.word	0x2000095c
 800353c:	20000960 	.word	0x20000960

08003540 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <FillBuffer+0x68>)
 8003550:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003554:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <FillBuffer+0x68>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <FillBuffer+0x68>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003562:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <FillBuffer+0x68>)
 8003564:	4a11      	ldr	r2, [pc, #68]	; (80035ac <FillBuffer+0x6c>)
 8003566:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003568:	480f      	ldr	r0, [pc, #60]	; (80035a8 <FillBuffer+0x68>)
 800356a:	f000 fd45 	bl	8003ff8 <HAL_DMA2D_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d115      	bne.n	80035a0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	480c      	ldr	r0, [pc, #48]	; (80035a8 <FillBuffer+0x68>)
 8003578:	f000 fea6 	bl	80042c8 <HAL_DMA2D_ConfigLayer>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10e      	bne.n	80035a0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	4806      	ldr	r0, [pc, #24]	; (80035a8 <FillBuffer+0x68>)
 800358e:	f000 fd86 	bl	800409e <HAL_DMA2D_Start>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d103      	bne.n	80035a0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003598:	210a      	movs	r1, #10
 800359a:	4803      	ldr	r0, [pc, #12]	; (80035a8 <FillBuffer+0x68>)
 800359c:	f000 fdaa 	bl	80040f4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200008ec 	.word	0x200008ec
 80035ac:	4002b000 	.word	0x4002b000

080035b0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035b4:	4b29      	ldr	r3, [pc, #164]	; (800365c <BSP_SDRAM_Init+0xac>)
 80035b6:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <BSP_SDRAM_Init+0xb0>)
 80035b8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80035ba:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 80035bc:	2202      	movs	r2, #2
 80035be:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 80035c2:	2207      	movs	r2, #7
 80035c4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80035c6:	4b27      	ldr	r3, [pc, #156]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 80035c8:	2204      	movs	r2, #4
 80035ca:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 80035ce:	2207      	movs	r2, #7
 80035d0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 80035d4:	2202      	movs	r2, #2
 80035d6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 80035da:	2202      	movs	r2, #2
 80035dc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80035de:	4b21      	ldr	r3, [pc, #132]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 80035e0:	2202      	movs	r2, #2
 80035e2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <BSP_SDRAM_Init+0xac>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80035ea:	4b1c      	ldr	r3, [pc, #112]	; (800365c <BSP_SDRAM_Init+0xac>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <BSP_SDRAM_Init+0xac>)
 80035f2:	2204      	movs	r2, #4
 80035f4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <BSP_SDRAM_Init+0xac>)
 80035f8:	2210      	movs	r2, #16
 80035fa:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <BSP_SDRAM_Init+0xac>)
 80035fe:	2240      	movs	r2, #64	; 0x40
 8003600:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <BSP_SDRAM_Init+0xac>)
 8003604:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003608:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <BSP_SDRAM_Init+0xac>)
 800360c:	2200      	movs	r2, #0
 800360e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <BSP_SDRAM_Init+0xac>)
 8003612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003616:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <BSP_SDRAM_Init+0xac>)
 800361a:	2200      	movs	r2, #0
 800361c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <BSP_SDRAM_Init+0xac>)
 8003620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003626:	2100      	movs	r1, #0
 8003628:	480c      	ldr	r0, [pc, #48]	; (800365c <BSP_SDRAM_Init+0xac>)
 800362a:	f000 f87f 	bl	800372c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800362e:	490d      	ldr	r1, [pc, #52]	; (8003664 <BSP_SDRAM_Init+0xb4>)
 8003630:	480a      	ldr	r0, [pc, #40]	; (800365c <BSP_SDRAM_Init+0xac>)
 8003632:	f003 fe15 	bl	8007260 <HAL_SDRAM_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <BSP_SDRAM_Init+0xb8>)
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e002      	b.n	800364a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <BSP_SDRAM_Init+0xb8>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800364a:	f240 506a 	movw	r0, #1386	; 0x56a
 800364e:	f000 f80d 	bl	800366c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <BSP_SDRAM_Init+0xb8>)
 8003654:	781b      	ldrb	r3, [r3, #0]
}
 8003656:	4618      	mov	r0, r3
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	2000097c 	.word	0x2000097c
 8003660:	a0000140 	.word	0xa0000140
 8003664:	200009b0 	.word	0x200009b0
 8003668:	20000110 	.word	0x20000110

0800366c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003680:	2208      	movs	r2, #8
 8003682:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003686:	2201      	movs	r2, #1
 8003688:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003694:	4923      	ldr	r1, [pc, #140]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003696:	4824      	ldr	r0, [pc, #144]	; (8003728 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003698:	f003 fe20 	bl	80072dc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800369c:	2001      	movs	r0, #1
 800369e:	f000 f993 	bl	80039c8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036a4:	2202      	movs	r2, #2
 80036a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036aa:	2208      	movs	r2, #8
 80036ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80036ae:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80036ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036be:	4919      	ldr	r1, [pc, #100]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c0:	4819      	ldr	r0, [pc, #100]	; (8003728 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036c2:	f003 fe0b 	bl	80072dc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c8:	2203      	movs	r2, #3
 80036ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ce:	2208      	movs	r2, #8
 80036d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d4:	2204      	movs	r2, #4
 80036d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80036de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e2:	4910      	ldr	r1, [pc, #64]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e4:	4810      	ldr	r0, [pc, #64]	; (8003728 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036e6:	f003 fdf9 	bl	80072dc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80036ea:	f44f 730c 	mov.w	r3, #560	; 0x230
 80036ee:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f2:	2204      	movs	r2, #4
 80036f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f8:	2208      	movs	r2, #8
 80036fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fe:	2201      	movs	r2, #1
 8003700:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a07      	ldr	r2, [pc, #28]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003706:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370c:	4905      	ldr	r1, [pc, #20]	; (8003724 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370e:	4806      	ldr	r0, [pc, #24]	; (8003728 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003710:	f003 fde4 	bl	80072dc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4804      	ldr	r0, [pc, #16]	; (8003728 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003718:	f003 fe15 	bl	8007346 <HAL_SDRAM_ProgramRefreshRate>
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200009cc 	.word	0x200009cc
 8003728:	2000097c 	.word	0x2000097c

0800372c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b090      	sub	sp, #64	; 0x40
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80ec 	beq.w	8003916 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
 8003742:	4b77      	ldr	r3, [pc, #476]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	4a76      	ldr	r2, [pc, #472]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6393      	str	r3, [r2, #56]	; 0x38
 800374e:	4b74      	ldr	r3, [pc, #464]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	4b70      	ldr	r3, [pc, #448]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a6f      	ldr	r2, [pc, #444]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	4b69      	ldr	r3, [pc, #420]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a68      	ldr	r2, [pc, #416]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b66      	ldr	r3, [pc, #408]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	623b      	str	r3, [r7, #32]
 8003790:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	4b62      	ldr	r3, [pc, #392]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a61      	ldr	r2, [pc, #388]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	4a5a      	ldr	r2, [pc, #360]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	6313      	str	r3, [r2, #48]	; 0x30
 80037be:	4b58      	ldr	r3, [pc, #352]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	4b54      	ldr	r3, [pc, #336]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a53      	ldr	r2, [pc, #332]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037d4:	f043 0310 	orr.w	r3, r3, #16
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b51      	ldr	r3, [pc, #324]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a4c      	ldr	r2, [pc, #304]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037f0:	f043 0320 	orr.w	r3, r3, #32
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a45      	ldr	r2, [pc, #276]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 800380c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b43      	ldr	r3, [pc, #268]	; (8003920 <BSP_SDRAM_MspInit+0x1f4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003822:	2302      	movs	r3, #2
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800382a:	230c      	movs	r3, #12
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800382e:	2360      	movs	r3, #96	; 0x60
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003836:	4619      	mov	r1, r3
 8003838:	483a      	ldr	r0, [pc, #232]	; (8003924 <BSP_SDRAM_MspInit+0x1f8>)
 800383a:	f000 fe73 	bl	8004524 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800383e:	2301      	movs	r3, #1
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003846:	4619      	mov	r1, r3
 8003848:	4837      	ldr	r0, [pc, #220]	; (8003928 <BSP_SDRAM_MspInit+0x1fc>)
 800384a:	f000 fe6b 	bl	8004524 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800384e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003858:	4619      	mov	r1, r3
 800385a:	4834      	ldr	r0, [pc, #208]	; (800392c <BSP_SDRAM_MspInit+0x200>)
 800385c:	f000 fe62 	bl	8004524 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003860:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800386a:	4619      	mov	r1, r3
 800386c:	4830      	ldr	r0, [pc, #192]	; (8003930 <BSP_SDRAM_MspInit+0x204>)
 800386e:	f000 fe59 	bl	8004524 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003872:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387c:	4619      	mov	r1, r3
 800387e:	482d      	ldr	r0, [pc, #180]	; (8003934 <BSP_SDRAM_MspInit+0x208>)
 8003880:	f000 fe50 	bl	8004524 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003884:	f248 1333 	movw	r3, #33075	; 0x8133
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800388a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800388e:	4619      	mov	r1, r3
 8003890:	4829      	ldr	r0, [pc, #164]	; (8003938 <BSP_SDRAM_MspInit+0x20c>)
 8003892:	f000 fe47 	bl	8004524 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 8003898:	2200      	movs	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 800389e:	2280      	movs	r2, #128	; 0x80
 80038a0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038b8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038c0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ce:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80038d0:	4b1a      	ldr	r3, [pc, #104]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80038d6:	4b19      	ldr	r3, [pc, #100]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038d8:	2203      	movs	r2, #3
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038de:	2200      	movs	r2, #0
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80038e2:	4b16      	ldr	r3, [pc, #88]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <BSP_SDRAM_MspInit+0x214>)
 80038ec:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a12      	ldr	r2, [pc, #72]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
 80038f4:	4a11      	ldr	r2, [pc, #68]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80038fa:	4810      	ldr	r0, [pc, #64]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 80038fc:	f000 fa4a 	bl	8003d94 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003900:	480e      	ldr	r0, [pc, #56]	; (800393c <BSP_SDRAM_MspInit+0x210>)
 8003902:	f000 f999 	bl	8003c38 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	210f      	movs	r1, #15
 800390a:	2038      	movs	r0, #56	; 0x38
 800390c:	f000 f95c 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003910:	2038      	movs	r0, #56	; 0x38
 8003912:	f000 f975 	bl	8003c00 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003916:	bf00      	nop
 8003918:	3740      	adds	r7, #64	; 0x40
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40020400 	.word	0x40020400
 8003928:	40020800 	.word	0x40020800
 800392c:	40020c00 	.word	0x40020c00
 8003930:	40021000 	.word	0x40021000
 8003934:	40021400 	.word	0x40021400
 8003938:	40021800 	.word	0x40021800
 800393c:	200009dc 	.word	0x200009dc
 8003940:	40026410 	.word	0x40026410

08003944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_Init+0x40>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <HAL_Init+0x40>)
 800394e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_Init+0x40>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <HAL_Init+0x40>)
 800395a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800395e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_Init+0x40>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a07      	ldr	r2, [pc, #28]	; (8003984 <HAL_Init+0x40>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800396c:	2003      	movs	r0, #3
 800396e:	f000 f920 	bl	8003bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003972:	200f      	movs	r0, #15
 8003974:	f7fd ff7c 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003978:	f7fd feb4 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00

08003988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_IncTick+0x20>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_IncTick+0x24>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4413      	add	r3, r2
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_IncTick+0x24>)
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000118 	.word	0x20000118
 80039ac:	20000a3c 	.word	0x20000a3c

080039b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return uwTick;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_GetTick+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000a3c 	.word	0x20000a3c

080039c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff ffee 	bl	80039b0 <HAL_GetTick>
 80039d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d005      	beq.n	80039ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_Delay+0x44>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ee:	bf00      	nop
 80039f0:	f7ff ffde 	bl	80039b0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d8f7      	bhi.n	80039f0 <HAL_Delay+0x28>
  {
  }
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000118 	.word	0x20000118

08003a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a42:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	60d3      	str	r3, [r2, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <__NVIC_GetPriorityGrouping+0x18>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	f003 0307 	and.w	r3, r3, #7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	db0b      	blt.n	8003a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	4907      	ldr	r1, [pc, #28]	; (8003aac <__NVIC_EnableIRQ+0x38>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2001      	movs	r0, #1
 8003a96:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000e100 	.word	0xe000e100

08003ab0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	db12      	blt.n	8003ae8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	f003 021f 	and.w	r2, r3, #31
 8003ac8:	490a      	ldr	r1, [pc, #40]	; (8003af4 <__NVIC_DisableIRQ+0x44>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ad6:	3320      	adds	r3, #32
 8003ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003adc:	f3bf 8f4f 	dsb	sy
}
 8003ae0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ae2:	f3bf 8f6f 	isb	sy
}
 8003ae6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000e100 	.word	0xe000e100

08003af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	db0a      	blt.n	8003b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	490c      	ldr	r1, [pc, #48]	; (8003b44 <__NVIC_SetPriority+0x4c>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b20:	e00a      	b.n	8003b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4908      	ldr	r1, [pc, #32]	; (8003b48 <__NVIC_SetPriority+0x50>)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	3b04      	subs	r3, #4
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	440b      	add	r3, r1
 8003b36:	761a      	strb	r2, [r3, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000e100 	.word	0xe000e100
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f1c3 0307 	rsb	r3, r3, #7
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf28      	it	cs
 8003b6a:	2304      	movcs	r3, #4
 8003b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3304      	adds	r3, #4
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d902      	bls.n	8003b7c <NVIC_EncodePriority+0x30>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3b03      	subs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <NVIC_EncodePriority+0x32>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b80:	f04f 32ff 	mov.w	r2, #4294967295
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	401a      	ands	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b94:	f04f 31ff 	mov.w	r1, #4294967295
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	43d9      	mvns	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	4313      	orrs	r3, r2
         );
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3724      	adds	r7, #36	; 0x24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ff28 	bl	8003a10 <__NVIC_SetPriorityGrouping>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bda:	f7ff ff3d 	bl	8003a58 <__NVIC_GetPriorityGrouping>
 8003bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	6978      	ldr	r0, [r7, #20]
 8003be6:	f7ff ffb1 	bl	8003b4c <NVIC_EncodePriority>
 8003bea:	4602      	mov	r2, r0
 8003bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff80 	bl	8003af8 <__NVIC_SetPriority>
}
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff30 	bl	8003a74 <__NVIC_EnableIRQ>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff ff40 	bl	8003ab0 <__NVIC_DisableIRQ>
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c44:	f7ff feb4 	bl	80039b0 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e099      	b.n	8003d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c74:	e00f      	b.n	8003c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c76:	f7ff fe9b 	bl	80039b0 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d908      	bls.n	8003c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e078      	b.n	8003d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e8      	bne.n	8003c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <HAL_DMA_Init+0x158>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0307 	bic.w	r3, r3, #7
 8003d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d117      	bne.n	8003d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f8df 	bl	8003f00 <DMA_CheckFifoParam>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d56:	2301      	movs	r3, #1
 8003d58:	e016      	b.n	8003d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f896 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	223f      	movs	r2, #63	; 0x3f
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	f010803f 	.word	0xf010803f

08003d94 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e050      	b.n	8003e48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d101      	bne.n	8003db6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
 8003db4:	e048      	b.n	8003e48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2221      	movs	r2, #33	; 0x21
 8003df4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f84c 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	223f      	movs	r2, #63	; 0x3f
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00c      	b.n	8003e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	3b10      	subs	r3, #16
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <DMA_CalcBaseAndBitshift+0x68>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d909      	bls.n	8003ed6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ed4:	e007      	b.n	8003ee6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	aaaaaaab 	.word	0xaaaaaaab
 8003efc:	08013c5c 	.word	0x08013c5c

08003f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11f      	bne.n	8003f5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d856      	bhi.n	8003fce <DMA_CheckFifoParam+0xce>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <DMA_CheckFifoParam+0x28>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f4b 	.word	0x08003f4b
 8003f30:	08003f39 	.word	0x08003f39
 8003f34:	08003fcf 	.word	0x08003fcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d046      	beq.n	8003fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f48:	e043      	b.n	8003fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f52:	d140      	bne.n	8003fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f58:	e03d      	b.n	8003fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	d121      	bne.n	8003fa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d837      	bhi.n	8003fda <DMA_CheckFifoParam+0xda>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <DMA_CheckFifoParam+0x70>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f87 	.word	0x08003f87
 8003f78:	08003f81 	.word	0x08003f81
 8003f7c:	08003f99 	.word	0x08003f99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      break;
 8003f84:	e030      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d025      	beq.n	8003fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f96:	e022      	b.n	8003fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fa0:	d11f      	bne.n	8003fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fa6:	e01c      	b.n	8003fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d903      	bls.n	8003fb6 <DMA_CheckFifoParam+0xb6>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d003      	beq.n	8003fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb4:	e018      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fba:	e015      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e00b      	b.n	8003fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e00a      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e008      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e006      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e004      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e03b      	b.n	8004082 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f833 	bl	800408a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004048:	f023 0107 	bic.w	r1, r3, #7
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004062:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68d1      	ldr	r1, [r2, #12]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	430b      	orrs	r3, r1
 8004070:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_DMA2D_Start+0x1c>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e018      	b.n	80040ec <HAL_DMA2D_Start+0x4e>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f989 	bl	80043ec <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d056      	beq.n	80041be <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004110:	f7ff fc4e 	bl	80039b0 <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004116:	e04b      	b.n	80041b0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004126:	2b00      	cmp	r3, #0
 8004128:	d023      	beq.n	8004172 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	f043 0202 	orr.w	r2, r3, #2
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2221      	movs	r2, #33	; 0x21
 800415c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2204      	movs	r2, #4
 8004162:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0a5      	b.n	80042be <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d01a      	beq.n	80041b0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7ff fc19 	bl	80039b0 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <HAL_DMA2D_PollForTransfer+0x9c>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10f      	bne.n	80041b0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2203      	movs	r2, #3
 80041a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e086      	b.n	80042be <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0ac      	beq.n	8004118 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d061      	beq.n	80042a4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80041e0:	f7ff fbe6 	bl	80039b0 <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80041e6:	e056      	b.n	8004296 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d02e      	beq.n	8004258 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	f043 0204 	orr.w	r2, r3, #4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	f043 0202 	orr.w	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2229      	movs	r2, #41	; 0x29
 8004242:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2204      	movs	r2, #4
 8004248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e032      	b.n	80042be <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d01a      	beq.n	8004296 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004260:	f7ff fba6 	bl	80039b0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d302      	bcc.n	8004276 <HAL_DMA2D_PollForTransfer+0x182>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2203      	movs	r2, #3
 8004286:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e013      	b.n	80042be <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0a1      	beq.n	80041e8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2212      	movs	r2, #18
 80042aa:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_DMA2D_ConfigLayer+0x20>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e079      	b.n	80043dc <HAL_DMA2D_ConfigLayer+0x114>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	3318      	adds	r3, #24
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004312:	4b35      	ldr	r3, [pc, #212]	; (80043e8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004314:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b0a      	cmp	r3, #10
 800431c:	d003      	beq.n	8004326 <HAL_DMA2D_ConfigLayer+0x5e>
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b09      	cmp	r3, #9
 8004324:	d107      	bne.n	8004336 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e005      	b.n	8004342 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d120      	bne.n	800438a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	43db      	mvns	r3, r3
 8004352:	ea02 0103 	and.w	r1, r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	430a      	orrs	r2, r1
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b0a      	cmp	r3, #10
 8004370:	d003      	beq.n	800437a <HAL_DMA2D_ConfigLayer+0xb2>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b09      	cmp	r3, #9
 8004378:	d127      	bne.n	80043ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
 8004388:	e01f      	b.n	80043ca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	43db      	mvns	r3, r3
 8004394:	ea02 0103 	and.w	r1, r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	430a      	orrs	r2, r1
 80043a0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b0a      	cmp	r3, #10
 80043b2:	d003      	beq.n	80043bc <HAL_DMA2D_ConfigLayer+0xf4>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b09      	cmp	r3, #9
 80043ba:	d106      	bne.n	80043ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043c8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	ff03000f 	.word	0xff03000f

080043ec <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b08b      	sub	sp, #44	; 0x2c
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	041a      	lsls	r2, r3, #16
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	431a      	orrs	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004424:	d174      	bne.n	8004510 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800442c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004434:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800443c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	431a      	orrs	r2, r3
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	4313      	orrs	r3, r2
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
 800445c:	e053      	b.n	8004506 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d106      	bne.n	8004474 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4313      	orrs	r3, r2
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	e048      	b.n	8004506 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d111      	bne.n	80044a0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	0cdb      	lsrs	r3, r3, #19
 8004480:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	0a9b      	lsrs	r3, r3, #10
 8004486:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	08db      	lsrs	r3, r3, #3
 800448c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	02db      	lsls	r3, r3, #11
 8004496:	4313      	orrs	r3, r2
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
 800449e:	e032      	b.n	8004506 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d117      	bne.n	80044d8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	0fdb      	lsrs	r3, r3, #31
 80044ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	0cdb      	lsrs	r3, r3, #19
 80044b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	0adb      	lsrs	r3, r3, #11
 80044b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	08db      	lsrs	r3, r3, #3
 80044be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	029b      	lsls	r3, r3, #10
 80044c8:	431a      	orrs	r2, r3
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	03db      	lsls	r3, r3, #15
 80044ce:	4313      	orrs	r3, r2
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	e016      	b.n	8004506 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	0d1b      	lsrs	r3, r3, #20
 80044e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	0b1b      	lsrs	r3, r3, #12
 80044e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	011a      	lsls	r2, r3, #4
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	431a      	orrs	r2, r3
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	4313      	orrs	r3, r2
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800450e:	e003      	b.n	8004518 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	60da      	str	r2, [r3, #12]
}
 8004518:	bf00      	nop
 800451a:	372c      	adds	r7, #44	; 0x2c
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004524:	b480      	push	{r7}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	e177      	b.n	8004830 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004540:	2201      	movs	r2, #1
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4013      	ands	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	429a      	cmp	r2, r3
 800455a:	f040 8166 	bne.w	800482a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d005      	beq.n	8004576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004572:	2b02      	cmp	r3, #2
 8004574:	d130      	bne.n	80045d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	2203      	movs	r2, #3
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ac:	2201      	movs	r2, #1
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 0201 	and.w	r2, r3, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d017      	beq.n	8004614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d123      	bne.n	8004668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	08da      	lsrs	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3208      	adds	r2, #8
 8004628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	220f      	movs	r2, #15
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	08da      	lsrs	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3208      	adds	r2, #8
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 0203 	and.w	r2, r3, #3
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80c0 	beq.w	800482a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	4b66      	ldr	r3, [pc, #408]	; (8004848 <HAL_GPIO_Init+0x324>)
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	4a65      	ldr	r2, [pc, #404]	; (8004848 <HAL_GPIO_Init+0x324>)
 80046b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046b8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ba:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_GPIO_Init+0x324>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c6:	4a61      	ldr	r2, [pc, #388]	; (800484c <HAL_GPIO_Init+0x328>)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	3302      	adds	r3, #2
 80046ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	220f      	movs	r2, #15
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a58      	ldr	r2, [pc, #352]	; (8004850 <HAL_GPIO_Init+0x32c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d037      	beq.n	8004762 <HAL_GPIO_Init+0x23e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a57      	ldr	r2, [pc, #348]	; (8004854 <HAL_GPIO_Init+0x330>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d031      	beq.n	800475e <HAL_GPIO_Init+0x23a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a56      	ldr	r2, [pc, #344]	; (8004858 <HAL_GPIO_Init+0x334>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02b      	beq.n	800475a <HAL_GPIO_Init+0x236>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a55      	ldr	r2, [pc, #340]	; (800485c <HAL_GPIO_Init+0x338>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d025      	beq.n	8004756 <HAL_GPIO_Init+0x232>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a54      	ldr	r2, [pc, #336]	; (8004860 <HAL_GPIO_Init+0x33c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01f      	beq.n	8004752 <HAL_GPIO_Init+0x22e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a53      	ldr	r2, [pc, #332]	; (8004864 <HAL_GPIO_Init+0x340>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d019      	beq.n	800474e <HAL_GPIO_Init+0x22a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a52      	ldr	r2, [pc, #328]	; (8004868 <HAL_GPIO_Init+0x344>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_GPIO_Init+0x226>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a51      	ldr	r2, [pc, #324]	; (800486c <HAL_GPIO_Init+0x348>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00d      	beq.n	8004746 <HAL_GPIO_Init+0x222>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a50      	ldr	r2, [pc, #320]	; (8004870 <HAL_GPIO_Init+0x34c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <HAL_GPIO_Init+0x21e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a4f      	ldr	r2, [pc, #316]	; (8004874 <HAL_GPIO_Init+0x350>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d101      	bne.n	800473e <HAL_GPIO_Init+0x21a>
 800473a:	2309      	movs	r3, #9
 800473c:	e012      	b.n	8004764 <HAL_GPIO_Init+0x240>
 800473e:	230a      	movs	r3, #10
 8004740:	e010      	b.n	8004764 <HAL_GPIO_Init+0x240>
 8004742:	2308      	movs	r3, #8
 8004744:	e00e      	b.n	8004764 <HAL_GPIO_Init+0x240>
 8004746:	2307      	movs	r3, #7
 8004748:	e00c      	b.n	8004764 <HAL_GPIO_Init+0x240>
 800474a:	2306      	movs	r3, #6
 800474c:	e00a      	b.n	8004764 <HAL_GPIO_Init+0x240>
 800474e:	2305      	movs	r3, #5
 8004750:	e008      	b.n	8004764 <HAL_GPIO_Init+0x240>
 8004752:	2304      	movs	r3, #4
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x240>
 8004756:	2303      	movs	r3, #3
 8004758:	e004      	b.n	8004764 <HAL_GPIO_Init+0x240>
 800475a:	2302      	movs	r3, #2
 800475c:	e002      	b.n	8004764 <HAL_GPIO_Init+0x240>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_GPIO_Init+0x240>
 8004762:	2300      	movs	r3, #0
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	f002 0203 	and.w	r2, r2, #3
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4093      	lsls	r3, r2
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004774:	4935      	ldr	r1, [pc, #212]	; (800484c <HAL_GPIO_Init+0x328>)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	3302      	adds	r3, #2
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004782:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <HAL_GPIO_Init+0x354>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047a6:	4a34      	ldr	r2, [pc, #208]	; (8004878 <HAL_GPIO_Init+0x354>)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047ac:	4b32      	ldr	r3, [pc, #200]	; (8004878 <HAL_GPIO_Init+0x354>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047d0:	4a29      	ldr	r2, [pc, #164]	; (8004878 <HAL_GPIO_Init+0x354>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047d6:	4b28      	ldr	r3, [pc, #160]	; (8004878 <HAL_GPIO_Init+0x354>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047fa:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <HAL_GPIO_Init+0x354>)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004800:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <HAL_GPIO_Init+0x354>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004824:	4a14      	ldr	r2, [pc, #80]	; (8004878 <HAL_GPIO_Init+0x354>)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3301      	adds	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	f67f ae84 	bls.w	8004540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3724      	adds	r7, #36	; 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800
 800484c:	40013800 	.word	0x40013800
 8004850:	40020000 	.word	0x40020000
 8004854:	40020400 	.word	0x40020400
 8004858:	40020800 	.word	0x40020800
 800485c:	40020c00 	.word	0x40020c00
 8004860:	40021000 	.word	0x40021000
 8004864:	40021400 	.word	0x40021400
 8004868:	40021800 	.word	0x40021800
 800486c:	40021c00 	.word	0x40021c00
 8004870:	40022000 	.word	0x40022000
 8004874:	40022400 	.word	0x40022400
 8004878:	40013c00 	.word	0x40013c00

0800487c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e0d9      	b.n	8004a4c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004898:	2201      	movs	r2, #1
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4013      	ands	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	f040 80c9 	bne.w	8004a46 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80048b4:	4a6b      	ldr	r2, [pc, #428]	; (8004a64 <HAL_GPIO_DeInit+0x1e8>)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	3302      	adds	r3, #2
 80048bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	220f      	movs	r2, #15
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_GPIO_DeInit+0x1ec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d037      	beq.n	800494e <HAL_GPIO_DeInit+0xd2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a62      	ldr	r2, [pc, #392]	; (8004a6c <HAL_GPIO_DeInit+0x1f0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_GPIO_DeInit+0xce>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a61      	ldr	r2, [pc, #388]	; (8004a70 <HAL_GPIO_DeInit+0x1f4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <HAL_GPIO_DeInit+0xca>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a60      	ldr	r2, [pc, #384]	; (8004a74 <HAL_GPIO_DeInit+0x1f8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d025      	beq.n	8004942 <HAL_GPIO_DeInit+0xc6>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a5f      	ldr	r2, [pc, #380]	; (8004a78 <HAL_GPIO_DeInit+0x1fc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <HAL_GPIO_DeInit+0xc2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a5e      	ldr	r2, [pc, #376]	; (8004a7c <HAL_GPIO_DeInit+0x200>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d019      	beq.n	800493a <HAL_GPIO_DeInit+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a5d      	ldr	r2, [pc, #372]	; (8004a80 <HAL_GPIO_DeInit+0x204>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_DeInit+0xba>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a5c      	ldr	r2, [pc, #368]	; (8004a84 <HAL_GPIO_DeInit+0x208>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_DeInit+0xb6>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a5b      	ldr	r2, [pc, #364]	; (8004a88 <HAL_GPIO_DeInit+0x20c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_DeInit+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a5a      	ldr	r2, [pc, #360]	; (8004a8c <HAL_GPIO_DeInit+0x210>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_DeInit+0xae>
 8004926:	2309      	movs	r3, #9
 8004928:	e012      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 800492a:	230a      	movs	r3, #10
 800492c:	e010      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 800492e:	2308      	movs	r3, #8
 8004930:	e00e      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 8004932:	2307      	movs	r3, #7
 8004934:	e00c      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 8004936:	2306      	movs	r3, #6
 8004938:	e00a      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 800493a:	2305      	movs	r3, #5
 800493c:	e008      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 800493e:	2304      	movs	r3, #4
 8004940:	e006      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 8004942:	2303      	movs	r3, #3
 8004944:	e004      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 8004946:	2302      	movs	r3, #2
 8004948:	e002      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_GPIO_DeInit+0xd4>
 800494e:	2300      	movs	r3, #0
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	f002 0203 	and.w	r2, r2, #3
 8004956:	0092      	lsls	r2, r2, #2
 8004958:	4093      	lsls	r3, r2
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d132      	bne.n	80049c6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004960:	4b4b      	ldr	r3, [pc, #300]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	43db      	mvns	r3, r3
 8004968:	4949      	ldr	r1, [pc, #292]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 800496a:	4013      	ands	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800496e:	4b48      	ldr	r3, [pc, #288]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	43db      	mvns	r3, r3
 8004976:	4946      	ldr	r1, [pc, #280]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 8004978:	4013      	ands	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800497c:	4b44      	ldr	r3, [pc, #272]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	43db      	mvns	r3, r3
 8004984:	4942      	ldr	r1, [pc, #264]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 8004986:	4013      	ands	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	43db      	mvns	r3, r3
 8004992:	493f      	ldr	r1, [pc, #252]	; (8004a90 <HAL_GPIO_DeInit+0x214>)
 8004994:	4013      	ands	r3, r2
 8004996:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	220f      	movs	r2, #15
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80049a8:	4a2e      	ldr	r2, [pc, #184]	; (8004a64 <HAL_GPIO_DeInit+0x1e8>)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	3302      	adds	r3, #2
 80049b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	43da      	mvns	r2, r3
 80049b8:	482a      	ldr	r0, [pc, #168]	; (8004a64 <HAL_GPIO_DeInit+0x1e8>)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	400a      	ands	r2, r1
 80049c0:	3302      	adds	r3, #2
 80049c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	2103      	movs	r1, #3
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	08da      	lsrs	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3208      	adds	r2, #8
 80049e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	08d2      	lsrs	r2, r2, #3
 80049fc:	4019      	ands	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3208      	adds	r2, #8
 8004a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2103      	movs	r1, #3
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	401a      	ands	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	2101      	movs	r1, #1
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	fa01 f303 	lsl.w	r3, r1, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	2103      	movs	r1, #3
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	401a      	ands	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	f67f af22 	bls.w	8004898 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40013800 	.word	0x40013800
 8004a68:	40020000 	.word	0x40020000
 8004a6c:	40020400 	.word	0x40020400
 8004a70:	40020800 	.word	0x40020800
 8004a74:	40020c00 	.word	0x40020c00
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40021400 	.word	0x40021400
 8004a80:	40021800 	.word	0x40021800
 8004a84:	40021c00 	.word	0x40021c00
 8004a88:	40022000 	.word	0x40022000
 8004a8c:	40022400 	.word	0x40022400
 8004a90:	40013c00 	.word	0x40013c00

08004a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa4:	787b      	ldrb	r3, [r7, #1]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ab0:	e003      	b.n	8004aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ab2:	887b      	ldrh	r3, [r7, #2]
 8004ab4:	041a      	lsls	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	619a      	str	r2, [r3, #24]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0bf      	b.n	8004c5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8ba 	bl	8004c68 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004b0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_LTDC_Init+0x19c>)
 8004b3c:	400b      	ands	r3, r1
 8004b3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6899      	ldr	r1, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68d9      	ldr	r1, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_LTDC_Init+0x19c>)
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68d9      	ldr	r1, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1a      	ldr	r2, [r3, #32]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6919      	ldr	r1, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <HAL_LTDC_Init+0x19c>)
 8004b98:	400b      	ands	r3, r1
 8004b9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6919      	ldr	r1, [r3, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6959      	ldr	r1, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <HAL_LTDC_Init+0x19c>)
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	041b      	lsls	r3, r3, #16
 8004bd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6959      	ldr	r1, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0206 	orr.w	r2, r2, #6
 8004c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	f000f800 	.word	0xf000f800

08004c68 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c7c:	b5b0      	push	{r4, r5, r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_LTDC_ConfigLayer+0x1a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e02c      	b.n	8004cf0 <HAL_LTDC_ConfigLayer+0x74>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2134      	movs	r1, #52	; 0x34
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f83b 	bl	8004d4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bdb0      	pop	{r4, r5, r7, pc}

08004cf8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_LTDC_EnableDither+0x16>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e016      	b.n	8004d3c <HAL_LTDC_EnableDither+0x44>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <HAL_LTDC_EnableDither+0x50>)
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_LTDC_EnableDither+0x50>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d28:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40016800 	.word	0x40016800

08004d4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d68:	4413      	add	r3, r2
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	01db      	lsls	r3, r3, #7
 8004d78:	4413      	add	r3, r2
 8004d7a:	3384      	adds	r3, #132	; 0x84
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	4611      	mov	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	01d2      	lsls	r2, r2, #7
 8004d88:	440a      	add	r2, r1
 8004d8a:	3284      	adds	r2, #132	; 0x84
 8004d8c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004da2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004da4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	01db      	lsls	r3, r3, #7
 8004db0:	440b      	add	r3, r1
 8004db2:	3384      	adds	r3, #132	; 0x84
 8004db4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dca:	4413      	add	r3, r2
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	01db      	lsls	r3, r3, #7
 8004dda:	4413      	add	r3, r2
 8004ddc:	3384      	adds	r3, #132	; 0x84
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	4611      	mov	r1, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	01d2      	lsls	r2, r2, #7
 8004dea:	440a      	add	r2, r1
 8004dec:	3284      	adds	r2, #132	; 0x84
 8004dee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004df2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e02:	4413      	add	r3, r2
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	01db      	lsls	r3, r3, #7
 8004e10:	440b      	add	r3, r1
 8004e12:	3384      	adds	r3, #132	; 0x84
 8004e14:	4619      	mov	r1, r3
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	01db      	lsls	r3, r3, #7
 8004e26:	4413      	add	r3, r2
 8004e28:	3384      	adds	r3, #132	; 0x84
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	4611      	mov	r1, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	01d2      	lsls	r2, r2, #7
 8004e36:	440a      	add	r2, r1
 8004e38:	3284      	adds	r2, #132	; 0x84
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	01db      	lsls	r3, r3, #7
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3384      	adds	r3, #132	; 0x84
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	01db      	lsls	r3, r3, #7
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3384      	adds	r3, #132	; 0x84
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	01db      	lsls	r3, r3, #7
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3384      	adds	r3, #132	; 0x84
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	01db      	lsls	r3, r3, #7
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3384      	adds	r3, #132	; 0x84
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	01db      	lsls	r3, r3, #7
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3384      	adds	r3, #132	; 0x84
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	01d2      	lsls	r2, r2, #7
 8004ed6:	440a      	add	r2, r1
 8004ed8:	3284      	adds	r2, #132	; 0x84
 8004eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ede:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	01db      	lsls	r3, r3, #7
 8004eea:	4413      	add	r3, r2
 8004eec:	3384      	adds	r3, #132	; 0x84
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	01db      	lsls	r3, r3, #7
 8004f00:	4413      	add	r3, r2
 8004f02:	3384      	adds	r3, #132	; 0x84
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	01d2      	lsls	r2, r2, #7
 8004f10:	440a      	add	r2, r1
 8004f12:	3284      	adds	r2, #132	; 0x84
 8004f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	6809      	ldr	r1, [r1, #0]
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	01c9      	lsls	r1, r1, #7
 8004f30:	4401      	add	r1, r0
 8004f32:	3184      	adds	r1, #132	; 0x84
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	01db      	lsls	r3, r3, #7
 8004f42:	4413      	add	r3, r2
 8004f44:	3384      	adds	r3, #132	; 0x84
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	3384      	adds	r3, #132	; 0x84
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	01db      	lsls	r3, r3, #7
 8004f66:	4413      	add	r3, r2
 8004f68:	3384      	adds	r3, #132	; 0x84
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e01b      	b.n	8004fb8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d102      	bne.n	8004f8e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e014      	b.n	8004fb8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d00b      	beq.n	8004fae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d007      	beq.n	8004fae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d003      	beq.n	8004fae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	d102      	bne.n	8004fb4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e001      	b.n	8004fb8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	01db      	lsls	r3, r3, #7
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3384      	adds	r3, #132	; 0x84
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	01d2      	lsls	r2, r2, #7
 8004fd2:	440a      	add	r2, r1
 8004fd4:	3284      	adds	r2, #132	; 0x84
 8004fd6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004fda:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1acb      	subs	r3, r1, r3
 8004ff2:	69f9      	ldr	r1, [r7, #28]
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	6809      	ldr	r1, [r1, #0]
 8004ffe:	4608      	mov	r0, r1
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	01c9      	lsls	r1, r1, #7
 8005004:	4401      	add	r1, r0
 8005006:	3184      	adds	r1, #132	; 0x84
 8005008:	4313      	orrs	r3, r2
 800500a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	4413      	add	r3, r2
 8005018:	3384      	adds	r3, #132	; 0x84
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	4611      	mov	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	01d2      	lsls	r2, r2, #7
 8005026:	440a      	add	r2, r1
 8005028:	3284      	adds	r2, #132	; 0x84
 800502a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	01db      	lsls	r3, r3, #7
 800503e:	4413      	add	r3, r2
 8005040:	3384      	adds	r3, #132	; 0x84
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	01db      	lsls	r3, r3, #7
 8005054:	4413      	add	r3, r2
 8005056:	3384      	adds	r3, #132	; 0x84
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	4611      	mov	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	01d2      	lsls	r2, r2, #7
 8005064:	440a      	add	r2, r1
 8005066:	3284      	adds	r2, #132	; 0x84
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6013      	str	r3, [r2, #0]
}
 800506e:	bf00      	nop
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800507a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507c:	b08f      	sub	sp, #60	; 0x3c
 800507e:	af0a      	add	r7, sp, #40	; 0x28
 8005080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e10f      	b.n	80052ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f008 fdd0 	bl	800dc4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2203      	movs	r2, #3
 80050b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d102      	bne.n	80050c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f003 fdaf 	bl	8008c2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	687e      	ldr	r6, [r7, #4]
 80050d8:	466d      	mov	r5, sp
 80050da:	f106 0410 	add.w	r4, r6, #16
 80050de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80050ee:	1d33      	adds	r3, r6, #4
 80050f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050f2:	6838      	ldr	r0, [r7, #0]
 80050f4:	f003 fc86 	bl	8008a04 <USB_CoreInit>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0d0      	b.n	80052ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f003 fd9d 	bl	8008c50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	e04a      	b.n	80051b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	333d      	adds	r3, #61	; 0x3d
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	333c      	adds	r3, #60	; 0x3c
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005144:	7bfa      	ldrb	r2, [r7, #15]
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	b298      	uxth	r0, r3
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	3344      	adds	r3, #68	; 0x44
 8005158:	4602      	mov	r2, r0
 800515a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	3340      	adds	r3, #64	; 0x40
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3348      	adds	r3, #72	; 0x48
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	334c      	adds	r3, #76	; 0x4c
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005198:	7bfa      	ldrb	r2, [r7, #15]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	3354      	adds	r3, #84	; 0x54
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	3301      	adds	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d3af      	bcc.n	800511c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
 80051c0:	e044      	b.n	800524c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051ea:	7bfa      	ldrb	r2, [r7, #15]
 80051ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051ee:	7bfa      	ldrb	r2, [r7, #15]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005204:	7bfa      	ldrb	r2, [r7, #15]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	3301      	adds	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d3b5      	bcc.n	80051c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	687e      	ldr	r6, [r7, #4]
 800525e:	466d      	mov	r5, sp
 8005260:	f106 0410 	add.w	r4, r6, #16
 8005264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800526a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800526c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005270:	e885 0003 	stmia.w	r5, {r0, r1}
 8005274:	1d33      	adds	r3, r6, #4
 8005276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005278:	6838      	ldr	r0, [r7, #0]
 800527a:	f003 fd35 	bl	8008ce8 <USB_DevInit>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e00d      	b.n	80052ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f004 fe84 	bl	8009fb2 <USB_DevDisconnect>

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_PCD_Start+0x1c>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e020      	b.n	8005312 <HAL_PCD_Start+0x5e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d109      	bne.n	80052f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d005      	beq.n	80052f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f003 fc87 	bl	8008c0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f004 fe34 	bl	8009f70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800531a:	b590      	push	{r4, r7, lr}
 800531c:	b08d      	sub	sp, #52	; 0x34
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f004 fef2 	bl	800a11a <USB_GetMode>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 848a 	bne.w	8005c52 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f004 fe56 	bl	8009ff4 <USB_ReadInterrupts>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8480 	beq.w	8005c50 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f004 fe43 	bl	8009ff4 <USB_ReadInterrupts>
 800536e:	4603      	mov	r3, r0
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d107      	bne.n	8005388 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f002 0202 	and.w	r2, r2, #2
 8005386:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f004 fe31 	bl	8009ff4 <USB_ReadInterrupts>
 8005392:	4603      	mov	r3, r0
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d161      	bne.n	8005460 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0210 	bic.w	r2, r2, #16
 80053aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f003 020f 	and.w	r2, r3, #15
 80053b8:	4613      	mov	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4413      	add	r3, r2
 80053c8:	3304      	adds	r3, #4
 80053ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	0c5b      	lsrs	r3, r3, #17
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d124      	bne.n	8005422 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d035      	beq.n	8005450 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	091b      	lsrs	r3, r3, #4
 80053ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	6a38      	ldr	r0, [r7, #32]
 80053f8:	f004 fc68 	bl	8009ccc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005408:	441a      	add	r2, r3
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800541a:	441a      	add	r2, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	621a      	str	r2, [r3, #32]
 8005420:	e016      	b.n	8005450 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	0c5b      	lsrs	r3, r3, #17
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	2b06      	cmp	r3, #6
 800542c:	d110      	bne.n	8005450 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005434:	2208      	movs	r2, #8
 8005436:	4619      	mov	r1, r3
 8005438:	6a38      	ldr	r0, [r7, #32]
 800543a:	f004 fc47 	bl	8009ccc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800544a:	441a      	add	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0210 	orr.w	r2, r2, #16
 800545e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f004 fdc5 	bl	8009ff4 <USB_ReadInterrupts>
 800546a:	4603      	mov	r3, r0
 800546c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005470:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005474:	f040 80a7 	bne.w	80055c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f004 fdca 	bl	800a01a <USB_ReadDevAllOutEpInterrupt>
 8005486:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005488:	e099      	b.n	80055be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 808e 	beq.w	80055b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	4611      	mov	r1, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 fdee 	bl	800a082 <USB_ReadDevOutEPInterrupt>
 80054a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	461a      	mov	r2, r3
 80054c0:	2301      	movs	r3, #1
 80054c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80054c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fec2 	bl	8006250 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00c      	beq.n	80054f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	2308      	movs	r3, #8
 80054e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80054e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 ff98 	bl	8006420 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	2310      	movs	r3, #16
 800550a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d030      	beq.n	8005578 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551e:	2b80      	cmp	r3, #128	; 0x80
 8005520:	d109      	bne.n	8005536 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005534:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4413      	add	r3, r2
 8005548:	3304      	adds	r3, #4
 800554a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d108      	bne.n	8005566 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	b2db      	uxtb	r3, r3
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f008 fc75 	bl	800de50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	461a      	mov	r2, r3
 8005574:	2302      	movs	r3, #2
 8005576:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	2320      	movs	r3, #32
 8005592:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	3301      	adds	r3, #1
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f47f af62 	bne.w	800548a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f004 fd12 	bl	8009ff4 <USB_ReadInterrupts>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055da:	f040 80db 	bne.w	8005794 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f004 fd33 	bl	800a04e <USB_ReadDevAllInEpInterrupt>
 80055e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80055ee:	e0cd      	b.n	800578c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80c2 	beq.w	8005780 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f004 fd59 	bl	800a0be <USB_ReadDevInEPInterrupt>
 800560c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d057      	beq.n	80056c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	2201      	movs	r2, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	43db      	mvns	r3, r3
 8005632:	69f9      	ldr	r1, [r7, #28]
 8005634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005638:	4013      	ands	r3, r2
 800563a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	2301      	movs	r3, #1
 800564c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d132      	bne.n	80056bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	334c      	adds	r3, #76	; 0x4c
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4403      	add	r3, r0
 8005676:	3348      	adds	r3, #72	; 0x48
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4419      	add	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4403      	add	r3, r0
 800568a:	334c      	adds	r3, #76	; 0x4c
 800568c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d113      	bne.n	80056bc <HAL_PCD_IRQHandler+0x3a2>
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	3354      	adds	r3, #84	; 0x54
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d108      	bne.n	80056bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056b4:	461a      	mov	r2, r3
 80056b6:	2101      	movs	r1, #1
 80056b8:	f004 fd60 	bl	800a17c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f008 fb3f 	bl	800dd46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	461a      	mov	r2, r3
 80056e0:	2308      	movs	r3, #8
 80056e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	461a      	mov	r2, r3
 80056fc:	2310      	movs	r3, #16
 80056fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	461a      	mov	r2, r3
 8005718:	2340      	movs	r3, #64	; 0x40
 800571a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d023      	beq.n	800576e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005728:	6a38      	ldr	r0, [r7, #32]
 800572a:	f003 fc41 	bl	8008fb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800572e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	3338      	adds	r3, #56	; 0x38
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	3304      	adds	r3, #4
 8005740:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	78db      	ldrb	r3, [r3, #3]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d108      	bne.n	800575c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	b2db      	uxtb	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f008 fb8c 	bl	800de74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	461a      	mov	r2, r3
 800576a:	2302      	movs	r3, #2
 800576c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fcdb 	bl	8006136 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	3301      	adds	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	f47f af2e 	bne.w	80055f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f004 fc2b 	bl	8009ff4 <USB_ReadInterrupts>
 800579e:	4603      	mov	r3, r0
 80057a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057a8:	d122      	bne.n	80057f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d108      	bne.n	80057da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80057d0:	2100      	movs	r1, #0
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fec2 	bl	800655c <HAL_PCDEx_LPM_Callback>
 80057d8:	e002      	b.n	80057e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f008 fb2a 	bl	800de34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80057ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f004 fbfd 	bl	8009ff4 <USB_ReadInterrupts>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005804:	d112      	bne.n	800582c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f008 fae6 	bl	800dde8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800582a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f004 fbdf 	bl	8009ff4 <USB_ReadInterrupts>
 8005836:	4603      	mov	r3, r0
 8005838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005840:	f040 80b7 	bne.w	80059b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2110      	movs	r1, #16
 800585e:	4618      	mov	r0, r3
 8005860:	f003 fba6 	bl	8008fb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005864:	2300      	movs	r3, #0
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005868:	e046      	b.n	80058f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	461a      	mov	r2, r3
 8005878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800587c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800589c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	461a      	mov	r2, r3
 80058ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	3301      	adds	r3, #1
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fe:	429a      	cmp	r2, r3
 8005900:	d3b3      	bcc.n	800586a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005910:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005914:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592e:	f043 030b 	orr.w	r3, r3, #11
 8005932:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005944:	f043 030b 	orr.w	r3, r3, #11
 8005948:	6453      	str	r3, [r2, #68]	; 0x44
 800594a:	e015      	b.n	8005978 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800595e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005962:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005972:	f043 030b 	orr.w	r3, r3, #11
 8005976:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005986:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800598a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800599c:	461a      	mov	r2, r3
 800599e:	f004 fbed 	bl	800a17c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80059b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f004 fb1c 	bl	8009ff4 <USB_ReadInterrupts>
 80059bc:	4603      	mov	r3, r0
 80059be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c6:	d124      	bne.n	8005a12 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fbb2 	bl	800a136 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f003 fb67 	bl	80090aa <USB_GetDevSpeed>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681c      	ldr	r4, [r3, #0]
 80059e8:	f001 fa28 	bl	8006e3c <HAL_RCC_GetHCLKFreq>
 80059ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	4620      	mov	r0, r4
 80059f8:	f003 f866 	bl	8008ac8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f008 f9ca 	bl	800dd96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f004 faec 	bl	8009ff4 <USB_ReadInterrupts>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d10a      	bne.n	8005a3c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f008 f9a7 	bl	800dd7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f002 0208 	and.w	r2, r2, #8
 8005a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f004 fad7 	bl	8009ff4 <USB_ReadInterrupts>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d122      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	e014      	b.n	8005a8c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fb27 	bl	80060d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	3301      	adds	r3, #1
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d3e5      	bcc.n	8005a62 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f004 faaa 	bl	8009ff4 <USB_ReadInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aaa:	d13b      	bne.n	8005b24 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005aac:	2301      	movs	r3, #1
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab0:	e02b      	b.n	8005b0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	3340      	adds	r3, #64	; 0x40
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d115      	bne.n	8005b04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ad8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	da12      	bge.n	8005b04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	333f      	adds	r3, #63	; 0x3f
 8005aee:	2201      	movs	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fae8 	bl	80060d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3ce      	bcc.n	8005ab2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f004 fa63 	bl	8009ff4 <USB_ReadInterrupts>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b38:	d155      	bne.n	8005be6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3e:	e045      	b.n	8005bcc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	4613      	mov	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d12e      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da2b      	bge.n	8005bc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005b7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d121      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b94:	2201      	movs	r2, #1
 8005b96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc2:	6053      	str	r3, [r2, #4]
            break;
 8005bc4:	e007      	b.n	8005bd6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	3301      	adds	r3, #1
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d3b4      	bcc.n	8005b40 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f004 fa02 	bl	8009ff4 <USB_ReadInterrupts>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfa:	d10a      	bne.n	8005c12 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f008 f94b 	bl	800de98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f004 f9ec 	bl	8009ff4 <USB_ReadInterrupts>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d115      	bne.n	8005c52 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f008 f93b 	bl	800deb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6859      	ldr	r1, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	e000      	b.n	8005c52 <HAL_PCD_IRQHandler+0x938>
      return;
 8005c50:	bf00      	nop
    }
  }
}
 8005c52:	3734      	adds	r7, #52	; 0x34
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_PCD_SetAddress+0x1a>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e013      	b.n	8005c9a <HAL_PCD_SetAddress+0x42>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f004 f94a 	bl	8009f24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	70fb      	strb	r3, [r7, #3]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	803b      	strh	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	da0f      	bge.n	8005ce8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	3338      	adds	r3, #56	; 0x38
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4413      	add	r3, r2
 8005cdc:	3304      	adds	r3, #4
 8005cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	705a      	strb	r2, [r3, #1]
 8005ce6:	e00f      	b.n	8005d08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	f003 020f 	and.w	r2, r3, #15
 8005cee:	4613      	mov	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3304      	adds	r3, #4
 8005d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d14:	883a      	ldrh	r2, [r7, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	78ba      	ldrb	r2, [r7, #2]
 8005d1e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d32:	78bb      	ldrb	r3, [r7, #2]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d102      	bne.n	8005d3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_PCD_EP_Open+0xaa>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e00e      	b.n	8005d6a <HAL_PCD_EP_Open+0xc8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f003 f9ca 	bl	80090f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005d68:	7afb      	ldrb	r3, [r7, #11]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da0f      	bge.n	8005da6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	f003 020f 	and.w	r2, r3, #15
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	3338      	adds	r3, #56	; 0x38
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4413      	add	r3, r2
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	705a      	strb	r2, [r3, #1]
 8005da4:	e00f      	b.n	8005dc6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_PCD_EP_Close+0x6e>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e00e      	b.n	8005dfe <HAL_PCD_EP_Close+0x8c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68f9      	ldr	r1, [r7, #12]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f003 fa08 	bl	8009204 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	460b      	mov	r3, r1
 8005e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e48:	7afb      	ldrb	r3, [r7, #11]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d102      	bne.n	8005e62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e62:	7afb      	ldrb	r3, [r7, #11]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	6979      	ldr	r1, [r7, #20]
 8005e7a:	f003 fce7 	bl	800984c <USB_EP0StartXfer>
 8005e7e:	e008      	b.n	8005e92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	f003 fa95 	bl	80093bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005edc:	7afb      	ldrb	r3, [r7, #11]
 8005ede:	f003 020f 	and.w	r2, r3, #15
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	3338      	adds	r3, #56	; 0x38
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2200      	movs	r2, #0
 8005f04:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d102      	bne.n	8005f26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d109      	bne.n	8005f44 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6979      	ldr	r1, [r7, #20]
 8005f3e:	f003 fc85 	bl	800984c <USB_EP0StartXfer>
 8005f42:	e008      	b.n	8005f56 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6979      	ldr	r1, [r7, #20]
 8005f52:	f003 fa33 	bl	80093bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	f003 020f 	and.w	r2, r3, #15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d901      	bls.n	8005f7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e050      	b.n	8006020 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da0f      	bge.n	8005fa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	3338      	adds	r3, #56	; 0x38
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	705a      	strb	r2, [r3, #1]
 8005fa4:	e00d      	b.n	8005fc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3304      	adds	r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_PCD_EP_SetStall+0x82>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e01e      	b.n	8006020 <HAL_PCD_EP_SetStall+0xc0>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f003 fec3 	bl	8009d7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	b2d9      	uxtb	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006010:	461a      	mov	r2, r3
 8006012:	f004 f8b3 	bl	800a17c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	f003 020f 	and.w	r2, r3, #15
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	429a      	cmp	r2, r3
 8006040:	d901      	bls.n	8006046 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e042      	b.n	80060cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800604a:	2b00      	cmp	r3, #0
 800604c:	da0f      	bge.n	800606e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	f003 020f 	and.w	r2, r3, #15
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	3338      	adds	r3, #56	; 0x38
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	3304      	adds	r3, #4
 8006064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	705a      	strb	r2, [r3, #1]
 800606c:	e00f      	b.n	800608e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	f003 020f 	and.w	r2, r3, #15
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4413      	add	r3, r2
 8006084:	3304      	adds	r3, #4
 8006086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	b2da      	uxtb	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_PCD_EP_ClrStall+0x86>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e00e      	b.n	80060cc <HAL_PCD_EP_ClrStall+0xa4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	4618      	mov	r0, r3
 80060be:	f003 fecb 	bl	8009e58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80060e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da0c      	bge.n	8006102 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 020f 	and.w	r2, r3, #15
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	3338      	adds	r3, #56	; 0x38
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e00c      	b.n	800611c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	f003 020f 	and.w	r2, r3, #15
 8006108:	4613      	mov	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	3304      	adds	r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	4618      	mov	r0, r3
 8006124:	f003 fcea 	bl	8009afc <USB_EPStopXfer>
 8006128:	4603      	mov	r3, r0
 800612a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800612c:	7afb      	ldrb	r3, [r7, #11]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08a      	sub	sp, #40	; 0x28
 800613a:	af02      	add	r7, sp, #8
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	3338      	adds	r3, #56	; 0x38
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	4413      	add	r3, r2
 800615a:	3304      	adds	r3, #4
 800615c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	429a      	cmp	r2, r3
 8006168:	d901      	bls.n	800616e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e06c      	b.n	8006248 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	429a      	cmp	r2, r3
 8006182:	d902      	bls.n	800618a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	3303      	adds	r3, #3
 800618e:	089b      	lsrs	r3, r3, #2
 8006190:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006192:	e02b      	b.n	80061ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d902      	bls.n	80061b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3303      	adds	r3, #3
 80061b4:	089b      	lsrs	r3, r3, #2
 80061b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6919      	ldr	r1, [r3, #16]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	4603      	mov	r3, r0
 80061ce:	6978      	ldr	r0, [r7, #20]
 80061d0:	f003 fd3e 	bl	8009c50 <USB_WritePacket>

    ep->xfer_buff  += len;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	441a      	add	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1a      	ldr	r2, [r3, #32]
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	441a      	add	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d809      	bhi.n	8006216 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800620a:	429a      	cmp	r2, r3
 800620c:	d203      	bcs.n	8006216 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1be      	bne.n	8006194 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	429a      	cmp	r2, r3
 8006220:	d811      	bhi.n	8006246 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	2201      	movs	r2, #1
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	43db      	mvns	r3, r3
 800623c:	6939      	ldr	r1, [r7, #16]
 800623e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006242:	4013      	ands	r3, r2
 8006244:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	333c      	adds	r3, #60	; 0x3c
 8006268:	3304      	adds	r3, #4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d17b      	bne.n	800637e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d015      	beq.n	80062bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4a61      	ldr	r2, [pc, #388]	; (8006418 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	f240 80b9 	bls.w	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80b3 	beq.w	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	461a      	mov	r2, r3
 80062b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b8:	6093      	str	r3, [r2, #8]
 80062ba:	e0a7      	b.n	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d2:	461a      	mov	r2, r3
 80062d4:	2320      	movs	r3, #32
 80062d6:	6093      	str	r3, [r2, #8]
 80062d8:	e098      	b.n	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 8093 	bne.w	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	4a4b      	ldr	r2, [pc, #300]	; (8006418 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d90f      	bls.n	800630e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	461a      	mov	r2, r3
 8006306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630a:	6093      	str	r3, [r2, #8]
 800630c:	e07e      	b.n	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	3304      	adds	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	0159      	lsls	r1, r3, #5
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	440b      	add	r3, r1
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d114      	bne.n	8006370 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006358:	461a      	mov	r2, r3
 800635a:	2101      	movs	r1, #1
 800635c:	f003 ff0e 	bl	800a17c <USB_EP0_OutStart>
 8006360:	e006      	b.n	8006370 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f007 fcca 	bl	800dd10 <HAL_PCD_DataOutStageCallback>
 800637c:	e046      	b.n	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	4a26      	ldr	r2, [pc, #152]	; (800641c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d124      	bne.n	80063d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	6093      	str	r3, [r2, #8]
 80063a4:	e032      	b.n	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	461a      	mov	r2, r3
 80063be:	2320      	movs	r3, #32
 80063c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f007 fca1 	bl	800dd10 <HAL_PCD_DataOutStageCallback>
 80063ce:	e01d      	b.n	800640c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d114      	bne.n	8006400 <PCD_EP_OutXfrComplete_int+0x1b0>
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d108      	bne.n	8006400 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063f8:	461a      	mov	r2, r3
 80063fa:	2100      	movs	r1, #0
 80063fc:	f003 febe 	bl	800a17c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f007 fc82 	bl	800dd10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	4f54300a 	.word	0x4f54300a
 800641c:	4f54310a 	.word	0x4f54310a

08006420 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	333c      	adds	r3, #60	; 0x3c
 8006438:	3304      	adds	r3, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d90e      	bls.n	8006474 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006472:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f007 fc39 	bl	800dcec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d90c      	bls.n	800649c <PCD_EP_OutSetupPacket_int+0x7c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d108      	bne.n	800649c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006494:	461a      	mov	r2, r3
 8006496:	2101      	movs	r1, #1
 8006498:	f003 fe70 	bl	800a17c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	4f54300a 	.word	0x4f54300a

080064ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70fb      	strb	r3, [r7, #3]
 80064b8:	4613      	mov	r3, r2
 80064ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80064ca:	883b      	ldrh	r3, [r7, #0]
 80064cc:	0419      	lsls	r1, r3, #16
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
 80064d8:	e028      	b.n	800652c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4413      	add	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e00d      	b.n	800650a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	3340      	adds	r3, #64	; 0x40
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4413      	add	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	3301      	adds	r3, #1
 8006508:	73fb      	strb	r3, [r7, #15]
 800650a:	7bfa      	ldrb	r2, [r7, #15]
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	3b01      	subs	r3, #1
 8006510:	429a      	cmp	r2, r3
 8006512:	d3ec      	bcc.n	80064ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006514:	883b      	ldrh	r3, [r7, #0]
 8006516:	0418      	lsls	r0, r3, #16
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	3b01      	subs	r3, #1
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	4302      	orrs	r2, r0
 8006524:	3340      	adds	r3, #64	; 0x40
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	887a      	ldrh	r2, [r7, #2]
 800654c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e267      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d075      	beq.n	800667e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006592:	4b88      	ldr	r3, [pc, #544]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 030c 	and.w	r3, r3, #12
 800659a:	2b04      	cmp	r3, #4
 800659c:	d00c      	beq.n	80065b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800659e:	4b85      	ldr	r3, [pc, #532]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d112      	bne.n	80065d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065aa:	4b82      	ldr	r3, [pc, #520]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b6:	d10b      	bne.n	80065d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	4b7e      	ldr	r3, [pc, #504]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d05b      	beq.n	800667c <HAL_RCC_OscConfig+0x108>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d157      	bne.n	800667c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e242      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d8:	d106      	bne.n	80065e8 <HAL_RCC_OscConfig+0x74>
 80065da:	4b76      	ldr	r3, [pc, #472]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a75      	ldr	r2, [pc, #468]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	e01d      	b.n	8006624 <HAL_RCC_OscConfig+0xb0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065f0:	d10c      	bne.n	800660c <HAL_RCC_OscConfig+0x98>
 80065f2:	4b70      	ldr	r3, [pc, #448]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a6f      	ldr	r2, [pc, #444]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80065f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	4b6d      	ldr	r3, [pc, #436]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a6c      	ldr	r2, [pc, #432]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	e00b      	b.n	8006624 <HAL_RCC_OscConfig+0xb0>
 800660c:	4b69      	ldr	r3, [pc, #420]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a68      	ldr	r2, [pc, #416]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	4b66      	ldr	r3, [pc, #408]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a65      	ldr	r2, [pc, #404]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 800661e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d013      	beq.n	8006654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662c:	f7fd f9c0 	bl	80039b0 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006634:	f7fd f9bc 	bl	80039b0 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b64      	cmp	r3, #100	; 0x64
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e207      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006646:	4b5b      	ldr	r3, [pc, #364]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0xc0>
 8006652:	e014      	b.n	800667e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006654:	f7fd f9ac 	bl	80039b0 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800665c:	f7fd f9a8 	bl	80039b0 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b64      	cmp	r3, #100	; 0x64
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e1f3      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800666e:	4b51      	ldr	r3, [pc, #324]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f0      	bne.n	800665c <HAL_RCC_OscConfig+0xe8>
 800667a:	e000      	b.n	800667e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800667c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d063      	beq.n	8006752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800668a:	4b4a      	ldr	r3, [pc, #296]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006696:	4b47      	ldr	r3, [pc, #284]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d11c      	bne.n	80066dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066a2:	4b44      	ldr	r3, [pc, #272]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d116      	bne.n	80066dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ae:	4b41      	ldr	r3, [pc, #260]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_RCC_OscConfig+0x152>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e1c7      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c6:	4b3b      	ldr	r3, [pc, #236]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	4937      	ldr	r1, [pc, #220]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066da:	e03a      	b.n	8006752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d020      	beq.n	8006726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066e4:	4b34      	ldr	r3, [pc, #208]	; (80067b8 <HAL_RCC_OscConfig+0x244>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ea:	f7fd f961 	bl	80039b0 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066f2:	f7fd f95d 	bl	80039b0 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e1a8      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006704:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f0      	beq.n	80066f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006710:	4b28      	ldr	r3, [pc, #160]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4925      	ldr	r1, [pc, #148]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006720:	4313      	orrs	r3, r2
 8006722:	600b      	str	r3, [r1, #0]
 8006724:	e015      	b.n	8006752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006726:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <HAL_RCC_OscConfig+0x244>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fd f940 	bl	80039b0 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006734:	f7fd f93c 	bl	80039b0 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e187      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006746:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d036      	beq.n	80067cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d016      	beq.n	8006794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006766:	4b15      	ldr	r3, [pc, #84]	; (80067bc <HAL_RCC_OscConfig+0x248>)
 8006768:	2201      	movs	r2, #1
 800676a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676c:	f7fd f920 	bl	80039b0 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006774:	f7fd f91c 	bl	80039b0 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e167      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <HAL_RCC_OscConfig+0x240>)
 8006788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f0      	beq.n	8006774 <HAL_RCC_OscConfig+0x200>
 8006792:	e01b      	b.n	80067cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006794:	4b09      	ldr	r3, [pc, #36]	; (80067bc <HAL_RCC_OscConfig+0x248>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679a:	f7fd f909 	bl	80039b0 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a0:	e00e      	b.n	80067c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a2:	f7fd f905 	bl	80039b0 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d907      	bls.n	80067c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e150      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
 80067b4:	40023800 	.word	0x40023800
 80067b8:	42470000 	.word	0x42470000
 80067bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c0:	4b88      	ldr	r3, [pc, #544]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80067c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1ea      	bne.n	80067a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 8097 	beq.w	8006908 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067da:	2300      	movs	r3, #0
 80067dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067de:	4b81      	ldr	r3, [pc, #516]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10f      	bne.n	800680a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	4b7d      	ldr	r3, [pc, #500]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	4a7c      	ldr	r2, [pc, #496]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80067f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6413      	str	r3, [r2, #64]	; 0x40
 80067fa:	4b7a      	ldr	r3, [pc, #488]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006802:	60bb      	str	r3, [r7, #8]
 8006804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800680a:	4b77      	ldr	r3, [pc, #476]	; (80069e8 <HAL_RCC_OscConfig+0x474>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d118      	bne.n	8006848 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006816:	4b74      	ldr	r3, [pc, #464]	; (80069e8 <HAL_RCC_OscConfig+0x474>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a73      	ldr	r2, [pc, #460]	; (80069e8 <HAL_RCC_OscConfig+0x474>)
 800681c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006822:	f7fd f8c5 	bl	80039b0 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800682a:	f7fd f8c1 	bl	80039b0 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e10c      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683c:	4b6a      	ldr	r3, [pc, #424]	; (80069e8 <HAL_RCC_OscConfig+0x474>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d106      	bne.n	800685e <HAL_RCC_OscConfig+0x2ea>
 8006850:	4b64      	ldr	r3, [pc, #400]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a63      	ldr	r2, [pc, #396]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
 800685c:	e01c      	b.n	8006898 <HAL_RCC_OscConfig+0x324>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b05      	cmp	r3, #5
 8006864:	d10c      	bne.n	8006880 <HAL_RCC_OscConfig+0x30c>
 8006866:	4b5f      	ldr	r3, [pc, #380]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	4a5e      	ldr	r2, [pc, #376]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 800686c:	f043 0304 	orr.w	r3, r3, #4
 8006870:	6713      	str	r3, [r2, #112]	; 0x70
 8006872:	4b5c      	ldr	r3, [pc, #368]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4a5b      	ldr	r2, [pc, #364]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006878:	f043 0301 	orr.w	r3, r3, #1
 800687c:	6713      	str	r3, [r2, #112]	; 0x70
 800687e:	e00b      	b.n	8006898 <HAL_RCC_OscConfig+0x324>
 8006880:	4b58      	ldr	r3, [pc, #352]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	4a57      	ldr	r2, [pc, #348]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	6713      	str	r3, [r2, #112]	; 0x70
 800688c:	4b55      	ldr	r3, [pc, #340]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 800688e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006890:	4a54      	ldr	r2, [pc, #336]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006892:	f023 0304 	bic.w	r3, r3, #4
 8006896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d015      	beq.n	80068cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a0:	f7fd f886 	bl	80039b0 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a6:	e00a      	b.n	80068be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a8:	f7fd f882 	bl	80039b0 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e0cb      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068be:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0ee      	beq.n	80068a8 <HAL_RCC_OscConfig+0x334>
 80068ca:	e014      	b.n	80068f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068cc:	f7fd f870 	bl	80039b0 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d2:	e00a      	b.n	80068ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068d4:	f7fd f86c 	bl	80039b0 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e0b5      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ea:	4b3e      	ldr	r3, [pc, #248]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1ee      	bne.n	80068d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d105      	bne.n	8006908 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068fc:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	4a38      	ldr	r2, [pc, #224]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80a1 	beq.w	8006a54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006912:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 030c 	and.w	r3, r3, #12
 800691a:	2b08      	cmp	r3, #8
 800691c:	d05c      	beq.n	80069d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d141      	bne.n	80069aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006926:	4b31      	ldr	r3, [pc, #196]	; (80069ec <HAL_RCC_OscConfig+0x478>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd f840 	bl	80039b0 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006934:	f7fd f83c 	bl	80039b0 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e087      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006946:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69da      	ldr	r2, [r3, #28]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	019b      	lsls	r3, r3, #6
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	085b      	lsrs	r3, r3, #1
 800696a:	3b01      	subs	r3, #1
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	061b      	lsls	r3, r3, #24
 8006976:	491b      	ldr	r1, [pc, #108]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 8006978:	4313      	orrs	r3, r2
 800697a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <HAL_RCC_OscConfig+0x478>)
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006982:	f7fd f815 	bl	80039b0 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800698a:	f7fd f811 	bl	80039b0 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e05c      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <HAL_RCC_OscConfig+0x416>
 80069a8:	e054      	b.n	8006a54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069aa:	4b10      	ldr	r3, [pc, #64]	; (80069ec <HAL_RCC_OscConfig+0x478>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b0:	f7fc fffe 	bl	80039b0 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b8:	f7fc fffa 	bl	80039b0 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e045      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <HAL_RCC_OscConfig+0x470>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x444>
 80069d6:	e03d      	b.n	8006a54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d107      	bne.n	80069f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e038      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
 80069e4:	40023800 	.word	0x40023800
 80069e8:	40007000 	.word	0x40007000
 80069ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069f0:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <HAL_RCC_OscConfig+0x4ec>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d028      	beq.n	8006a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d121      	bne.n	8006a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d11a      	bne.n	8006a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a20:	4013      	ands	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d111      	bne.n	8006a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d001      	beq.n	8006a54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40023800 	.word	0x40023800

08006a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0cc      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a78:	4b68      	ldr	r3, [pc, #416]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d90c      	bls.n	8006aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b65      	ldr	r3, [pc, #404]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8e:	4b63      	ldr	r3, [pc, #396]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d001      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e0b8      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d020      	beq.n	8006aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ab8:	4b59      	ldr	r3, [pc, #356]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	4a58      	ldr	r2, [pc, #352]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ad0:	4b53      	ldr	r3, [pc, #332]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a52      	ldr	r2, [pc, #328]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006adc:	4b50      	ldr	r3, [pc, #320]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	494d      	ldr	r1, [pc, #308]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d044      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d107      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b02:	4b47      	ldr	r3, [pc, #284]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d119      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e07f      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d003      	beq.n	8006b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b22:	4b3f      	ldr	r3, [pc, #252]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e06f      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b32:	4b3b      	ldr	r3, [pc, #236]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e067      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b42:	4b37      	ldr	r3, [pc, #220]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f023 0203 	bic.w	r2, r3, #3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4934      	ldr	r1, [pc, #208]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b54:	f7fc ff2c 	bl	80039b0 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5c:	f7fc ff28 	bl	80039b0 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e04f      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	4b2b      	ldr	r3, [pc, #172]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 020c 	and.w	r2, r3, #12
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d1eb      	bne.n	8006b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b84:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d20c      	bcs.n	8006bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b20      	ldr	r3, [pc, #128]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d001      	beq.n	8006bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e032      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	4916      	ldr	r1, [pc, #88]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bd6:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	490e      	ldr	r1, [pc, #56]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bea:	f000 f821 	bl	8006c30 <HAL_RCC_GetSysClockFreq>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	091b      	lsrs	r3, r3, #4
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	490a      	ldr	r1, [pc, #40]	; (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006bfc:	5ccb      	ldrb	r3, [r1, r3]
 8006bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006c02:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <HAL_RCC_ClockConfig+0x1c8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fa fe30 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40023c00 	.word	0x40023c00
 8006c20:	40023800 	.word	0x40023800
 8006c24:	080112b4 	.word	0x080112b4
 8006c28:	2000008c 	.word	0x2000008c
 8006c2c:	20000114 	.word	0x20000114

08006c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c34:	b094      	sub	sp, #80	; 0x50
 8006c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c40:	2300      	movs	r3, #0
 8006c42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c48:	4b79      	ldr	r3, [pc, #484]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 030c 	and.w	r3, r3, #12
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d00d      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0x40>
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	f200 80e1 	bhi.w	8006e1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_RCC_GetSysClockFreq+0x34>
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d003      	beq.n	8006c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c62:	e0db      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c64:	4b73      	ldr	r3, [pc, #460]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c68:	e0db      	b.n	8006e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c6a:	4b73      	ldr	r3, [pc, #460]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c6e:	e0d8      	b.n	8006e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c70:	4b6f      	ldr	r3, [pc, #444]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c7a:	4b6d      	ldr	r3, [pc, #436]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d063      	beq.n	8006d4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c86:	4b6a      	ldr	r3, [pc, #424]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	099b      	lsrs	r3, r3, #6
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c98:	633b      	str	r3, [r7, #48]	; 0x30
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	f04f 0000 	mov.w	r0, #0
 8006caa:	f04f 0100 	mov.w	r1, #0
 8006cae:	0159      	lsls	r1, r3, #5
 8006cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cb4:	0150      	lsls	r0, r2, #5
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4621      	mov	r1, r4
 8006cbc:	1a51      	subs	r1, r2, r1
 8006cbe:	6139      	str	r1, [r7, #16]
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	018b      	lsls	r3, r1, #6
 8006cd8:	4651      	mov	r1, sl
 8006cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cde:	4651      	mov	r1, sl
 8006ce0:	018a      	lsls	r2, r1, #6
 8006ce2:	4651      	mov	r1, sl
 8006ce4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ce8:	4659      	mov	r1, fp
 8006cea:	eb63 0901 	sbc.w	r9, r3, r1
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d02:	4690      	mov	r8, r2
 8006d04:	4699      	mov	r9, r3
 8006d06:	4623      	mov	r3, r4
 8006d08:	eb18 0303 	adds.w	r3, r8, r3
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	462b      	mov	r3, r5
 8006d10:	eb49 0303 	adc.w	r3, r9, r3
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d22:	4629      	mov	r1, r5
 8006d24:	024b      	lsls	r3, r1, #9
 8006d26:	4621      	mov	r1, r4
 8006d28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	024a      	lsls	r2, r1, #9
 8006d30:	4610      	mov	r0, r2
 8006d32:	4619      	mov	r1, r3
 8006d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d36:	2200      	movs	r2, #0
 8006d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d40:	f7f9 ff42 	bl	8000bc8 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4613      	mov	r3, r2
 8006d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d4c:	e058      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4e:	4b38      	ldr	r3, [pc, #224]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	099b      	lsrs	r3, r3, #6
 8006d54:	2200      	movs	r2, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	4611      	mov	r1, r2
 8006d5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	2300      	movs	r3, #0
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
 8006d64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d68:	4642      	mov	r2, r8
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	f04f 0000 	mov.w	r0, #0
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	0159      	lsls	r1, r3, #5
 8006d76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d7a:	0150      	lsls	r0, r2, #5
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4641      	mov	r1, r8
 8006d82:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d86:	4649      	mov	r1, r9
 8006d88:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006da0:	ebb2 040a 	subs.w	r4, r2, sl
 8006da4:	eb63 050b 	sbc.w	r5, r3, fp
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	00eb      	lsls	r3, r5, #3
 8006db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006db6:	00e2      	lsls	r2, r4, #3
 8006db8:	4614      	mov	r4, r2
 8006dba:	461d      	mov	r5, r3
 8006dbc:	4643      	mov	r3, r8
 8006dbe:	18e3      	adds	r3, r4, r3
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	eb45 0303 	adc.w	r3, r5, r3
 8006dc8:	607b      	str	r3, [r7, #4]
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	028b      	lsls	r3, r1, #10
 8006dda:	4621      	mov	r1, r4
 8006ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006de0:	4621      	mov	r1, r4
 8006de2:	028a      	lsls	r2, r1, #10
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
 8006de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dea:	2200      	movs	r2, #0
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	61fa      	str	r2, [r7, #28]
 8006df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006df4:	f7f9 fee8 	bl	8000bc8 <__aeabi_uldivmod>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e1a:	e002      	b.n	8006e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3750      	adds	r7, #80	; 0x50
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e2e:	bf00      	nop
 8006e30:	40023800 	.word	0x40023800
 8006e34:	00f42400 	.word	0x00f42400
 8006e38:	007a1200 	.word	0x007a1200

08006e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e40:	4b03      	ldr	r3, [pc, #12]	; (8006e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e42:	681b      	ldr	r3, [r3, #0]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	2000008c 	.word	0x2000008c

08006e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e58:	f7ff fff0 	bl	8006e3c <HAL_RCC_GetHCLKFreq>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	0a9b      	lsrs	r3, r3, #10
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	4903      	ldr	r1, [pc, #12]	; (8006e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e6a:	5ccb      	ldrb	r3, [r1, r3]
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40023800 	.word	0x40023800
 8006e78:	080112c4 	.word	0x080112c4

08006e7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	220f      	movs	r2, #15
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e8c:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0203 	and.w	r2, r3, #3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006eb0:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	08db      	lsrs	r3, r3, #3
 8006eb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <HAL_RCC_GetClockConfig+0x60>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 020f 	and.w	r2, r3, #15
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	601a      	str	r2, [r3, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	40023c00 	.word	0x40023c00

08006ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10b      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d075      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f14:	4b91      	ldr	r3, [pc, #580]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f1a:	f7fc fd49 	bl	80039b0 <HAL_GetTick>
 8006f1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f20:	e008      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f22:	f7fc fd45 	bl	80039b0 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e189      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f34:	4b8a      	ldr	r3, [pc, #552]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f0      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	019a      	lsls	r2, r3, #6
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	071b      	lsls	r3, r3, #28
 8006f58:	4981      	ldr	r1, [pc, #516]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01f      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f6c:	4b7c      	ldr	r3, [pc, #496]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f72:	0f1b      	lsrs	r3, r3, #28
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	019a      	lsls	r2, r3, #6
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	061b      	lsls	r3, r3, #24
 8006f86:	431a      	orrs	r2, r3
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	071b      	lsls	r3, r3, #28
 8006f8c:	4974      	ldr	r1, [pc, #464]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f94:	4b72      	ldr	r3, [pc, #456]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9a:	f023 021f 	bic.w	r2, r3, #31
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	496e      	ldr	r1, [pc, #440]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	019a      	lsls	r2, r3, #6
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	061b      	lsls	r3, r3, #24
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	071b      	lsls	r3, r3, #28
 8006fcc:	4964      	ldr	r1, [pc, #400]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fd4:	4b61      	ldr	r3, [pc, #388]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fda:	f7fc fce9 	bl	80039b0 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fe2:	f7fc fce5 	bl	80039b0 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e129      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff4:	4b5a      	ldr	r3, [pc, #360]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007014:	2b00      	cmp	r3, #0
 8007016:	d079      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007018:	4b52      	ldr	r3, [pc, #328]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800701e:	f7fc fcc7 	bl	80039b0 <HAL_GetTick>
 8007022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007026:	f7fc fcc3 	bl	80039b0 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e107      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007038:	4b49      	ldr	r3, [pc, #292]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007044:	d0ef      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d020      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007052:	4b43      	ldr	r3, [pc, #268]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	0f1b      	lsrs	r3, r3, #28
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	019a      	lsls	r2, r3, #6
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	061b      	lsls	r3, r3, #24
 800706c:	431a      	orrs	r2, r3
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	071b      	lsls	r3, r3, #28
 8007072:	493b      	ldr	r1, [pc, #236]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800707a:	4b39      	ldr	r3, [pc, #228]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800707c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007080:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	3b01      	subs	r3, #1
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	4934      	ldr	r1, [pc, #208]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01e      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070a0:	4b2f      	ldr	r3, [pc, #188]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a6:	0e1b      	lsrs	r3, r3, #24
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	019a      	lsls	r2, r3, #6
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	061b      	lsls	r3, r3, #24
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	071b      	lsls	r3, r3, #28
 80070c0:	4927      	ldr	r1, [pc, #156]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	4922      	ldr	r1, [pc, #136]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80070de:	4b21      	ldr	r3, [pc, #132]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070e4:	f7fc fc64 	bl	80039b0 <HAL_GetTick>
 80070e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070ec:	f7fc fc60 	bl	80039b0 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e0a4      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070fe:	4b18      	ldr	r3, [pc, #96]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800710a:	d1ef      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 808b 	beq.w	8007230 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007128:	6413      	str	r3, [r2, #64]	; 0x40
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007136:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a0b      	ldr	r2, [pc, #44]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800713c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007140:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007142:	f7fc fc35 	bl	80039b0 <HAL_GetTick>
 8007146:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007148:	e010      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800714a:	f7fc fc31 	bl	80039b0 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d909      	bls.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e075      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800715c:	42470068 	.word	0x42470068
 8007160:	40023800 	.word	0x40023800
 8007164:	42470070 	.word	0x42470070
 8007168:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800716c:	4b38      	ldr	r3, [pc, #224]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0e8      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007178:	4b36      	ldr	r3, [pc, #216]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007180:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02f      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	429a      	cmp	r2, r3
 8007194:	d028      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007196:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071a0:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071a6:	4b2c      	ldr	r3, [pc, #176]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071ac:	4a29      	ldr	r2, [pc, #164]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071b2:	4b28      	ldr	r3, [pc, #160]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d114      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80071be:	f7fc fbf7 	bl	80039b0 <HAL_GetTick>
 80071c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c4:	e00a      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071c6:	f7fc fbf3 	bl	80039b0 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d901      	bls.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e035      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071dc:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ee      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071f4:	d10d      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720a:	4912      	ldr	r1, [pc, #72]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800720c:	4313      	orrs	r3, r2
 800720e:	608b      	str	r3, [r1, #8]
 8007210:	e005      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007212:	4b10      	ldr	r3, [pc, #64]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	4a0f      	ldr	r2, [pc, #60]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007218:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800721c:	6093      	str	r3, [r2, #8]
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800722a:	490a      	ldr	r1, [pc, #40]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800722c:	4313      	orrs	r3, r2
 800722e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d004      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007242:	4b06      	ldr	r3, [pc, #24]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007244:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40007000 	.word	0x40007000
 8007254:	40023800 	.word	0x40023800
 8007258:	42470e40 	.word	0x42470e40
 800725c:	424711e0 	.word	0x424711e0

08007260 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e025      	b.n	80072c0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f81d 	bl	80072c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f001 fa95 	bl	80087d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	f001 faea 	bl	800888a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072ee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d101      	bne.n	80072fa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
 80072f8:	e021      	b.n	800733e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d002      	beq.n	8007306 <HAL_SDRAM_SendCommand+0x2a>
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	2b05      	cmp	r3, #5
 8007304:	d118      	bne.n	8007338 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fb20 	bl	800895c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d104      	bne.n	800732e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2205      	movs	r2, #5
 8007328:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800732c:	e006      	b.n	800733c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007336:	e001      	b.n	800733c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d101      	bne.n	8007360 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800735c:	2302      	movs	r3, #2
 800735e:	e016      	b.n	800738e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10f      	bne.n	800738c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f001 fb2b 	bl	80089d6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e07b      	b.n	80074a0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d108      	bne.n	80073c2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b8:	d009      	beq.n	80073ce <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	61da      	str	r2, [r3, #28]
 80073c0:	e005      	b.n	80073ce <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fa f9a7 	bl	800173c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007404:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	ea42 0103 	orr.w	r1, r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	0c1b      	lsrs	r3, r3, #16
 800746c:	f003 0104 	and.w	r1, r3, #4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	f003 0210 	and.w	r2, r3, #16
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800748e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e01a      	b.n	80074f0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fa f982 	bl	80017dc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_SPI_Transmit+0x22>
 8007516:	2302      	movs	r3, #2
 8007518:	e126      	b.n	8007768 <HAL_SPI_Transmit+0x270>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007522:	f7fc fa45 	bl	80039b0 <HAL_GetTick>
 8007526:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d002      	beq.n	800753e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007538:	2302      	movs	r3, #2
 800753a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800753c:	e10b      	b.n	8007756 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_SPI_Transmit+0x52>
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800754e:	e102      	b.n	8007756 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2203      	movs	r2, #3
 8007554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007596:	d10f      	bne.n	80075b8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d007      	beq.n	80075d6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075de:	d14b      	bne.n	8007678 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_SPI_Transmit+0xf6>
 80075e8:	8afb      	ldrh	r3, [r7, #22]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d13e      	bne.n	800766c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	881a      	ldrh	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	1c9a      	adds	r2, r3, #2
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007612:	e02b      	b.n	800766c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b02      	cmp	r3, #2
 8007620:	d112      	bne.n	8007648 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	881a      	ldrh	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	86da      	strh	r2, [r3, #54]	; 0x36
 8007646:	e011      	b.n	800766c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007648:	f7fc f9b2 	bl	80039b0 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d803      	bhi.n	8007660 <HAL_SPI_Transmit+0x168>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d102      	bne.n	8007666 <HAL_SPI_Transmit+0x16e>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	77fb      	strb	r3, [r7, #31]
          goto error;
 800766a:	e074      	b.n	8007756 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1ce      	bne.n	8007614 <HAL_SPI_Transmit+0x11c>
 8007676:	e04c      	b.n	8007712 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <HAL_SPI_Transmit+0x18e>
 8007680:	8afb      	ldrh	r3, [r7, #22]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d140      	bne.n	8007708 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	330c      	adds	r3, #12
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076ac:	e02c      	b.n	8007708 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d113      	bne.n	80076e4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	330c      	adds	r3, #12
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80076e2:	e011      	b.n	8007708 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076e4:	f7fc f964 	bl	80039b0 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d803      	bhi.n	80076fc <HAL_SPI_Transmit+0x204>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d102      	bne.n	8007702 <HAL_SPI_Transmit+0x20a>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007706:	e026      	b.n	8007756 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1cd      	bne.n	80076ae <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 fcf8 	bl	800810c <SPI_EndRxTxTransaction>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007730:	2300      	movs	r3, #0
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	77fb      	strb	r3, [r7, #31]
 8007752:	e000      	b.n	8007756 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007754:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007766:	7ffb      	ldrb	r3, [r7, #31]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af02      	add	r7, sp, #8
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778c:	d112      	bne.n	80077b4 <HAL_SPI_Receive+0x44>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10e      	bne.n	80077b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2204      	movs	r2, #4
 800779a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	4613      	mov	r3, r2
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 f8f1 	bl	8007992 <HAL_SPI_TransmitReceive>
 80077b0:	4603      	mov	r3, r0
 80077b2:	e0ea      	b.n	800798a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d101      	bne.n	80077c2 <HAL_SPI_Receive+0x52>
 80077be:	2302      	movs	r3, #2
 80077c0:	e0e3      	b.n	800798a <HAL_SPI_Receive+0x21a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ca:	f7fc f8f1 	bl	80039b0 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d002      	beq.n	80077e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80077dc:	2302      	movs	r3, #2
 80077de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077e0:	e0ca      	b.n	8007978 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_SPI_Receive+0x7e>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d102      	bne.n	80077f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077f2:	e0c1      	b.n	8007978 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2204      	movs	r2, #4
 80077f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	88fa      	ldrh	r2, [r7, #6]
 800780c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	88fa      	ldrh	r2, [r7, #6]
 8007812:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783a:	d10f      	bne.n	800785c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800784a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800785a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d007      	beq.n	800787a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007878:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d162      	bne.n	8007948 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007882:	e02e      	b.n	80078e2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b01      	cmp	r3, #1
 8007890:	d115      	bne.n	80078be <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f103 020c 	add.w	r2, r3, #12
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	7812      	ldrb	r2, [r2, #0]
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078bc:	e011      	b.n	80078e2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078be:	f7fc f877 	bl	80039b0 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d803      	bhi.n	80078d6 <HAL_SPI_Receive+0x166>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d4:	d102      	bne.n	80078dc <HAL_SPI_Receive+0x16c>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078e0:	e04a      	b.n	8007978 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1cb      	bne.n	8007884 <HAL_SPI_Receive+0x114>
 80078ec:	e031      	b.n	8007952 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d113      	bne.n	8007924 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	b292      	uxth	r2, r2
 8007908:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007922:	e011      	b.n	8007948 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007924:	f7fc f844 	bl	80039b0 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d803      	bhi.n	800793c <HAL_SPI_Receive+0x1cc>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d102      	bne.n	8007942 <HAL_SPI_Receive+0x1d2>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007946:	e017      	b.n	8007978 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1cd      	bne.n	80078ee <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fb72 	bl	8008040 <SPI_EndRxTransaction>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	75fb      	strb	r3, [r7, #23]
 8007974:	e000      	b.n	8007978 <HAL_SPI_Receive+0x208>
  }

error :
 8007976:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007988:	7dfb      	ldrb	r3, [r7, #23]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b08c      	sub	sp, #48	; 0x30
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079a0:	2301      	movs	r3, #1
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x26>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e18a      	b.n	8007cce <HAL_SPI_TransmitReceive+0x33c>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079c0:	f7fb fff6 	bl	80039b0 <HAL_GetTick>
 80079c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079d6:	887b      	ldrh	r3, [r7, #2]
 80079d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d00f      	beq.n	8007a02 <HAL_SPI_TransmitReceive+0x70>
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079e8:	d107      	bne.n	80079fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <HAL_SPI_TransmitReceive+0x68>
 80079f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d003      	beq.n	8007a02 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80079fa:	2302      	movs	r3, #2
 80079fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a00:	e15b      	b.n	8007cba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x82>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x82>
 8007a0e:	887b      	ldrh	r3, [r7, #2]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a1a:	e14e      	b.n	8007cba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d003      	beq.n	8007a30 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2205      	movs	r2, #5
 8007a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	887a      	ldrh	r2, [r7, #2]
 8007a40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	887a      	ldrh	r2, [r7, #2]
 8007a46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	887a      	ldrh	r2, [r7, #2]
 8007a52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	887a      	ldrh	r2, [r7, #2]
 8007a58:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a70:	2b40      	cmp	r3, #64	; 0x40
 8007a72:	d007      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8c:	d178      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_TransmitReceive+0x10a>
 8007a96:	8b7b      	ldrh	r3, [r7, #26]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d166      	bne.n	8007b6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ac0:	e053      	b.n	8007b6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d11b      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x176>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d016      	beq.n	8007b08 <HAL_SPI_TransmitReceive+0x176>
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d113      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	881a      	ldrh	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	1c9a      	adds	r2, r3, #2
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d119      	bne.n	8007b4a <HAL_SPI_TransmitReceive+0x1b8>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d014      	beq.n	8007b4a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	1c9a      	adds	r2, r3, #2
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b46:	2301      	movs	r3, #1
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b4a:	f7fb ff31 	bl	80039b0 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d807      	bhi.n	8007b6a <HAL_SPI_TransmitReceive+0x1d8>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d003      	beq.n	8007b6a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b68:	e0a7      	b.n	8007cba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1a6      	bne.n	8007ac2 <HAL_SPI_TransmitReceive+0x130>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1a1      	bne.n	8007ac2 <HAL_SPI_TransmitReceive+0x130>
 8007b7e:	e07c      	b.n	8007c7a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x1fc>
 8007b88:	8b7b      	ldrh	r3, [r7, #26]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d16b      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	7812      	ldrb	r2, [r2, #0]
 8007b9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb4:	e057      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d11c      	bne.n	8007bfe <HAL_SPI_TransmitReceive+0x26c>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d017      	beq.n	8007bfe <HAL_SPI_TransmitReceive+0x26c>
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d114      	bne.n	8007bfe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d119      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x2ae>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d014      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	3b01      	subs	r3, #1
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c40:	f7fb feb6 	bl	80039b0 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d803      	bhi.n	8007c58 <HAL_SPI_TransmitReceive+0x2c6>
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c56:	d102      	bne.n	8007c5e <HAL_SPI_TransmitReceive+0x2cc>
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c64:	e029      	b.n	8007cba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1a2      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x224>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d19d      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fa44 	bl	800810c <SPI_EndRxTxTransaction>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d006      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2220      	movs	r2, #32
 8007c94:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c96:	e010      	b.n	8007cba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10b      	bne.n	8007cb8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	e000      	b.n	8007cba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007cb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3730      	adds	r7, #48	; 0x30
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	099b      	lsrs	r3, r3, #6
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10f      	bne.n	8007d1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	099b      	lsrs	r3, r3, #6
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d004      	beq.n	8007d1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
    return;
 8007d1a:	e0d7      	b.n	8007ecc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_SPI_IRQHandler+0x66>
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	09db      	lsrs	r3, r3, #7
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
    return;
 8007d3c:	e0c6      	b.n	8007ecc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	095b      	lsrs	r3, r3, #5
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <HAL_SPI_IRQHandler+0x8c>
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	099b      	lsrs	r3, r3, #6
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 80b4 	beq.w	8007ecc <HAL_SPI_IRQHandler+0x1f4>
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80ad 	beq.w	8007ecc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	099b      	lsrs	r3, r3, #6
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d023      	beq.n	8007dc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d011      	beq.n	8007dae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	f043 0204 	orr.w	r2, r3, #4
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d96:	2300      	movs	r3, #0
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	e00b      	b.n	8007dc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	693b      	ldr	r3, [r7, #16]
        return;
 8007dc4:	e082      	b.n	8007ecc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	095b      	lsrs	r3, r3, #5
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d014      	beq.n	8007dfc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	f043 0201 	orr.w	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00c      	beq.n	8007e22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0c:	f043 0208 	orr.w	r2, r3, #8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e14:	2300      	movs	r3, #0
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	60bb      	str	r3, [r7, #8]
 8007e20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d04f      	beq.n	8007eca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_SPI_IRQHandler+0x17e>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d034      	beq.n	8007ec0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0203 	bic.w	r2, r2, #3
 8007e64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d011      	beq.n	8007e92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e72:	4a18      	ldr	r2, [pc, #96]	; (8007ed4 <HAL_SPI_IRQHandler+0x1fc>)
 8007e74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fb ffe8 	bl	8003e50 <HAL_DMA_Abort_IT>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e9e:	4a0d      	ldr	r2, [pc, #52]	; (8007ed4 <HAL_SPI_IRQHandler+0x1fc>)
 8007ea0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fb ffd2 	bl	8003e50 <HAL_DMA_Abort_IT>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007ebe:	e003      	b.n	8007ec8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f809 	bl	8007ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ec6:	e000      	b.n	8007eca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007ec8:	bf00      	nop
    return;
 8007eca:	bf00      	nop
  }
}
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	08007f09 	.word	0x08007f09

08007ed8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007efa:	b2db      	uxtb	r3, r3
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff ffd8 	bl	8007ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f40:	f7fb fd36 	bl	80039b0 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f50:	f7fb fd2e 	bl	80039b0 <HAL_GetTick>
 8007f54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f56:	4b39      	ldr	r3, [pc, #228]	; (800803c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	015b      	lsls	r3, r3, #5
 8007f5c:	0d1b      	lsrs	r3, r3, #20
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f66:	e054      	b.n	8008012 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d050      	beq.n	8008012 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f70:	f7fb fd1e 	bl	80039b0 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d902      	bls.n	8007f86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d13d      	bne.n	8008002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f9e:	d111      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa8:	d004      	beq.n	8007fb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb2:	d107      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fcc:	d10f      	bne.n	8007fee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e017      	b.n	8008032 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	3b01      	subs	r3, #1
 8008010:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d19b      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	2000008c 	.word	0x2000008c

08008040 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008054:	d111      	bne.n	800807a <SPI_EndRxTransaction+0x3a>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805e:	d004      	beq.n	800806a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008068:	d107      	bne.n	800807a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008078:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008082:	d12a      	bne.n	80080da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800808c:	d012      	beq.n	80080b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	2180      	movs	r1, #128	; 0x80
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff ff49 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d02d      	beq.n	8008100 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a8:	f043 0220 	orr.w	r2, r3, #32
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e026      	b.n	8008102 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	2101      	movs	r1, #1
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7ff ff36 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01a      	beq.n	8008100 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ce:	f043 0220 	orr.w	r2, r3, #32
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e013      	b.n	8008102 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2101      	movs	r1, #1
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff ff23 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f4:	f043 0220 	orr.w	r2, r3, #32
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e000      	b.n	8008102 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008118:	4b1b      	ldr	r3, [pc, #108]	; (8008188 <SPI_EndRxTxTransaction+0x7c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <SPI_EndRxTxTransaction+0x80>)
 800811e:	fba2 2303 	umull	r2, r3, r2, r3
 8008122:	0d5b      	lsrs	r3, r3, #21
 8008124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008128:	fb02 f303 	mul.w	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008136:	d112      	bne.n	800815e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	2180      	movs	r1, #128	; 0x80
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff fef4 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d016      	beq.n	800817c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	f043 0220 	orr.w	r2, r3, #32
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e00f      	b.n	800817e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	3b01      	subs	r3, #1
 8008168:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008174:	2b80      	cmp	r3, #128	; 0x80
 8008176:	d0f2      	beq.n	800815e <SPI_EndRxTxTransaction+0x52>
 8008178:	e000      	b.n	800817c <SPI_EndRxTxTransaction+0x70>
        break;
 800817a:	bf00      	nop
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	2000008c 	.word	0x2000008c
 800818c:	165e9f81 	.word	0x165e9f81

08008190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e041      	b.n	8008226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7f9 fb32 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f000 f9ce 	bl	8008570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d001      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e04e      	b.n	80082e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a23      	ldr	r2, [pc, #140]	; (80082f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d022      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008272:	d01d      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d018      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <HAL_TIM_Base_Start_IT+0xcc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1c      	ldr	r2, [pc, #112]	; (8008300 <HAL_TIM_Base_Start_IT+0xd0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00e      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <HAL_TIM_Base_Start_IT+0xd4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a19      	ldr	r2, [pc, #100]	; (8008308 <HAL_TIM_Base_Start_IT+0xd8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a18      	ldr	r2, [pc, #96]	; (800830c <HAL_TIM_Base_Start_IT+0xdc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d111      	bne.n	80082d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b06      	cmp	r3, #6
 80082c0:	d010      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	e007      	b.n	80082e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40010000 	.word	0x40010000
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40001800 	.word	0x40001800

08008310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d122      	bne.n	800836c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0302 	and.w	r3, r3, #2
 8008330:	2b02      	cmp	r3, #2
 8008332:	d11b      	bne.n	800836c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0202 	mvn.w	r2, #2
 800833c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f8ee 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f8e0 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f8f1 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b04      	cmp	r3, #4
 8008378:	d122      	bne.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b04      	cmp	r3, #4
 8008386:	d11b      	bne.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0204 	mvn.w	r2, #4
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2202      	movs	r2, #2
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f8c4 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f8b6 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f8c7 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d122      	bne.n	8008414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d11b      	bne.n	8008414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0208 	mvn.w	r2, #8
 80083e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2204      	movs	r2, #4
 80083ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f89a 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f88c 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f89d 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b10      	cmp	r3, #16
 8008420:	d122      	bne.n	8008468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b10      	cmp	r3, #16
 800842e:	d11b      	bne.n	8008468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0210 	mvn.w	r2, #16
 8008438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2208      	movs	r2, #8
 800843e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f870 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 8008454:	e005      	b.n	8008462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f862 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f873 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b01      	cmp	r3, #1
 8008474:	d10e      	bne.n	8008494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b01      	cmp	r3, #1
 8008482:	d107      	bne.n	8008494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0201 	mvn.w	r2, #1
 800848c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7f9 f910 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	d10e      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ac:	2b80      	cmp	r3, #128	; 0x80
 80084ae:	d107      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f97e 	bl	80087bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d10e      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d107      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f838 	bl	800855c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d10e      	bne.n	8008518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	2b20      	cmp	r3, #32
 8008506:	d107      	bne.n	8008518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0220 	mvn.w	r2, #32
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f948 	bl	80087a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a40      	ldr	r2, [pc, #256]	; (8008684 <TIM_Base_SetConfig+0x114>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d013      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858e:	d00f      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a3d      	ldr	r2, [pc, #244]	; (8008688 <TIM_Base_SetConfig+0x118>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00b      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a3c      	ldr	r2, [pc, #240]	; (800868c <TIM_Base_SetConfig+0x11c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d007      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a3b      	ldr	r2, [pc, #236]	; (8008690 <TIM_Base_SetConfig+0x120>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d003      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a3a      	ldr	r2, [pc, #232]	; (8008694 <TIM_Base_SetConfig+0x124>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d108      	bne.n	80085c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a2f      	ldr	r2, [pc, #188]	; (8008684 <TIM_Base_SetConfig+0x114>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d02b      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d0:	d027      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a2c      	ldr	r2, [pc, #176]	; (8008688 <TIM_Base_SetConfig+0x118>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d023      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a2b      	ldr	r2, [pc, #172]	; (800868c <TIM_Base_SetConfig+0x11c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d01f      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a2a      	ldr	r2, [pc, #168]	; (8008690 <TIM_Base_SetConfig+0x120>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d01b      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a29      	ldr	r2, [pc, #164]	; (8008694 <TIM_Base_SetConfig+0x124>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d017      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a28      	ldr	r2, [pc, #160]	; (8008698 <TIM_Base_SetConfig+0x128>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d013      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a27      	ldr	r2, [pc, #156]	; (800869c <TIM_Base_SetConfig+0x12c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00f      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <TIM_Base_SetConfig+0x130>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d00b      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a25      	ldr	r2, [pc, #148]	; (80086a4 <TIM_Base_SetConfig+0x134>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d007      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a24      	ldr	r2, [pc, #144]	; (80086a8 <TIM_Base_SetConfig+0x138>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d003      	beq.n	8008622 <TIM_Base_SetConfig+0xb2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a23      	ldr	r2, [pc, #140]	; (80086ac <TIM_Base_SetConfig+0x13c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d108      	bne.n	8008634 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <TIM_Base_SetConfig+0x114>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0xf8>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a0c      	ldr	r2, [pc, #48]	; (8008694 <TIM_Base_SetConfig+0x124>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d103      	bne.n	8008670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	615a      	str	r2, [r3, #20]
}
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	40010000 	.word	0x40010000
 8008688:	40000400 	.word	0x40000400
 800868c:	40000800 	.word	0x40000800
 8008690:	40000c00 	.word	0x40000c00
 8008694:	40010400 	.word	0x40010400
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800
 80086a4:	40001800 	.word	0x40001800
 80086a8:	40001c00 	.word	0x40001c00
 80086ac:	40002000 	.word	0x40002000

080086b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e05a      	b.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a21      	ldr	r2, [pc, #132]	; (800878c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d022      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008714:	d01d      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a1d      	ldr	r2, [pc, #116]	; (8008790 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d018      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1b      	ldr	r2, [pc, #108]	; (8008794 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d013      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1a      	ldr	r2, [pc, #104]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00e      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a18      	ldr	r2, [pc, #96]	; (800879c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d009      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a17      	ldr	r2, [pc, #92]	; (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d004      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a15      	ldr	r2, [pc, #84]	; (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d10c      	bne.n	800876c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4313      	orrs	r3, r2
 8008762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	40010000 	.word	0x40010000
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800
 8008798:	40000c00 	.word	0x40000c00
 800879c:	40010400 	.word	0x40010400
 80087a0:	40014000 	.word	0x40014000
 80087a4:	40001800 	.word	0x40001800

080087a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d123      	bne.n	800882a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80087ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	6851      	ldr	r1, [r2, #4]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	6892      	ldr	r2, [r2, #8]
 80087f6:	4311      	orrs	r1, r2
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	68d2      	ldr	r2, [r2, #12]
 80087fc:	4311      	orrs	r1, r2
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	6912      	ldr	r2, [r2, #16]
 8008802:	4311      	orrs	r1, r2
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	6952      	ldr	r2, [r2, #20]
 8008808:	4311      	orrs	r1, r2
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	6992      	ldr	r2, [r2, #24]
 800880e:	4311      	orrs	r1, r2
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	69d2      	ldr	r2, [r2, #28]
 8008814:	4311      	orrs	r1, r2
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	6a12      	ldr	r2, [r2, #32]
 800881a:	4311      	orrs	r1, r2
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008820:	430a      	orrs	r2, r1
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e028      	b.n	800887c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	69d9      	ldr	r1, [r3, #28]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	4319      	orrs	r1, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	430b      	orrs	r3, r1
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	6851      	ldr	r1, [r2, #4]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	6892      	ldr	r2, [r2, #8]
 800885c:	4311      	orrs	r1, r2
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	68d2      	ldr	r2, [r2, #12]
 8008862:	4311      	orrs	r1, r2
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	6912      	ldr	r2, [r2, #16]
 8008868:	4311      	orrs	r1, r2
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	6952      	ldr	r2, [r2, #20]
 800886e:	4311      	orrs	r1, r2
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	6992      	ldr	r2, [r2, #24]
 8008874:	430a      	orrs	r2, r1
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d128      	bne.n	80088ee <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	1e59      	subs	r1, r3, #1
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	011b      	lsls	r3, r3, #4
 80088b2:	4319      	orrs	r1, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	4319      	orrs	r1, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	031b      	lsls	r3, r3, #12
 80088c6:	4319      	orrs	r1, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	041b      	lsls	r3, r3, #16
 80088d0:	4319      	orrs	r1, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	051b      	lsls	r3, r3, #20
 80088da:	4319      	orrs	r1, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	061b      	lsls	r3, r3, #24
 80088e4:	430b      	orrs	r3, r1
 80088e6:	431a      	orrs	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	609a      	str	r2, [r3, #8]
 80088ec:	e02f      	b.n	800894e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	68d2      	ldr	r2, [r2, #12]
 80088fe:	3a01      	subs	r2, #1
 8008900:	0311      	lsls	r1, r2, #12
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	6952      	ldr	r2, [r2, #20]
 8008906:	3a01      	subs	r2, #1
 8008908:	0512      	lsls	r2, r2, #20
 800890a:	430a      	orrs	r2, r1
 800890c:	431a      	orrs	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	1e59      	subs	r1, r3, #1
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	3b01      	subs	r3, #1
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	4319      	orrs	r1, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	3b01      	subs	r3, #1
 8008930:	021b      	lsls	r3, r3, #8
 8008932:	4319      	orrs	r1, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	3b01      	subs	r3, #1
 800893a:	041b      	lsls	r3, r3, #16
 800893c:	4319      	orrs	r1, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	3b01      	subs	r3, #1
 8008944:	061b      	lsls	r3, r3, #24
 8008946:	430b      	orrs	r3, r1
 8008948:	431a      	orrs	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	0d9b      	lsrs	r3, r3, #22
 8008972:	059b      	lsls	r3, r3, #22
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	6811      	ldr	r1, [r2, #0]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	6852      	ldr	r2, [r2, #4]
 800897c:	4311      	orrs	r1, r2
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	6892      	ldr	r2, [r2, #8]
 8008982:	3a01      	subs	r2, #1
 8008984:	0152      	lsls	r2, r2, #5
 8008986:	4311      	orrs	r1, r2
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	68d2      	ldr	r2, [r2, #12]
 800898c:	0252      	lsls	r2, r2, #9
 800898e:	430a      	orrs	r2, r1
 8008990:	431a      	orrs	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008996:	f7fb f80b 	bl	80039b0 <HAL_GetTick>
 800899a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800899c:	e010      	b.n	80089c0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a4:	d00c      	beq.n	80089c0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d007      	beq.n	80089bc <FMC_SDRAM_SendCommand+0x60>
 80089ac:	f7fb f800 	bl	80039b0 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d201      	bcs.n	80089c0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e006      	b.n	80089ce <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d0e8      	beq.n	800899e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80089e8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	0052      	lsls	r2, r2, #1
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a04:	b084      	sub	sp, #16
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	f107 001c 	add.w	r0, r7, #28
 8008a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d122      	bne.n	8008a62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d105      	bne.n	8008a56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fbee 	bl	800a238 <USB_CoreReset>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	e01a      	b.n	8008a98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 fbe2 	bl	800a238 <USB_CoreReset>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
 8008a8a:	e005      	b.n	8008a98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d10b      	bne.n	8008ab6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f043 0206 	orr.w	r2, r3, #6
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f043 0220 	orr.w	r2, r3, #32
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac2:	b004      	add	sp, #16
 8008ac4:	4770      	bx	lr
	...

08008ac8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d165      	bne.n	8008ba8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4a41      	ldr	r2, [pc, #260]	; (8008be4 <USB_SetTurnaroundTime+0x11c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d906      	bls.n	8008af2 <USB_SetTurnaroundTime+0x2a>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4a40      	ldr	r2, [pc, #256]	; (8008be8 <USB_SetTurnaroundTime+0x120>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d202      	bcs.n	8008af2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008aec:	230f      	movs	r3, #15
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e062      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	4a3c      	ldr	r2, [pc, #240]	; (8008be8 <USB_SetTurnaroundTime+0x120>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d306      	bcc.n	8008b08 <USB_SetTurnaroundTime+0x40>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a3b      	ldr	r2, [pc, #236]	; (8008bec <USB_SetTurnaroundTime+0x124>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d202      	bcs.n	8008b08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b02:	230e      	movs	r3, #14
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e057      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4a38      	ldr	r2, [pc, #224]	; (8008bec <USB_SetTurnaroundTime+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d306      	bcc.n	8008b1e <USB_SetTurnaroundTime+0x56>
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4a37      	ldr	r2, [pc, #220]	; (8008bf0 <USB_SetTurnaroundTime+0x128>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d202      	bcs.n	8008b1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b18:	230d      	movs	r3, #13
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	e04c      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4a33      	ldr	r2, [pc, #204]	; (8008bf0 <USB_SetTurnaroundTime+0x128>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d306      	bcc.n	8008b34 <USB_SetTurnaroundTime+0x6c>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4a32      	ldr	r2, [pc, #200]	; (8008bf4 <USB_SetTurnaroundTime+0x12c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d802      	bhi.n	8008b34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b2e:	230c      	movs	r3, #12
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	e041      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	4a2f      	ldr	r2, [pc, #188]	; (8008bf4 <USB_SetTurnaroundTime+0x12c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d906      	bls.n	8008b4a <USB_SetTurnaroundTime+0x82>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4a2e      	ldr	r2, [pc, #184]	; (8008bf8 <USB_SetTurnaroundTime+0x130>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d802      	bhi.n	8008b4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b44:	230b      	movs	r3, #11
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	e036      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	4a2a      	ldr	r2, [pc, #168]	; (8008bf8 <USB_SetTurnaroundTime+0x130>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d906      	bls.n	8008b60 <USB_SetTurnaroundTime+0x98>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4a29      	ldr	r2, [pc, #164]	; (8008bfc <USB_SetTurnaroundTime+0x134>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d802      	bhi.n	8008b60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b5a:	230a      	movs	r3, #10
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e02b      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4a26      	ldr	r2, [pc, #152]	; (8008bfc <USB_SetTurnaroundTime+0x134>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d906      	bls.n	8008b76 <USB_SetTurnaroundTime+0xae>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4a25      	ldr	r2, [pc, #148]	; (8008c00 <USB_SetTurnaroundTime+0x138>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d202      	bcs.n	8008b76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b70:	2309      	movs	r3, #9
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e020      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4a21      	ldr	r2, [pc, #132]	; (8008c00 <USB_SetTurnaroundTime+0x138>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d306      	bcc.n	8008b8c <USB_SetTurnaroundTime+0xc4>
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	4a20      	ldr	r2, [pc, #128]	; (8008c04 <USB_SetTurnaroundTime+0x13c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d802      	bhi.n	8008b8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b86:	2308      	movs	r3, #8
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	e015      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <USB_SetTurnaroundTime+0x13c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d906      	bls.n	8008ba2 <USB_SetTurnaroundTime+0xda>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4a1c      	ldr	r2, [pc, #112]	; (8008c08 <USB_SetTurnaroundTime+0x140>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d202      	bcs.n	8008ba2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b9c:	2307      	movs	r3, #7
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	e00a      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ba2:	2306      	movs	r3, #6
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e007      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bae:	2309      	movs	r3, #9
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e001      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bb4:	2309      	movs	r3, #9
 8008bb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	029b      	lsls	r3, r3, #10
 8008bcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	00d8acbf 	.word	0x00d8acbf
 8008be8:	00e4e1c0 	.word	0x00e4e1c0
 8008bec:	00f42400 	.word	0x00f42400
 8008bf0:	01067380 	.word	0x01067380
 8008bf4:	011a499f 	.word	0x011a499f
 8008bf8:	01312cff 	.word	0x01312cff
 8008bfc:	014ca43f 	.word	0x014ca43f
 8008c00:	016e3600 	.word	0x016e3600
 8008c04:	01a6ab1f 	.word	0x01a6ab1f
 8008c08:	01e84800 	.word	0x01e84800

08008c0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f043 0201 	orr.w	r2, r3, #1
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f023 0201 	bic.w	r2, r3, #1
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d115      	bne.n	8008c9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c7e:	2001      	movs	r0, #1
 8008c80:	f7fa fea2 	bl	80039c8 <HAL_Delay>
      ms++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 fa45 	bl	800a11a <USB_GetMode>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d01e      	beq.n	8008cd4 <USB_SetCurrentMode+0x84>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b31      	cmp	r3, #49	; 0x31
 8008c9a:	d9f0      	bls.n	8008c7e <USB_SetCurrentMode+0x2e>
 8008c9c:	e01a      	b.n	8008cd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d115      	bne.n	8008cd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	f7fa fe89 	bl	80039c8 <HAL_Delay>
      ms++;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fa2c 	bl	800a11a <USB_GetMode>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <USB_SetCurrentMode+0x84>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b31      	cmp	r3, #49	; 0x31
 8008ccc:	d9f0      	bls.n	8008cb0 <USB_SetCurrentMode+0x60>
 8008cce:	e001      	b.n	8008cd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e005      	b.n	8008ce0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b32      	cmp	r3, #50	; 0x32
 8008cd8:	d101      	bne.n	8008cde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ce8:	b084      	sub	sp, #16
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b086      	sub	sp, #24
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d02:	2300      	movs	r3, #0
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	e009      	b.n	8008d1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	3340      	adds	r3, #64	; 0x40
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2b0e      	cmp	r3, #14
 8008d20:	d9f2      	bls.n	8008d08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d11c      	bne.n	8008d62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d36:	f043 0302 	orr.w	r3, r3, #2
 8008d3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8008d60:	e00b      	b.n	8008d7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d80:	461a      	mov	r2, r3
 8008d82:	2300      	movs	r3, #0
 8008d84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d94:	461a      	mov	r2, r3
 8008d96:	680b      	ldr	r3, [r1, #0]
 8008d98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d10c      	bne.n	8008dba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d104      	bne.n	8008db0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008da6:	2100      	movs	r1, #0
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f965 	bl	8009078 <USB_SetDevSpeed>
 8008dae:	e008      	b.n	8008dc2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008db0:	2101      	movs	r1, #1
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f960 	bl	8009078 <USB_SetDevSpeed>
 8008db8:	e003      	b.n	8008dc2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dba:	2103      	movs	r1, #3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f95b 	bl	8009078 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dc2:	2110      	movs	r1, #16
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f8f3 	bl	8008fb0 <USB_FlushTxFifo>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f91f 	bl	8009018 <USB_FlushRxFifo>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dea:	461a      	mov	r2, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df6:	461a      	mov	r2, r3
 8008df8:	2300      	movs	r3, #0
 8008dfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	461a      	mov	r2, r3
 8008e04:	2300      	movs	r3, #0
 8008e06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	e043      	b.n	8008e96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e24:	d118      	bne.n	8008e58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e013      	b.n	8008e6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	e008      	b.n	8008e6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	461a      	mov	r2, r3
 8008e66:	2300      	movs	r3, #0
 8008e68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e76:	461a      	mov	r2, r3
 8008e78:	2300      	movs	r3, #0
 8008e7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e88:	461a      	mov	r2, r3
 8008e8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	3301      	adds	r3, #1
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d3b7      	bcc.n	8008e0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	e043      	b.n	8008f2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eba:	d118      	bne.n	8008eee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	e013      	b.n	8008f00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	e008      	b.n	8008f00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efa:	461a      	mov	r2, r3
 8008efc:	2300      	movs	r3, #0
 8008efe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	2300      	movs	r3, #0
 8008f10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d3b7      	bcc.n	8008ea4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d105      	bne.n	8008f68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f043 0210 	orr.w	r2, r3, #16
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <USB_DevInit+0x2c4>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d005      	beq.n	8008f86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	f043 0208 	orr.w	r2, r3, #8
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d107      	bne.n	8008f9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f94:	f043 0304 	orr.w	r3, r3, #4
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fa8:	b004      	add	sp, #16
 8008faa:	4770      	bx	lr
 8008fac:	803c3800 	.word	0x803c3800

08008fb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a13      	ldr	r2, [pc, #76]	; (8009014 <USB_FlushTxFifo+0x64>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d901      	bls.n	8008fd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e01b      	b.n	8009008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	daf2      	bge.n	8008fbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	019b      	lsls	r3, r3, #6
 8008fe0:	f043 0220 	orr.w	r2, r3, #32
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3301      	adds	r3, #1
 8008fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a08      	ldr	r2, [pc, #32]	; (8009014 <USB_FlushTxFifo+0x64>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d901      	bls.n	8008ffa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e006      	b.n	8009008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b20      	cmp	r3, #32
 8009004:	d0f0      	beq.n	8008fe8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	00030d40 	.word	0x00030d40

08009018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4a11      	ldr	r2, [pc, #68]	; (8009074 <USB_FlushRxFifo+0x5c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d901      	bls.n	8009036 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e018      	b.n	8009068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	daf2      	bge.n	8009024 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2210      	movs	r2, #16
 8009046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3301      	adds	r3, #1
 800904c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4a08      	ldr	r2, [pc, #32]	; (8009074 <USB_FlushRxFifo+0x5c>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d901      	bls.n	800905a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e006      	b.n	8009068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	f003 0310 	and.w	r3, r3, #16
 8009062:	2b10      	cmp	r3, #16
 8009064:	d0f0      	beq.n	8009048 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	00030d40 	.word	0x00030d40

08009078 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	68f9      	ldr	r1, [r7, #12]
 8009094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009098:	4313      	orrs	r3, r2
 800909a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b087      	sub	sp, #28
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 0306 	and.w	r3, r3, #6
 80090c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090ca:	2300      	movs	r3, #0
 80090cc:	75fb      	strb	r3, [r7, #23]
 80090ce:	e00a      	b.n	80090e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d002      	beq.n	80090dc <USB_GetDevSpeed+0x32>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b06      	cmp	r3, #6
 80090da:	d102      	bne.n	80090e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090dc:	2302      	movs	r3, #2
 80090de:	75fb      	strb	r3, [r7, #23]
 80090e0:	e001      	b.n	80090e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090e2:	230f      	movs	r3, #15
 80090e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d13a      	bne.n	8009186 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f303 	lsl.w	r3, r1, r3
 8009126:	b29b      	uxth	r3, r3
 8009128:	68f9      	ldr	r1, [r7, #12]
 800912a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800912e:	4313      	orrs	r3, r2
 8009130:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d155      	bne.n	80091f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	791b      	ldrb	r3, [r3, #4]
 8009162:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009164:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800916c:	4313      	orrs	r3, r2
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800917e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	e036      	b.n	80091f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918c:	69da      	ldr	r2, [r3, #28]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	2101      	movs	r1, #1
 8009198:	fa01 f303 	lsl.w	r3, r1, r3
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	68f9      	ldr	r1, [r7, #12]
 80091a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a4:	4313      	orrs	r3, r2
 80091a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d11a      	bne.n	80091f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	791b      	ldrb	r3, [r3, #4]
 80091d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091da:	430b      	orrs	r3, r1
 80091dc:	4313      	orrs	r3, r2
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	785b      	ldrb	r3, [r3, #1]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d161      	bne.n	80092e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009236:	d11f      	bne.n	8009278 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009256:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	440a      	add	r2, r1
 800926e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	2101      	movs	r1, #1
 800928a:	fa01 f303 	lsl.w	r3, r1, r3
 800928e:	b29b      	uxth	r3, r3
 8009290:	43db      	mvns	r3, r3
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009298:	4013      	ands	r3, r2
 800929a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a2:	69da      	ldr	r2, [r3, #28]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	2101      	movs	r1, #1
 80092ae:	fa01 f303 	lsl.w	r3, r1, r3
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	43db      	mvns	r3, r3
 80092b6:	68f9      	ldr	r1, [r7, #12]
 80092b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092bc:	4013      	ands	r3, r2
 80092be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	0159      	lsls	r1, r3, #5
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	440b      	add	r3, r1
 80092d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092da:	4619      	mov	r1, r3
 80092dc:	4b35      	ldr	r3, [pc, #212]	; (80093b4 <USB_DeactivateEndpoint+0x1b0>)
 80092de:	4013      	ands	r3, r2
 80092e0:	600b      	str	r3, [r1, #0]
 80092e2:	e060      	b.n	80093a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092fa:	d11f      	bne.n	800933c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	440a      	add	r2, r1
 8009312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800931a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	0151      	lsls	r1, r2, #5
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	440a      	add	r2, r1
 8009332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800933a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	2101      	movs	r1, #1
 800934e:	fa01 f303 	lsl.w	r3, r1, r3
 8009352:	041b      	lsls	r3, r3, #16
 8009354:	43db      	mvns	r3, r3
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800935c:	4013      	ands	r3, r2
 800935e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	2101      	movs	r1, #1
 8009372:	fa01 f303 	lsl.w	r3, r1, r3
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	43db      	mvns	r3, r3
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009380:	4013      	ands	r3, r2
 8009382:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	0159      	lsls	r1, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	440b      	add	r3, r1
 800939a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939e:	4619      	mov	r1, r3
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <USB_DeactivateEndpoint+0x1b4>)
 80093a2:	4013      	ands	r3, r2
 80093a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	ec337800 	.word	0xec337800
 80093b8:	eff37800 	.word	0xeff37800

080093bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08a      	sub	sp, #40	; 0x28
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	785b      	ldrb	r3, [r3, #1]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	f040 815c 	bne.w	8009696 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d132      	bne.n	800944c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	0151      	lsls	r1, r2, #5
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	440a      	add	r2, r1
 80093fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	440a      	add	r2, r1
 8009420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009444:	0cdb      	lsrs	r3, r3, #19
 8009446:	04db      	lsls	r3, r3, #19
 8009448:	6113      	str	r3, [r2, #16]
 800944a:	e074      	b.n	8009536 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	0151      	lsls	r1, r2, #5
 800945e:	69fa      	ldr	r2, [r7, #28]
 8009460:	440a      	add	r2, r1
 8009462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009466:	0cdb      	lsrs	r3, r3, #19
 8009468:	04db      	lsls	r3, r3, #19
 800946a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	440a      	add	r2, r1
 8009482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800948a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800948e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	6999      	ldr	r1, [r3, #24]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	440b      	add	r3, r1
 80094a8:	1e59      	subs	r1, r3, #1
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80094b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094b4:	4b9d      	ldr	r3, [pc, #628]	; (800972c <USB_EPStartXfer+0x370>)
 80094b6:	400b      	ands	r3, r1
 80094b8:	69b9      	ldr	r1, [r7, #24]
 80094ba:	0148      	lsls	r0, r1, #5
 80094bc:	69f9      	ldr	r1, [r7, #28]
 80094be:	4401      	add	r1, r0
 80094c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094c4:	4313      	orrs	r3, r2
 80094c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094de:	69b9      	ldr	r1, [r7, #24]
 80094e0:	0148      	lsls	r0, r1, #5
 80094e2:	69f9      	ldr	r1, [r7, #28]
 80094e4:	4401      	add	r1, r0
 80094e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094ea:	4313      	orrs	r3, r2
 80094ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	791b      	ldrb	r3, [r3, #4]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d11f      	bne.n	8009536 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009534:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d14b      	bne.n	80095d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009550:	461a      	mov	r2, r3
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	791b      	ldrb	r3, [r3, #4]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d128      	bne.n	80095b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d110      	bne.n	8009592 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	e00f      	b.n	80095b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	0151      	lsls	r1, r2, #5
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	440a      	add	r2, r1
 80095c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	e133      	b.n	800983c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	791b      	ldrb	r3, [r3, #4]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d015      	beq.n	8009628 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 811b 	beq.w	800983c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	2101      	movs	r1, #1
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	69f9      	ldr	r1, [r7, #28]
 800961e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009622:	4313      	orrs	r3, r2
 8009624:	634b      	str	r3, [r1, #52]	; 0x34
 8009626:	e109      	b.n	800983c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009634:	2b00      	cmp	r3, #0
 8009636:	d110      	bne.n	800965a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	e00f      	b.n	800967a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009678:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6919      	ldr	r1, [r3, #16]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	b298      	uxth	r0, r3
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	4603      	mov	r3, r0
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 fade 	bl	8009c50 <USB_WritePacket>
 8009694:	e0d2      	b.n	800983c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	69fa      	ldr	r2, [r7, #28]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b0:	0cdb      	lsrs	r3, r3, #19
 80096b2:	04db      	lsls	r3, r3, #19
 80096b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	0151      	lsls	r1, r2, #5
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	440a      	add	r2, r1
 80096cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d126      	bne.n	8009730 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ee:	691a      	ldr	r2, [r3, #16]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096f8:	69b9      	ldr	r1, [r7, #24]
 80096fa:	0148      	lsls	r0, r1, #5
 80096fc:	69f9      	ldr	r1, [r7, #28]
 80096fe:	4401      	add	r1, r0
 8009700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009704:	4313      	orrs	r3, r2
 8009706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	0151      	lsls	r1, r2, #5
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	440a      	add	r2, r1
 800971e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009726:	6113      	str	r3, [r2, #16]
 8009728:	e03a      	b.n	80097a0 <USB_EPStartXfer+0x3e4>
 800972a:	bf00      	nop
 800972c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	699a      	ldr	r2, [r3, #24]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	4413      	add	r3, r2
 800973a:	1e5a      	subs	r2, r3, #1
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	fbb2 f3f3 	udiv	r3, r2, r3
 8009744:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	8afa      	ldrh	r2, [r7, #22]
 800974c:	fb03 f202 	mul.w	r2, r3, r2
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	8afb      	ldrh	r3, [r7, #22]
 8009764:	04d9      	lsls	r1, r3, #19
 8009766:	4b38      	ldr	r3, [pc, #224]	; (8009848 <USB_EPStartXfer+0x48c>)
 8009768:	400b      	ands	r3, r1
 800976a:	69b9      	ldr	r1, [r7, #24]
 800976c:	0148      	lsls	r0, r1, #5
 800976e:	69f9      	ldr	r1, [r7, #28]
 8009770:	4401      	add	r1, r0
 8009772:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009776:	4313      	orrs	r3, r2
 8009778:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009786:	691a      	ldr	r2, [r3, #16]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009790:	69b9      	ldr	r1, [r7, #24]
 8009792:	0148      	lsls	r0, r1, #5
 8009794:	69f9      	ldr	r1, [r7, #28]
 8009796:	4401      	add	r1, r0
 8009798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800979c:	4313      	orrs	r3, r2
 800979e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d10d      	bne.n	80097c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6919      	ldr	r1, [r3, #16]
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	460a      	mov	r2, r1
 80097c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d128      	bne.n	800981c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d110      	bne.n	80097fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	69fa      	ldr	r2, [r7, #28]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	e00f      	b.n	800981c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	440a      	add	r2, r1
 8009812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800981a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	0151      	lsls	r1, r2, #5
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	440a      	add	r2, r1
 8009832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800983a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	1ff80000 	.word	0x1ff80000

0800984c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	2b01      	cmp	r3, #1
 800986a:	f040 80ce 	bne.w	8009a0a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d132      	bne.n	80098dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	0151      	lsls	r1, r2, #5
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	440a      	add	r2, r1
 800988c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d4:	0cdb      	lsrs	r3, r3, #19
 80098d6:	04db      	lsls	r3, r3, #19
 80098d8:	6113      	str	r3, [r2, #16]
 80098da:	e04e      	b.n	800997a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f6:	0cdb      	lsrs	r3, r3, #19
 80098f8:	04db      	lsls	r3, r3, #19
 80098fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	0151      	lsls	r1, r2, #5
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	440a      	add	r2, r1
 8009912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800991a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800991e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	699a      	ldr	r2, [r3, #24]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	429a      	cmp	r2, r3
 800992a:	d903      	bls.n	8009934 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	0151      	lsls	r1, r2, #5
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	440a      	add	r2, r1
 800994a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800994e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009960:	691a      	ldr	r2, [r3, #16]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800996a:	6939      	ldr	r1, [r7, #16]
 800996c:	0148      	lsls	r0, r1, #5
 800996e:	6979      	ldr	r1, [r7, #20]
 8009970:	4401      	add	r1, r0
 8009972:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009976:	4313      	orrs	r3, r2
 8009978:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d11e      	bne.n	80099be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d009      	beq.n	800999c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009994:	461a      	mov	r2, r3
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	0151      	lsls	r1, r2, #5
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	440a      	add	r2, r1
 80099b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	e097      	b.n	8009aee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	0151      	lsls	r1, r2, #5
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	440a      	add	r2, r1
 80099d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 8083 	beq.w	8009aee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f003 030f 	and.w	r3, r3, #15
 80099f8:	2101      	movs	r1, #1
 80099fa:	fa01 f303 	lsl.w	r3, r1, r3
 80099fe:	6979      	ldr	r1, [r7, #20]
 8009a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a04:	4313      	orrs	r3, r2
 8009a06:	634b      	str	r3, [r1, #52]	; 0x34
 8009a08:	e071      	b.n	8009aee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	0151      	lsls	r1, r2, #5
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	440a      	add	r2, r1
 8009a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a24:	0cdb      	lsrs	r3, r3, #19
 8009a26:	04db      	lsls	r3, r3, #19
 8009a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	0151      	lsls	r1, r2, #5
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	440a      	add	r2, r1
 8009a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	68da      	ldr	r2, [r3, #12]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a9c:	6939      	ldr	r1, [r7, #16]
 8009a9e:	0148      	lsls	r0, r1, #5
 8009aa0:	6979      	ldr	r1, [r7, #20]
 8009aa2:	4401      	add	r1, r0
 8009aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d10d      	bne.n	8009ace <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	6919      	ldr	r1, [r3, #16]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aca:	460a      	mov	r2, r1
 8009acc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	0151      	lsls	r1, r2, #5
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	440a      	add	r2, r1
 8009ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009aec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	371c      	adds	r7, #28
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d14a      	bne.n	8009bb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b32:	f040 8086 	bne.w	8009c42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	7812      	ldrb	r2, [r2, #0]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	7812      	ldrb	r2, [r2, #0]
 8009b6e:	0151      	lsls	r1, r2, #5
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	440a      	add	r2, r1
 8009b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3301      	adds	r3, #1
 8009b82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d902      	bls.n	8009b94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	75fb      	strb	r3, [r7, #23]
          break;
 8009b92:	e056      	b.n	8009c42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bac:	d0e7      	beq.n	8009b7e <USB_EPStopXfer+0x82>
 8009bae:	e048      	b.n	8009c42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bc8:	d13b      	bne.n	8009c42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	7812      	ldrb	r2, [r2, #0]
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	7812      	ldrb	r2, [r2, #0]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d902      	bls.n	8009c28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	75fb      	strb	r3, [r7, #23]
          break;
 8009c26:	e00c      	b.n	8009c42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c40:	d0e7      	beq.n	8009c12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	371c      	adds	r7, #28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b089      	sub	sp, #36	; 0x24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	460b      	mov	r3, r1
 8009c60:	71fb      	strb	r3, [r7, #7]
 8009c62:	4613      	mov	r3, r2
 8009c64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d123      	bne.n	8009cbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c76:	88bb      	ldrh	r3, [r7, #4]
 8009c78:	3303      	adds	r3, #3
 8009c7a:	089b      	lsrs	r3, r3, #2
 8009c7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c7e:	2300      	movs	r3, #0
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	e018      	b.n	8009cb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	031a      	lsls	r2, r3, #12
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c90:	461a      	mov	r2, r3
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	3301      	adds	r3, #1
 8009cae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d3e2      	bcc.n	8009c84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3724      	adds	r7, #36	; 0x24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b08b      	sub	sp, #44	; 0x2c
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	089b      	lsrs	r3, r3, #2
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	623b      	str	r3, [r7, #32]
 8009cf6:	e014      	b.n	8009d22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	3301      	adds	r3, #1
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	3301      	adds	r3, #1
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	3301      	adds	r3, #1
 8009d1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	623b      	str	r3, [r7, #32]
 8009d22:	6a3a      	ldr	r2, [r7, #32]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d3e6      	bcc.n	8009cf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d2a:	8bfb      	ldrh	r3, [r7, #30]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01e      	beq.n	8009d6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d30:	2300      	movs	r3, #0
 8009d32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f107 0310 	add.w	r3, r7, #16
 8009d40:	6812      	ldr	r2, [r2, #0]
 8009d42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	701a      	strb	r2, [r3, #0]
      i++;
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	3301      	adds	r3, #1
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d62:	8bfb      	ldrh	r3, [r7, #30]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d68:	8bfb      	ldrh	r3, [r7, #30]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1ea      	bne.n	8009d44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	372c      	adds	r7, #44	; 0x2c
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	785b      	ldrb	r3, [r3, #1]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d12c      	bne.n	8009df2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	db12      	blt.n	8009dd0 <USB_EPSetStall+0x54>
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00f      	beq.n	8009dd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	0151      	lsls	r1, r2, #5
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	440a      	add	r2, r1
 8009de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	e02b      	b.n	8009e4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	db12      	blt.n	8009e2a <USB_EPSetStall+0xae>
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00f      	beq.n	8009e2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	0151      	lsls	r1, r2, #5
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	440a      	add	r2, r1
 8009e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	0151      	lsls	r1, r2, #5
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	440a      	add	r2, r1
 8009e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	785b      	ldrb	r3, [r3, #1]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d128      	bne.n	8009ec6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	791b      	ldrb	r3, [r3, #4]
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d003      	beq.n	8009ea4 <USB_EPClearStall+0x4c>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	791b      	ldrb	r3, [r3, #4]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d138      	bne.n	8009f16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	0151      	lsls	r1, r2, #5
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	440a      	add	r2, r1
 8009eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	e027      	b.n	8009f16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ee4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	791b      	ldrb	r3, [r3, #4]
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d003      	beq.n	8009ef6 <USB_EPClearStall+0x9e>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	791b      	ldrb	r3, [r3, #4]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d10f      	bne.n	8009f16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	011b      	lsls	r3, r3, #4
 8009f54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f58:	68f9      	ldr	r1, [r7, #12]
 8009f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f8a:	f023 0303 	bic.w	r3, r3, #3
 8009f8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f9e:	f023 0302 	bic.w	r3, r3, #2
 8009fa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b085      	sub	sp, #20
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fcc:	f023 0303 	bic.w	r3, r3, #3
 8009fd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fe0:	f043 0302 	orr.w	r3, r3, #2
 8009fe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4013      	ands	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a00c:	68fb      	ldr	r3, [r7, #12]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b085      	sub	sp, #20
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	4013      	ands	r3, r2
 800a03c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	0c1b      	lsrs	r3, r3, #16
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a04e:	b480      	push	{r7}
 800a050:	b085      	sub	sp, #20
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	4013      	ands	r3, r2
 800a070:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	b29b      	uxth	r3, r3
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a082:	b480      	push	{r7}
 800a084:	b085      	sub	sp, #20
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b087      	sub	sp, #28
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	f003 030f 	and.w	r3, r3, #15
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ee:	01db      	lsls	r3, r3, #7
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	4013      	ands	r3, r2
 800a10a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a10c:	68bb      	ldr	r3, [r7, #8]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	f003 0301 	and.w	r3, r3, #1
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a150:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a154:	f023 0307 	bic.w	r3, r3, #7
 800a158:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a16c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	460b      	mov	r3, r1
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	333c      	adds	r3, #60	; 0x3c
 800a192:	3304      	adds	r3, #4
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	4a26      	ldr	r2, [pc, #152]	; (800a234 <USB_EP0_OutStart+0xb8>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d90a      	bls.n	800a1b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1b0:	d101      	bne.n	800a1b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e037      	b.n	800a226 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1bc:	461a      	mov	r2, r3
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1e4:	f043 0318 	orr.w	r3, r3, #24
 800a1e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a1fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a1fe:	7afb      	ldrb	r3, [r7, #11]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d10f      	bne.n	800a224 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20a:	461a      	mov	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a21e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	4f54300a 	.word	0x4f54300a

0800a238 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3301      	adds	r3, #1
 800a248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4a13      	ldr	r2, [pc, #76]	; (800a29c <USB_CoreReset+0x64>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d901      	bls.n	800a256 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e01b      	b.n	800a28e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	daf2      	bge.n	800a244 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	f043 0201 	orr.w	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3301      	adds	r3, #1
 800a272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4a09      	ldr	r2, [pc, #36]	; (800a29c <USB_CoreReset+0x64>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d901      	bls.n	800a280 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e006      	b.n	800a28e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d0f0      	beq.n	800a26e <USB_CoreReset+0x36>

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	00030d40 	.word	0x00030d40

0800a2a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a2ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2b2:	2b84      	cmp	r3, #132	; 0x84
 800a2b4:	d005      	beq.n	800a2c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a2b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4413      	add	r3, r2
 800a2be:	3303      	adds	r3, #3
 800a2c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a2d4:	f000 ff7e 	bl	800b1d4 <vTaskStartScheduler>
  
  return osOK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a2de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e0:	b089      	sub	sp, #36	; 0x24
 800a2e2:	af04      	add	r7, sp, #16
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d020      	beq.n	800a332 <osThreadCreate+0x54>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01c      	beq.n	800a332 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685c      	ldr	r4, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681d      	ldr	r5, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691e      	ldr	r6, [r3, #16]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff ffc8 	bl	800a2a0 <makeFreeRtosPriority>
 800a310:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a31a:	9202      	str	r2, [sp, #8]
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	9100      	str	r1, [sp, #0]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	4632      	mov	r2, r6
 800a324:	4629      	mov	r1, r5
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fce6 	bl	800acf8 <xTaskCreateStatic>
 800a32c:	4603      	mov	r3, r0
 800a32e:	60fb      	str	r3, [r7, #12]
 800a330:	e01c      	b.n	800a36c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685c      	ldr	r4, [r3, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a33e:	b29e      	uxth	r6, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff ffaa 	bl	800a2a0 <makeFreeRtosPriority>
 800a34c:	4602      	mov	r2, r0
 800a34e:	f107 030c 	add.w	r3, r7, #12
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	9200      	str	r2, [sp, #0]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	4632      	mov	r2, r6
 800a35a:	4629      	mov	r1, r5
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fd28 	bl	800adb2 <xTaskCreate>
 800a362:	4603      	mov	r3, r0
 800a364:	2b01      	cmp	r3, #1
 800a366:	d001      	beq.n	800a36c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a368:	2300      	movs	r3, #0
 800a36a:	e000      	b.n	800a36e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a36c:	68fb      	ldr	r3, [r7, #12]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a376 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <osDelay+0x16>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	e000      	b.n	800a38e <osDelay+0x18>
 800a38c:	2301      	movs	r3, #1
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 feec 	bl	800b16c <vTaskDelay>
  
  return osOK;
 800a394:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	; 0x28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3ac:	f000 ff7c 	bl	800b2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3b0:	4b5b      	ldr	r3, [pc, #364]	; (800a520 <pvPortMalloc+0x180>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3b8:	f000 f920 	bl	800a5fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3bc:	4b59      	ldr	r3, [pc, #356]	; (800a524 <pvPortMalloc+0x184>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f040 8093 	bne.w	800a4f0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01d      	beq.n	800a40c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3d0:	2208      	movs	r2, #8
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f003 0307 	and.w	r3, r3, #7
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d014      	beq.n	800a40c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f023 0307 	bic.w	r3, r3, #7
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f003 0307 	and.w	r3, r3, #7
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00a      	beq.n	800a40c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d06e      	beq.n	800a4f0 <pvPortMalloc+0x150>
 800a412:	4b45      	ldr	r3, [pc, #276]	; (800a528 <pvPortMalloc+0x188>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d869      	bhi.n	800a4f0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a41c:	4b43      	ldr	r3, [pc, #268]	; (800a52c <pvPortMalloc+0x18c>)
 800a41e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a420:	4b42      	ldr	r3, [pc, #264]	; (800a52c <pvPortMalloc+0x18c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a426:	e004      	b.n	800a432 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d903      	bls.n	800a444 <pvPortMalloc+0xa4>
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1f1      	bne.n	800a428 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a444:	4b36      	ldr	r3, [pc, #216]	; (800a520 <pvPortMalloc+0x180>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d050      	beq.n	800a4f0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2208      	movs	r2, #8
 800a454:	4413      	add	r3, r2
 800a456:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	1ad2      	subs	r2, r2, r3
 800a468:	2308      	movs	r3, #8
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d91f      	bls.n	800a4b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4413      	add	r3, r2
 800a476:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	f003 0307 	and.w	r3, r3, #7
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <pvPortMalloc+0xf8>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	613b      	str	r3, [r7, #16]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	1ad2      	subs	r2, r2, r3
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4aa:	69b8      	ldr	r0, [r7, #24]
 800a4ac:	f000 f908 	bl	800a6c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4b0:	4b1d      	ldr	r3, [pc, #116]	; (800a528 <pvPortMalloc+0x188>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	; (800a528 <pvPortMalloc+0x188>)
 800a4bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4be:	4b1a      	ldr	r3, [pc, #104]	; (800a528 <pvPortMalloc+0x188>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b1b      	ldr	r3, [pc, #108]	; (800a530 <pvPortMalloc+0x190>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d203      	bcs.n	800a4d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4ca:	4b17      	ldr	r3, [pc, #92]	; (800a528 <pvPortMalloc+0x188>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a18      	ldr	r2, [pc, #96]	; (800a530 <pvPortMalloc+0x190>)
 800a4d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <pvPortMalloc+0x184>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4e6:	4b13      	ldr	r3, [pc, #76]	; (800a534 <pvPortMalloc+0x194>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	4a11      	ldr	r2, [pc, #68]	; (800a534 <pvPortMalloc+0x194>)
 800a4ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4f0:	f000 fee8 	bl	800b2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <pvPortMalloc+0x174>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	60fb      	str	r3, [r7, #12]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <pvPortMalloc+0x172>
	return pvReturn;
 800a514:	69fb      	ldr	r3, [r7, #28]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3728      	adds	r7, #40	; 0x28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20004648 	.word	0x20004648
 800a524:	2000465c 	.word	0x2000465c
 800a528:	2000464c 	.word	0x2000464c
 800a52c:	20004640 	.word	0x20004640
 800a530:	20004650 	.word	0x20004650
 800a534:	20004654 	.word	0x20004654

0800a538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d04d      	beq.n	800a5e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a54a:	2308      	movs	r3, #8
 800a54c:	425b      	negs	r3, r3
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	4413      	add	r3, r2
 800a552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	4b24      	ldr	r3, [pc, #144]	; (800a5f0 <vPortFree+0xb8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4013      	ands	r3, r2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10a      	bne.n	800a57c <vPortFree+0x44>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	60fb      	str	r3, [r7, #12]
}
 800a578:	bf00      	nop
 800a57a:	e7fe      	b.n	800a57a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00a      	beq.n	800a59a <vPortFree+0x62>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	60bb      	str	r3, [r7, #8]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <vPortFree+0xb8>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01e      	beq.n	800a5e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d11a      	bne.n	800a5e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	4b0e      	ldr	r3, [pc, #56]	; (800a5f0 <vPortFree+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	43db      	mvns	r3, r3
 800a5ba:	401a      	ands	r2, r3
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5c0:	f000 fe72 	bl	800b2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <vPortFree+0xbc>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <vPortFree+0xbc>)
 800a5d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5d2:	6938      	ldr	r0, [r7, #16]
 800a5d4:	f000 f874 	bl	800a6c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5d8:	4b07      	ldr	r3, [pc, #28]	; (800a5f8 <vPortFree+0xc0>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	4a06      	ldr	r2, [pc, #24]	; (800a5f8 <vPortFree+0xc0>)
 800a5e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5e2:	f000 fe6f 	bl	800b2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5e6:	bf00      	nop
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000465c 	.word	0x2000465c
 800a5f4:	2000464c 	.word	0x2000464c
 800a5f8:	20004658 	.word	0x20004658

0800a5fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a602:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a606:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a608:	4b27      	ldr	r3, [pc, #156]	; (800a6a8 <prvHeapInit+0xac>)
 800a60a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f003 0307 	and.w	r3, r3, #7
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00c      	beq.n	800a630 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3307      	adds	r3, #7
 800a61a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f023 0307 	bic.w	r3, r3, #7
 800a622:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	4a1f      	ldr	r2, [pc, #124]	; (800a6a8 <prvHeapInit+0xac>)
 800a62c:	4413      	add	r3, r2
 800a62e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a634:	4a1d      	ldr	r2, [pc, #116]	; (800a6ac <prvHeapInit+0xb0>)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a63a:	4b1c      	ldr	r3, [pc, #112]	; (800a6ac <prvHeapInit+0xb0>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	4413      	add	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a648:	2208      	movs	r2, #8
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0307 	bic.w	r3, r3, #7
 800a656:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4a15      	ldr	r2, [pc, #84]	; (800a6b0 <prvHeapInit+0xb4>)
 800a65c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a65e:	4b14      	ldr	r3, [pc, #80]	; (800a6b0 <prvHeapInit+0xb4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a666:	4b12      	ldr	r3, [pc, #72]	; (800a6b0 <prvHeapInit+0xb4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a67c:	4b0c      	ldr	r3, [pc, #48]	; (800a6b0 <prvHeapInit+0xb4>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a0a      	ldr	r2, [pc, #40]	; (800a6b4 <prvHeapInit+0xb8>)
 800a68a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	4a09      	ldr	r2, [pc, #36]	; (800a6b8 <prvHeapInit+0xbc>)
 800a692:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a694:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <prvHeapInit+0xc0>)
 800a696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a69a:	601a      	str	r2, [r3, #0]
}
 800a69c:	bf00      	nop
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	20000a40 	.word	0x20000a40
 800a6ac:	20004640 	.word	0x20004640
 800a6b0:	20004648 	.word	0x20004648
 800a6b4:	20004650 	.word	0x20004650
 800a6b8:	2000464c 	.word	0x2000464c
 800a6bc:	2000465c 	.word	0x2000465c

0800a6c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6c8:	4b28      	ldr	r3, [pc, #160]	; (800a76c <prvInsertBlockIntoFreeList+0xac>)
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e002      	b.n	800a6d4 <prvInsertBlockIntoFreeList+0x14>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d8f7      	bhi.n	800a6ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d108      	bne.n	800a702 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	441a      	add	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	441a      	add	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	d118      	bne.n	800a748 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	4b15      	ldr	r3, [pc, #84]	; (800a770 <prvInsertBlockIntoFreeList+0xb0>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d00d      	beq.n	800a73e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	441a      	add	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	e008      	b.n	800a750 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a73e:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <prvInsertBlockIntoFreeList+0xb0>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	e003      	b.n	800a750 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	429a      	cmp	r2, r3
 800a756:	d002      	beq.n	800a75e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20004640 	.word	0x20004640
 800a770:	20004648 	.word	0x20004648

0800a774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f103 0208 	add.w	r2, r3, #8
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f04f 32ff 	mov.w	r2, #4294967295
 800a78c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f103 0208 	add.w	r2, r3, #8
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f103 0208 	add.w	r2, r3, #8
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7c2:	bf00      	nop
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b085      	sub	sp, #20
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	601a      	str	r2, [r3, #0]
}
 800a80a:	bf00      	nop
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a816:	b480      	push	{r7}
 800a818:	b085      	sub	sp, #20
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d103      	bne.n	800a836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	e00c      	b.n	800a850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3308      	adds	r3, #8
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	e002      	b.n	800a844 <vListInsert+0x2e>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d2f6      	bcs.n	800a83e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	683a      	ldr	r2, [r7, #0]
 800a86a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	601a      	str	r2, [r3, #0]
}
 800a87c:	bf00      	nop
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	6892      	ldr	r2, [r2, #8]
 800a89e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6852      	ldr	r2, [r2, #4]
 800a8a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d103      	bne.n	800a8bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	1e5a      	subs	r2, r3, #1
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3b04      	subs	r3, #4
 800a8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f023 0201 	bic.w	r2, r3, #1
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3b04      	subs	r3, #4
 800a90a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a90c:	4a0c      	ldr	r2, [pc, #48]	; (800a940 <pxPortInitialiseStack+0x64>)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3b14      	subs	r3, #20
 800a916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3b04      	subs	r3, #4
 800a922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f06f 0202 	mvn.w	r2, #2
 800a92a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3b20      	subs	r3, #32
 800a930:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a932:	68fb      	ldr	r3, [r7, #12]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	0800a945 	.word	0x0800a945

0800a944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a94e:	4b12      	ldr	r3, [pc, #72]	; (800a998 <prvTaskExitError+0x54>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d00a      	beq.n	800a96e <prvTaskExitError+0x2a>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	60fb      	str	r3, [r7, #12]
}
 800a96a:	bf00      	nop
 800a96c:	e7fe      	b.n	800a96c <prvTaskExitError+0x28>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	60bb      	str	r3, [r7, #8]
}
 800a980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a982:	bf00      	nop
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d0fc      	beq.n	800a984 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a98a:	bf00      	nop
 800a98c:	bf00      	nop
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	2000011c 	.word	0x2000011c
 800a99c:	00000000 	.word	0x00000000

0800a9a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <pxCurrentTCBConst2>)
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	6808      	ldr	r0, [r1, #0]
 800a9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	f380 8809 	msr	PSP, r0
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	4770      	bx	lr
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst2>:
 800a9c0:	20004668 	.word	0x20004668
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop

0800a9c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9c8:	4808      	ldr	r0, [pc, #32]	; (800a9ec <prvPortStartFirstTask+0x24>)
 800a9ca:	6800      	ldr	r0, [r0, #0]
 800a9cc:	6800      	ldr	r0, [r0, #0]
 800a9ce:	f380 8808 	msr	MSP, r0
 800a9d2:	f04f 0000 	mov.w	r0, #0
 800a9d6:	f380 8814 	msr	CONTROL, r0
 800a9da:	b662      	cpsie	i
 800a9dc:	b661      	cpsie	f
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	df00      	svc	0
 800a9e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9ea:	bf00      	nop
 800a9ec:	e000ed08 	.word	0xe000ed08

0800a9f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9f6:	4b46      	ldr	r3, [pc, #280]	; (800ab10 <xPortStartScheduler+0x120>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a46      	ldr	r2, [pc, #280]	; (800ab14 <xPortStartScheduler+0x124>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d10a      	bne.n	800aa16 <xPortStartScheduler+0x26>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	613b      	str	r3, [r7, #16]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa16:	4b3e      	ldr	r3, [pc, #248]	; (800ab10 <xPortStartScheduler+0x120>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a3f      	ldr	r2, [pc, #252]	; (800ab18 <xPortStartScheduler+0x128>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d10a      	bne.n	800aa36 <xPortStartScheduler+0x46>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60fb      	str	r3, [r7, #12]
}
 800aa32:	bf00      	nop
 800aa34:	e7fe      	b.n	800aa34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa36:	4b39      	ldr	r3, [pc, #228]	; (800ab1c <xPortStartScheduler+0x12c>)
 800aa38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	22ff      	movs	r2, #255	; 0xff
 800aa46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <xPortStartScheduler+0x130>)
 800aa5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa5e:	4b31      	ldr	r3, [pc, #196]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa64:	e009      	b.n	800aa7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa66:	4b2f      	ldr	r3, [pc, #188]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	4a2d      	ldr	r2, [pc, #180]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa7a:	78fb      	ldrb	r3, [r7, #3]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d0ef      	beq.n	800aa66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa86:	4b27      	ldr	r3, [pc, #156]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1c3 0307 	rsb	r3, r3, #7
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d00a      	beq.n	800aaa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60bb      	str	r3, [r7, #8]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaa8:	4b1e      	ldr	r3, [pc, #120]	; (800ab24 <xPortStartScheduler+0x134>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	021b      	lsls	r3, r3, #8
 800aaae:	4a1d      	ldr	r2, [pc, #116]	; (800ab24 <xPortStartScheduler+0x134>)
 800aab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aab2:	4b1c      	ldr	r3, [pc, #112]	; (800ab24 <xPortStartScheduler+0x134>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaba:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <xPortStartScheduler+0x134>)
 800aabc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aac6:	4b18      	ldr	r3, [pc, #96]	; (800ab28 <xPortStartScheduler+0x138>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a17      	ldr	r2, [pc, #92]	; (800ab28 <xPortStartScheduler+0x138>)
 800aacc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <xPortStartScheduler+0x138>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a14      	ldr	r2, [pc, #80]	; (800ab28 <xPortStartScheduler+0x138>)
 800aad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aadc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aade:	f000 f8dd 	bl	800ac9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <xPortStartScheduler+0x13c>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aae8:	f000 f8fc 	bl	800ace4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aaec:	4b10      	ldr	r3, [pc, #64]	; (800ab30 <xPortStartScheduler+0x140>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a0f      	ldr	r2, [pc, #60]	; (800ab30 <xPortStartScheduler+0x140>)
 800aaf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aaf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aaf8:	f7ff ff66 	bl	800a9c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aafc:	f000 fd36 	bl	800b56c <vTaskSwitchContext>
	prvTaskExitError();
 800ab00:	f7ff ff20 	bl	800a944 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	e000ed00 	.word	0xe000ed00
 800ab14:	410fc271 	.word	0x410fc271
 800ab18:	410fc270 	.word	0x410fc270
 800ab1c:	e000e400 	.word	0xe000e400
 800ab20:	20004660 	.word	0x20004660
 800ab24:	20004664 	.word	0x20004664
 800ab28:	e000ed20 	.word	0xe000ed20
 800ab2c:	2000011c 	.word	0x2000011c
 800ab30:	e000ef34 	.word	0xe000ef34

0800ab34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	607b      	str	r3, [r7, #4]
}
 800ab4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	4a0d      	ldr	r2, [pc, #52]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab58:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d10f      	bne.n	800ab80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab60:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <vPortEnterCritical+0x5c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	603b      	str	r3, [r7, #0]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <vPortEnterCritical+0x4a>
	}
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	2000011c 	.word	0x2000011c
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab9a:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <vPortExitCritical+0x50>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <vPortExitCritical+0x24>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	607b      	str	r3, [r7, #4]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abb8:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <vPortExitCritical+0x50>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	4a09      	ldr	r2, [pc, #36]	; (800abe4 <vPortExitCritical+0x50>)
 800abc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abc2:	4b08      	ldr	r3, [pc, #32]	; (800abe4 <vPortExitCritical+0x50>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d105      	bne.n	800abd6 <vPortExitCritical+0x42>
 800abca:	2300      	movs	r3, #0
 800abcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	2000011c 	.word	0x2000011c
	...

0800abf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abf0:	f3ef 8009 	mrs	r0, PSP
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <pxCurrentTCBConst>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	f01e 0f10 	tst.w	lr, #16
 800ac00:	bf08      	it	eq
 800ac02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0a:	6010      	str	r0, [r2, #0]
 800ac0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac14:	f380 8811 	msr	BASEPRI, r0
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f000 fca4 	bl	800b56c <vTaskSwitchContext>
 800ac24:	f04f 0000 	mov.w	r0, #0
 800ac28:	f380 8811 	msr	BASEPRI, r0
 800ac2c:	bc09      	pop	{r0, r3}
 800ac2e:	6819      	ldr	r1, [r3, #0]
 800ac30:	6808      	ldr	r0, [r1, #0]
 800ac32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac36:	f01e 0f10 	tst.w	lr, #16
 800ac3a:	bf08      	it	eq
 800ac3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac40:	f380 8809 	msr	PSP, r0
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	f3af 8000 	nop.w

0800ac50 <pxCurrentTCBConst>:
 800ac50:	20004668 	.word	0x20004668
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop

0800ac58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	607b      	str	r3, [r7, #4]
}
 800ac70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac72:	f000 fbc3 	bl	800b3fc <xTaskIncrementTick>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac7c:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <SysTick_Handler+0x40>)
 800ac7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	2300      	movs	r3, #0
 800ac86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	f383 8811 	msr	BASEPRI, r3
}
 800ac8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	e000ed04 	.word	0xe000ed04

0800ac9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aca0:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <vPortSetupTimerInterrupt+0x34>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aca6:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <vPortSetupTimerInterrupt+0x38>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acac:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <vPortSetupTimerInterrupt+0x3c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <vPortSetupTimerInterrupt+0x40>)
 800acb2:	fba2 2303 	umull	r2, r3, r2, r3
 800acb6:	099b      	lsrs	r3, r3, #6
 800acb8:	4a09      	ldr	r2, [pc, #36]	; (800ace0 <vPortSetupTimerInterrupt+0x44>)
 800acba:	3b01      	subs	r3, #1
 800acbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acbe:	4b04      	ldr	r3, [pc, #16]	; (800acd0 <vPortSetupTimerInterrupt+0x34>)
 800acc0:	2207      	movs	r2, #7
 800acc2:	601a      	str	r2, [r3, #0]
}
 800acc4:	bf00      	nop
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	e000e010 	.word	0xe000e010
 800acd4:	e000e018 	.word	0xe000e018
 800acd8:	2000008c 	.word	0x2000008c
 800acdc:	10624dd3 	.word	0x10624dd3
 800ace0:	e000e014 	.word	0xe000e014

0800ace4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ace4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acf4 <vPortEnableVFP+0x10>
 800ace8:	6801      	ldr	r1, [r0, #0]
 800acea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acee:	6001      	str	r1, [r0, #0]
 800acf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800acf2:	bf00      	nop
 800acf4:	e000ed88 	.word	0xe000ed88

0800acf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08e      	sub	sp, #56	; 0x38
 800acfc:	af04      	add	r7, sp, #16
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	623b      	str	r3, [r7, #32]
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xTaskCreateStatic+0x46>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	61fb      	str	r3, [r7, #28]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad3e:	23b4      	movs	r3, #180	; 0xb4
 800ad40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2bb4      	cmp	r3, #180	; 0xb4
 800ad46:	d00a      	beq.n	800ad5e <xTaskCreateStatic+0x66>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	61bb      	str	r3, [r7, #24]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d01e      	beq.n	800ada4 <xTaskCreateStatic+0xac>
 800ad66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01b      	beq.n	800ada4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	2202      	movs	r2, #2
 800ad7a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad7e:	2300      	movs	r3, #0
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	9302      	str	r3, [sp, #8]
 800ad86:	f107 0314 	add.w	r3, r7, #20
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f850 	bl	800ae3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad9e:	f000 f8eb 	bl	800af78 <prvAddNewTaskToReadyList>
 800ada2:	e001      	b.n	800ada8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ada8:	697b      	ldr	r3, [r7, #20]
	}
 800adaa:	4618      	mov	r0, r3
 800adac:	3728      	adds	r7, #40	; 0x28
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b08c      	sub	sp, #48	; 0x30
 800adb6:	af04      	add	r7, sp, #16
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	603b      	str	r3, [r7, #0]
 800adbe:	4613      	mov	r3, r2
 800adc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adc2:	88fb      	ldrh	r3, [r7, #6]
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff faea 	bl	800a3a0 <pvPortMalloc>
 800adcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00e      	beq.n	800adf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800add4:	20b4      	movs	r0, #180	; 0xb4
 800add6:	f7ff fae3 	bl	800a3a0 <pvPortMalloc>
 800adda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d003      	beq.n	800adea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	631a      	str	r2, [r3, #48]	; 0x30
 800ade8:	e005      	b.n	800adf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800adea:	6978      	ldr	r0, [r7, #20]
 800adec:	f7ff fba4 	bl	800a538 <vPortFree>
 800adf0:	e001      	b.n	800adf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d017      	beq.n	800ae2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae04:	88fa      	ldrh	r2, [r7, #6]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9303      	str	r3, [sp, #12]
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 f80e 	bl	800ae3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae20:	69f8      	ldr	r0, [r7, #28]
 800ae22:	f000 f8a9 	bl	800af78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae26:	2301      	movs	r3, #1
 800ae28:	61bb      	str	r3, [r7, #24]
 800ae2a:	e002      	b.n	800ae32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae32:	69bb      	ldr	r3, [r7, #24]
	}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae54:	3b01      	subs	r3, #1
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	f023 0307 	bic.w	r3, r3, #7
 800ae62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	617b      	str	r3, [r7, #20]
}
 800ae80:	bf00      	nop
 800ae82:	e7fe      	b.n	800ae82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d01f      	beq.n	800aeca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	61fb      	str	r3, [r7, #28]
 800ae8e:	e012      	b.n	800aeb6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	4413      	add	r3, r2
 800ae96:	7819      	ldrb	r1, [r3, #0]
 800ae98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	3334      	adds	r3, #52	; 0x34
 800aea0:	460a      	mov	r2, r1
 800aea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d006      	beq.n	800aebe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	2b0f      	cmp	r3, #15
 800aeba:	d9e9      	bls.n	800ae90 <prvInitialiseNewTask+0x54>
 800aebc:	e000      	b.n	800aec0 <prvInitialiseNewTask+0x84>
			{
				break;
 800aebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aec8:	e003      	b.n	800aed2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	2b06      	cmp	r3, #6
 800aed6:	d901      	bls.n	800aedc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aed8:	2306      	movs	r3, #6
 800aeda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	2200      	movs	r2, #0
 800aeec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	3304      	adds	r3, #4
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fc5e 	bl	800a7b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	3318      	adds	r3, #24
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7ff fc59 	bl	800a7b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	f1c3 0207 	rsb	r2, r3, #7
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	2200      	movs	r2, #0
 800af24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	334c      	adds	r3, #76	; 0x4c
 800af2c:	2260      	movs	r2, #96	; 0x60
 800af2e:	2100      	movs	r1, #0
 800af30:	4618      	mov	r0, r3
 800af32:	f003 fad2 	bl	800e4da <memset>
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	4a0c      	ldr	r2, [pc, #48]	; (800af6c <prvInitialiseNewTask+0x130>)
 800af3a:	651a      	str	r2, [r3, #80]	; 0x50
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	4a0c      	ldr	r2, [pc, #48]	; (800af70 <prvInitialiseNewTask+0x134>)
 800af40:	655a      	str	r2, [r3, #84]	; 0x54
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	4a0b      	ldr	r2, [pc, #44]	; (800af74 <prvInitialiseNewTask+0x138>)
 800af46:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	68f9      	ldr	r1, [r7, #12]
 800af4c:	69b8      	ldr	r0, [r7, #24]
 800af4e:	f7ff fcc5 	bl	800a8dc <pxPortInitialiseStack>
 800af52:	4602      	mov	r2, r0
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af64:	bf00      	nop
 800af66:	3720      	adds	r7, #32
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	08013c84 	.word	0x08013c84
 800af70:	08013ca4 	.word	0x08013ca4
 800af74:	08013c64 	.word	0x08013c64

0800af78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af80:	f7ff fdd8 	bl	800ab34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af84:	4b2a      	ldr	r3, [pc, #168]	; (800b030 <prvAddNewTaskToReadyList+0xb8>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3301      	adds	r3, #1
 800af8a:	4a29      	ldr	r2, [pc, #164]	; (800b030 <prvAddNewTaskToReadyList+0xb8>)
 800af8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af8e:	4b29      	ldr	r3, [pc, #164]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d109      	bne.n	800afaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af96:	4a27      	ldr	r2, [pc, #156]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af9c:	4b24      	ldr	r3, [pc, #144]	; (800b030 <prvAddNewTaskToReadyList+0xb8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d110      	bne.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afa4:	f000 fb5c 	bl	800b660 <prvInitialiseTaskLists>
 800afa8:	e00d      	b.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afaa:	4b23      	ldr	r3, [pc, #140]	; (800b038 <prvAddNewTaskToReadyList+0xc0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afb2:	4b20      	ldr	r3, [pc, #128]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d802      	bhi.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afc0:	4a1c      	ldr	r2, [pc, #112]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afc6:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <prvAddNewTaskToReadyList+0xc4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3301      	adds	r3, #1
 800afcc:	4a1b      	ldr	r2, [pc, #108]	; (800b03c <prvAddNewTaskToReadyList+0xc4>)
 800afce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	2201      	movs	r2, #1
 800afd6:	409a      	lsls	r2, r3
 800afd8:	4b19      	ldr	r3, [pc, #100]	; (800b040 <prvAddNewTaskToReadyList+0xc8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4313      	orrs	r3, r2
 800afde:	4a18      	ldr	r2, [pc, #96]	; (800b040 <prvAddNewTaskToReadyList+0xc8>)
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4a15      	ldr	r2, [pc, #84]	; (800b044 <prvAddNewTaskToReadyList+0xcc>)
 800aff0:	441a      	add	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	4610      	mov	r0, r2
 800affa:	f7ff fbe8 	bl	800a7ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800affe:	f7ff fdc9 	bl	800ab94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b002:	4b0d      	ldr	r3, [pc, #52]	; (800b038 <prvAddNewTaskToReadyList+0xc0>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00e      	beq.n	800b028 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b00a:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	429a      	cmp	r2, r3
 800b016:	d207      	bcs.n	800b028 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b018:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <prvAddNewTaskToReadyList+0xd0>)
 800b01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	20004768 	.word	0x20004768
 800b034:	20004668 	.word	0x20004668
 800b038:	20004774 	.word	0x20004774
 800b03c:	20004784 	.word	0x20004784
 800b040:	20004770 	.word	0x20004770
 800b044:	2000466c 	.word	0x2000466c
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b054:	f7ff fd6e 	bl	800ab34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d102      	bne.n	800b064 <vTaskDelete+0x18>
 800b05e:	4b39      	ldr	r3, [pc, #228]	; (800b144 <vTaskDelete+0xf8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	e000      	b.n	800b066 <vTaskDelete+0x1a>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3304      	adds	r3, #4
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fc0b 	bl	800a888 <uxListRemove>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d115      	bne.n	800b0a4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07c:	4932      	ldr	r1, [pc, #200]	; (800b148 <vTaskDelete+0xfc>)
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	440b      	add	r3, r1
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <vTaskDelete+0x58>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	2201      	movs	r2, #1
 800b094:	fa02 f303 	lsl.w	r3, r2, r3
 800b098:	43da      	mvns	r2, r3
 800b09a:	4b2c      	ldr	r3, [pc, #176]	; (800b14c <vTaskDelete+0x100>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4013      	ands	r3, r2
 800b0a0:	4a2a      	ldr	r2, [pc, #168]	; (800b14c <vTaskDelete+0x100>)
 800b0a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d004      	beq.n	800b0b6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	3318      	adds	r3, #24
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff fbe9 	bl	800a888 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b0b6:	4b26      	ldr	r3, [pc, #152]	; (800b150 <vTaskDelete+0x104>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	4a24      	ldr	r2, [pc, #144]	; (800b150 <vTaskDelete+0x104>)
 800b0be:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b0c0:	4b20      	ldr	r3, [pc, #128]	; (800b144 <vTaskDelete+0xf8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d10b      	bne.n	800b0e2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4820      	ldr	r0, [pc, #128]	; (800b154 <vTaskDelete+0x108>)
 800b0d2:	f7ff fb7c 	bl	800a7ce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b0d6:	4b20      	ldr	r3, [pc, #128]	; (800b158 <vTaskDelete+0x10c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	4a1e      	ldr	r2, [pc, #120]	; (800b158 <vTaskDelete+0x10c>)
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	e009      	b.n	800b0f6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b0e2:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <vTaskDelete+0x110>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	4a1c      	ldr	r2, [pc, #112]	; (800b15c <vTaskDelete+0x110>)
 800b0ea:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 fb25 	bl	800b73c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b0f2:	f000 fb57 	bl	800b7a4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b0f6:	f7ff fd4d 	bl	800ab94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b0fa:	4b19      	ldr	r3, [pc, #100]	; (800b160 <vTaskDelete+0x114>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01b      	beq.n	800b13a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b102:	4b10      	ldr	r3, [pc, #64]	; (800b144 <vTaskDelete+0xf8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d116      	bne.n	800b13a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b10c:	4b15      	ldr	r3, [pc, #84]	; (800b164 <vTaskDelete+0x118>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <vTaskDelete+0xde>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	60bb      	str	r3, [r7, #8]
}
 800b126:	bf00      	nop
 800b128:	e7fe      	b.n	800b128 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b12a:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <vTaskDelete+0x11c>)
 800b12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b13a:	bf00      	nop
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20004668 	.word	0x20004668
 800b148:	2000466c 	.word	0x2000466c
 800b14c:	20004770 	.word	0x20004770
 800b150:	20004784 	.word	0x20004784
 800b154:	2000473c 	.word	0x2000473c
 800b158:	20004750 	.word	0x20004750
 800b15c:	20004768 	.word	0x20004768
 800b160:	20004774 	.word	0x20004774
 800b164:	20004790 	.word	0x20004790
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d017      	beq.n	800b1ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b17e:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <vTaskDelay+0x60>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <vTaskDelay+0x30>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	60bb      	str	r3, [r7, #8]
}
 800b198:	bf00      	nop
 800b19a:	e7fe      	b.n	800b19a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b19c:	f000 f884 	bl	800b2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fb1e 	bl	800b7e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1a8:	f000 f88c 	bl	800b2c4 <xTaskResumeAll>
 800b1ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d107      	bne.n	800b1c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b1b4:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <vTaskDelay+0x64>)
 800b1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1c4:	bf00      	nop
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20004790 	.word	0x20004790
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08a      	sub	sp, #40	; 0x28
 800b1d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	1d39      	adds	r1, r7, #4
 800b1e6:	f107 0308 	add.w	r3, r7, #8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7f5 fe6e 	bl	8000ecc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	9202      	str	r2, [sp, #8]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	460a      	mov	r2, r1
 800b202:	4921      	ldr	r1, [pc, #132]	; (800b288 <vTaskStartScheduler+0xb4>)
 800b204:	4821      	ldr	r0, [pc, #132]	; (800b28c <vTaskStartScheduler+0xb8>)
 800b206:	f7ff fd77 	bl	800acf8 <xTaskCreateStatic>
 800b20a:	4603      	mov	r3, r0
 800b20c:	4a20      	ldr	r2, [pc, #128]	; (800b290 <vTaskStartScheduler+0xbc>)
 800b20e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b210:	4b1f      	ldr	r3, [pc, #124]	; (800b290 <vTaskStartScheduler+0xbc>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b218:	2301      	movs	r3, #1
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	e001      	b.n	800b222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d11b      	bne.n	800b260 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	613b      	str	r3, [r7, #16]
}
 800b23a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b23c:	4b15      	ldr	r3, [pc, #84]	; (800b294 <vTaskStartScheduler+0xc0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	334c      	adds	r3, #76	; 0x4c
 800b242:	4a15      	ldr	r2, [pc, #84]	; (800b298 <vTaskStartScheduler+0xc4>)
 800b244:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b246:	4b15      	ldr	r3, [pc, #84]	; (800b29c <vTaskStartScheduler+0xc8>)
 800b248:	f04f 32ff 	mov.w	r2, #4294967295
 800b24c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b24e:	4b14      	ldr	r3, [pc, #80]	; (800b2a0 <vTaskStartScheduler+0xcc>)
 800b250:	2201      	movs	r2, #1
 800b252:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b254:	4b13      	ldr	r3, [pc, #76]	; (800b2a4 <vTaskStartScheduler+0xd0>)
 800b256:	2200      	movs	r2, #0
 800b258:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b25a:	f7ff fbc9 	bl	800a9f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b25e:	e00e      	b.n	800b27e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b266:	d10a      	bne.n	800b27e <vTaskStartScheduler+0xaa>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	60fb      	str	r3, [r7, #12]
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <vTaskStartScheduler+0xa8>
}
 800b27e:	bf00      	nop
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	08011264 	.word	0x08011264
 800b28c:	0800b631 	.word	0x0800b631
 800b290:	2000478c 	.word	0x2000478c
 800b294:	20004668 	.word	0x20004668
 800b298:	20000210 	.word	0x20000210
 800b29c:	20004788 	.word	0x20004788
 800b2a0:	20004774 	.word	0x20004774
 800b2a4:	2000476c 	.word	0x2000476c

0800b2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <vTaskSuspendAll+0x18>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	4a03      	ldr	r2, [pc, #12]	; (800b2c0 <vTaskSuspendAll+0x18>)
 800b2b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2b6:	bf00      	nop
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20004790 	.word	0x20004790

0800b2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2d2:	4b41      	ldr	r3, [pc, #260]	; (800b3d8 <xTaskResumeAll+0x114>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10a      	bne.n	800b2f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	603b      	str	r3, [r7, #0]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2f0:	f7ff fc20 	bl	800ab34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2f4:	4b38      	ldr	r3, [pc, #224]	; (800b3d8 <xTaskResumeAll+0x114>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	4a37      	ldr	r2, [pc, #220]	; (800b3d8 <xTaskResumeAll+0x114>)
 800b2fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2fe:	4b36      	ldr	r3, [pc, #216]	; (800b3d8 <xTaskResumeAll+0x114>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d161      	bne.n	800b3ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b306:	4b35      	ldr	r3, [pc, #212]	; (800b3dc <xTaskResumeAll+0x118>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d05d      	beq.n	800b3ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b30e:	e02e      	b.n	800b36e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b310:	4b33      	ldr	r3, [pc, #204]	; (800b3e0 <xTaskResumeAll+0x11c>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3318      	adds	r3, #24
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fab3 	bl	800a888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3304      	adds	r3, #4
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff faae 	bl	800a888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	2201      	movs	r2, #1
 800b332:	409a      	lsls	r2, r3
 800b334:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <xTaskResumeAll+0x120>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4313      	orrs	r3, r2
 800b33a:	4a2a      	ldr	r2, [pc, #168]	; (800b3e4 <xTaskResumeAll+0x120>)
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4a27      	ldr	r2, [pc, #156]	; (800b3e8 <xTaskResumeAll+0x124>)
 800b34c:	441a      	add	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3304      	adds	r3, #4
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	f7ff fa3a 	bl	800a7ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35e:	4b23      	ldr	r3, [pc, #140]	; (800b3ec <xTaskResumeAll+0x128>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b364:	429a      	cmp	r2, r3
 800b366:	d302      	bcc.n	800b36e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b368:	4b21      	ldr	r3, [pc, #132]	; (800b3f0 <xTaskResumeAll+0x12c>)
 800b36a:	2201      	movs	r2, #1
 800b36c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b36e:	4b1c      	ldr	r3, [pc, #112]	; (800b3e0 <xTaskResumeAll+0x11c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1cc      	bne.n	800b310 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b37c:	f000 fa12 	bl	800b7a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b380:	4b1c      	ldr	r3, [pc, #112]	; (800b3f4 <xTaskResumeAll+0x130>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d010      	beq.n	800b3ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b38c:	f000 f836 	bl	800b3fc <xTaskIncrementTick>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b396:	4b16      	ldr	r3, [pc, #88]	; (800b3f0 <xTaskResumeAll+0x12c>)
 800b398:	2201      	movs	r2, #1
 800b39a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f1      	bne.n	800b38c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b3a8:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <xTaskResumeAll+0x130>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3ae:	4b10      	ldr	r3, [pc, #64]	; (800b3f0 <xTaskResumeAll+0x12c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3ba:	4b0f      	ldr	r3, [pc, #60]	; (800b3f8 <xTaskResumeAll+0x134>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3ca:	f7ff fbe3 	bl	800ab94 <vPortExitCritical>

	return xAlreadyYielded;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20004790 	.word	0x20004790
 800b3dc:	20004768 	.word	0x20004768
 800b3e0:	20004728 	.word	0x20004728
 800b3e4:	20004770 	.word	0x20004770
 800b3e8:	2000466c 	.word	0x2000466c
 800b3ec:	20004668 	.word	0x20004668
 800b3f0:	2000477c 	.word	0x2000477c
 800b3f4:	20004778 	.word	0x20004778
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b406:	4b4e      	ldr	r3, [pc, #312]	; (800b540 <xTaskIncrementTick+0x144>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f040 808e 	bne.w	800b52c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b410:	4b4c      	ldr	r3, [pc, #304]	; (800b544 <xTaskIncrementTick+0x148>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b418:	4a4a      	ldr	r2, [pc, #296]	; (800b544 <xTaskIncrementTick+0x148>)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d120      	bne.n	800b466 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b424:	4b48      	ldr	r3, [pc, #288]	; (800b548 <xTaskIncrementTick+0x14c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <xTaskIncrementTick+0x48>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	603b      	str	r3, [r7, #0]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <xTaskIncrementTick+0x46>
 800b444:	4b40      	ldr	r3, [pc, #256]	; (800b548 <xTaskIncrementTick+0x14c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	4b40      	ldr	r3, [pc, #256]	; (800b54c <xTaskIncrementTick+0x150>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a3e      	ldr	r2, [pc, #248]	; (800b548 <xTaskIncrementTick+0x14c>)
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	4a3e      	ldr	r2, [pc, #248]	; (800b54c <xTaskIncrementTick+0x150>)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6013      	str	r3, [r2, #0]
 800b458:	4b3d      	ldr	r3, [pc, #244]	; (800b550 <xTaskIncrementTick+0x154>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3301      	adds	r3, #1
 800b45e:	4a3c      	ldr	r2, [pc, #240]	; (800b550 <xTaskIncrementTick+0x154>)
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	f000 f99f 	bl	800b7a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b466:	4b3b      	ldr	r3, [pc, #236]	; (800b554 <xTaskIncrementTick+0x158>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d348      	bcc.n	800b502 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b470:	4b35      	ldr	r3, [pc, #212]	; (800b548 <xTaskIncrementTick+0x14c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d104      	bne.n	800b484 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b47a:	4b36      	ldr	r3, [pc, #216]	; (800b554 <xTaskIncrementTick+0x158>)
 800b47c:	f04f 32ff 	mov.w	r2, #4294967295
 800b480:	601a      	str	r2, [r3, #0]
					break;
 800b482:	e03e      	b.n	800b502 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b484:	4b30      	ldr	r3, [pc, #192]	; (800b548 <xTaskIncrementTick+0x14c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d203      	bcs.n	800b4a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b49c:	4a2d      	ldr	r2, [pc, #180]	; (800b554 <xTaskIncrementTick+0x158>)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4a2:	e02e      	b.n	800b502 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7ff f9ed 	bl	800a888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d004      	beq.n	800b4c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	3318      	adds	r3, #24
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff f9e4 	bl	800a888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	409a      	lsls	r2, r3
 800b4c8:	4b23      	ldr	r3, [pc, #140]	; (800b558 <xTaskIncrementTick+0x15c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	4a22      	ldr	r2, [pc, #136]	; (800b558 <xTaskIncrementTick+0x15c>)
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4a1f      	ldr	r2, [pc, #124]	; (800b55c <xTaskIncrementTick+0x160>)
 800b4e0:	441a      	add	r2, r3
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	f7ff f970 	bl	800a7ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f2:	4b1b      	ldr	r3, [pc, #108]	; (800b560 <xTaskIncrementTick+0x164>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d3b9      	bcc.n	800b470 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b500:	e7b6      	b.n	800b470 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b502:	4b17      	ldr	r3, [pc, #92]	; (800b560 <xTaskIncrementTick+0x164>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b508:	4914      	ldr	r1, [pc, #80]	; (800b55c <xTaskIncrementTick+0x160>)
 800b50a:	4613      	mov	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	440b      	add	r3, r1
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d901      	bls.n	800b51e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b51a:	2301      	movs	r3, #1
 800b51c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b51e:	4b11      	ldr	r3, [pc, #68]	; (800b564 <xTaskIncrementTick+0x168>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d007      	beq.n	800b536 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b526:	2301      	movs	r3, #1
 800b528:	617b      	str	r3, [r7, #20]
 800b52a:	e004      	b.n	800b536 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b52c:	4b0e      	ldr	r3, [pc, #56]	; (800b568 <xTaskIncrementTick+0x16c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	4a0d      	ldr	r2, [pc, #52]	; (800b568 <xTaskIncrementTick+0x16c>)
 800b534:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b536:	697b      	ldr	r3, [r7, #20]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	20004790 	.word	0x20004790
 800b544:	2000476c 	.word	0x2000476c
 800b548:	20004720 	.word	0x20004720
 800b54c:	20004724 	.word	0x20004724
 800b550:	20004780 	.word	0x20004780
 800b554:	20004788 	.word	0x20004788
 800b558:	20004770 	.word	0x20004770
 800b55c:	2000466c 	.word	0x2000466c
 800b560:	20004668 	.word	0x20004668
 800b564:	2000477c 	.word	0x2000477c
 800b568:	20004778 	.word	0x20004778

0800b56c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b572:	4b29      	ldr	r3, [pc, #164]	; (800b618 <vTaskSwitchContext+0xac>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b57a:	4b28      	ldr	r3, [pc, #160]	; (800b61c <vTaskSwitchContext+0xb0>)
 800b57c:	2201      	movs	r2, #1
 800b57e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b580:	e044      	b.n	800b60c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b582:	4b26      	ldr	r3, [pc, #152]	; (800b61c <vTaskSwitchContext+0xb0>)
 800b584:	2200      	movs	r2, #0
 800b586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b588:	4b25      	ldr	r3, [pc, #148]	; (800b620 <vTaskSwitchContext+0xb4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	fab3 f383 	clz	r3, r3
 800b594:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b596:	7afb      	ldrb	r3, [r7, #11]
 800b598:	f1c3 031f 	rsb	r3, r3, #31
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	4921      	ldr	r1, [pc, #132]	; (800b624 <vTaskSwitchContext+0xb8>)
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	440b      	add	r3, r1
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10a      	bne.n	800b5c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	607b      	str	r3, [r7, #4]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <vTaskSwitchContext+0x5a>
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4a14      	ldr	r2, [pc, #80]	; (800b624 <vTaskSwitchContext+0xb8>)
 800b5d4:	4413      	add	r3, r2
 800b5d6:	613b      	str	r3, [r7, #16]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	605a      	str	r2, [r3, #4]
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d104      	bne.n	800b5f8 <vTaskSwitchContext+0x8c>
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	605a      	str	r2, [r3, #4]
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	4a0a      	ldr	r2, [pc, #40]	; (800b628 <vTaskSwitchContext+0xbc>)
 800b600:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b602:	4b09      	ldr	r3, [pc, #36]	; (800b628 <vTaskSwitchContext+0xbc>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	334c      	adds	r3, #76	; 0x4c
 800b608:	4a08      	ldr	r2, [pc, #32]	; (800b62c <vTaskSwitchContext+0xc0>)
 800b60a:	6013      	str	r3, [r2, #0]
}
 800b60c:	bf00      	nop
 800b60e:	371c      	adds	r7, #28
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20004790 	.word	0x20004790
 800b61c:	2000477c 	.word	0x2000477c
 800b620:	20004770 	.word	0x20004770
 800b624:	2000466c 	.word	0x2000466c
 800b628:	20004668 	.word	0x20004668
 800b62c:	20000210 	.word	0x20000210

0800b630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b638:	f000 f852 	bl	800b6e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <prvIdleTask+0x28>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d9f9      	bls.n	800b638 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <prvIdleTask+0x2c>)
 800b646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b654:	e7f0      	b.n	800b638 <prvIdleTask+0x8>
 800b656:	bf00      	nop
 800b658:	2000466c 	.word	0x2000466c
 800b65c:	e000ed04 	.word	0xe000ed04

0800b660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b666:	2300      	movs	r3, #0
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	e00c      	b.n	800b686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4a12      	ldr	r2, [pc, #72]	; (800b6c0 <prvInitialiseTaskLists+0x60>)
 800b678:	4413      	add	r3, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff f87a 	bl	800a774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3301      	adds	r3, #1
 800b684:	607b      	str	r3, [r7, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b06      	cmp	r3, #6
 800b68a:	d9ef      	bls.n	800b66c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b68c:	480d      	ldr	r0, [pc, #52]	; (800b6c4 <prvInitialiseTaskLists+0x64>)
 800b68e:	f7ff f871 	bl	800a774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b692:	480d      	ldr	r0, [pc, #52]	; (800b6c8 <prvInitialiseTaskLists+0x68>)
 800b694:	f7ff f86e 	bl	800a774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b698:	480c      	ldr	r0, [pc, #48]	; (800b6cc <prvInitialiseTaskLists+0x6c>)
 800b69a:	f7ff f86b 	bl	800a774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b69e:	480c      	ldr	r0, [pc, #48]	; (800b6d0 <prvInitialiseTaskLists+0x70>)
 800b6a0:	f7ff f868 	bl	800a774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6a4:	480b      	ldr	r0, [pc, #44]	; (800b6d4 <prvInitialiseTaskLists+0x74>)
 800b6a6:	f7ff f865 	bl	800a774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6aa:	4b0b      	ldr	r3, [pc, #44]	; (800b6d8 <prvInitialiseTaskLists+0x78>)
 800b6ac:	4a05      	ldr	r2, [pc, #20]	; (800b6c4 <prvInitialiseTaskLists+0x64>)
 800b6ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6b0:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <prvInitialiseTaskLists+0x7c>)
 800b6b2:	4a05      	ldr	r2, [pc, #20]	; (800b6c8 <prvInitialiseTaskLists+0x68>)
 800b6b4:	601a      	str	r2, [r3, #0]
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	2000466c 	.word	0x2000466c
 800b6c4:	200046f8 	.word	0x200046f8
 800b6c8:	2000470c 	.word	0x2000470c
 800b6cc:	20004728 	.word	0x20004728
 800b6d0:	2000473c 	.word	0x2000473c
 800b6d4:	20004754 	.word	0x20004754
 800b6d8:	20004720 	.word	0x20004720
 800b6dc:	20004724 	.word	0x20004724

0800b6e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6e6:	e019      	b.n	800b71c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6e8:	f7ff fa24 	bl	800ab34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ec:	4b10      	ldr	r3, [pc, #64]	; (800b730 <prvCheckTasksWaitingTermination+0x50>)
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff f8c5 	bl	800a888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6fe:	4b0d      	ldr	r3, [pc, #52]	; (800b734 <prvCheckTasksWaitingTermination+0x54>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3b01      	subs	r3, #1
 800b704:	4a0b      	ldr	r2, [pc, #44]	; (800b734 <prvCheckTasksWaitingTermination+0x54>)
 800b706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b708:	4b0b      	ldr	r3, [pc, #44]	; (800b738 <prvCheckTasksWaitingTermination+0x58>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3b01      	subs	r3, #1
 800b70e:	4a0a      	ldr	r2, [pc, #40]	; (800b738 <prvCheckTasksWaitingTermination+0x58>)
 800b710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b712:	f7ff fa3f 	bl	800ab94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f810 	bl	800b73c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b71c:	4b06      	ldr	r3, [pc, #24]	; (800b738 <prvCheckTasksWaitingTermination+0x58>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e1      	bne.n	800b6e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	2000473c 	.word	0x2000473c
 800b734:	20004768 	.word	0x20004768
 800b738:	20004750 	.word	0x20004750

0800b73c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	334c      	adds	r3, #76	; 0x4c
 800b748:	4618      	mov	r0, r3
 800b74a:	f003 fbdb 	bl	800ef04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b754:	2b00      	cmp	r3, #0
 800b756:	d108      	bne.n	800b76a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe feeb 	bl	800a538 <vPortFree>
				vPortFree( pxTCB );
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7fe fee8 	bl	800a538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b768:	e018      	b.n	800b79c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b770:	2b01      	cmp	r3, #1
 800b772:	d103      	bne.n	800b77c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7fe fedf 	bl	800a538 <vPortFree>
	}
 800b77a:	e00f      	b.n	800b79c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b782:	2b02      	cmp	r3, #2
 800b784:	d00a      	beq.n	800b79c <prvDeleteTCB+0x60>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60fb      	str	r3, [r7, #12]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <prvDeleteTCB+0x5e>
	}
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7aa:	4b0c      	ldr	r3, [pc, #48]	; (800b7dc <prvResetNextTaskUnblockTime+0x38>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d104      	bne.n	800b7be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7b4:	4b0a      	ldr	r3, [pc, #40]	; (800b7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7bc:	e008      	b.n	800b7d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7be:	4b07      	ldr	r3, [pc, #28]	; (800b7dc <prvResetNextTaskUnblockTime+0x38>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	4a04      	ldr	r2, [pc, #16]	; (800b7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ce:	6013      	str	r3, [r2, #0]
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	20004720 	.word	0x20004720
 800b7e0:	20004788 	.word	0x20004788

0800b7e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7ee:	4b29      	ldr	r3, [pc, #164]	; (800b894 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7f4:	4b28      	ldr	r3, [pc, #160]	; (800b898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff f844 	bl	800a888 <uxListRemove>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10b      	bne.n	800b81e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b806:	4b24      	ldr	r3, [pc, #144]	; (800b898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	2201      	movs	r2, #1
 800b80e:	fa02 f303 	lsl.w	r3, r2, r3
 800b812:	43da      	mvns	r2, r3
 800b814:	4b21      	ldr	r3, [pc, #132]	; (800b89c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4013      	ands	r3, r2
 800b81a:	4a20      	ldr	r2, [pc, #128]	; (800b89c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b81c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b824:	d10a      	bne.n	800b83c <prvAddCurrentTaskToDelayedList+0x58>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b82c:	4b1a      	ldr	r3, [pc, #104]	; (800b898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	481a      	ldr	r0, [pc, #104]	; (800b8a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b836:	f7fe ffca 	bl	800a7ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b83a:	e026      	b.n	800b88a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4413      	add	r3, r2
 800b842:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b844:	4b14      	ldr	r3, [pc, #80]	; (800b898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	429a      	cmp	r2, r3
 800b852:	d209      	bcs.n	800b868 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b854:	4b13      	ldr	r3, [pc, #76]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	4b0f      	ldr	r3, [pc, #60]	; (800b898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3304      	adds	r3, #4
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7fe ffd8 	bl	800a816 <vListInsert>
}
 800b866:	e010      	b.n	800b88a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b868:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	4b0a      	ldr	r3, [pc, #40]	; (800b898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3304      	adds	r3, #4
 800b872:	4619      	mov	r1, r3
 800b874:	4610      	mov	r0, r2
 800b876:	f7fe ffce 	bl	800a816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b87a:	4b0c      	ldr	r3, [pc, #48]	; (800b8ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	429a      	cmp	r2, r3
 800b882:	d202      	bcs.n	800b88a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b884:	4a09      	ldr	r2, [pc, #36]	; (800b8ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6013      	str	r3, [r2, #0]
}
 800b88a:	bf00      	nop
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	2000476c 	.word	0x2000476c
 800b898:	20004668 	.word	0x20004668
 800b89c:	20004770 	.word	0x20004770
 800b8a0:	20004754 	.word	0x20004754
 800b8a4:	20004724 	.word	0x20004724
 800b8a8:	20004720 	.word	0x20004720
 800b8ac:	20004788 	.word	0x20004788

0800b8b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b8bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b8c0:	f002 fc96 	bl	800e1f0 <USBD_static_malloc>
 800b8c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d109      	bne.n	800b8e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	32b0      	adds	r2, #176	; 0xb0
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	e0d4      	b.n	800ba8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b8e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f002 fdf7 	bl	800e4da <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	32b0      	adds	r2, #176	; 0xb0
 800b8f6:	68f9      	ldr	r1, [r7, #12]
 800b8f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	32b0      	adds	r2, #176	; 0xb0
 800b906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	7c1b      	ldrb	r3, [r3, #16]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d138      	bne.n	800b98a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b918:	4b5e      	ldr	r3, [pc, #376]	; (800ba94 <USBD_CDC_Init+0x1e4>)
 800b91a:	7819      	ldrb	r1, [r3, #0]
 800b91c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b920:	2202      	movs	r2, #2
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f002 fb41 	bl	800dfaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b928:	4b5a      	ldr	r3, [pc, #360]	; (800ba94 <USBD_CDC_Init+0x1e4>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	f003 020f 	and.w	r2, r3, #15
 800b930:	6879      	ldr	r1, [r7, #4]
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	3324      	adds	r3, #36	; 0x24
 800b93e:	2201      	movs	r2, #1
 800b940:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b942:	4b55      	ldr	r3, [pc, #340]	; (800ba98 <USBD_CDC_Init+0x1e8>)
 800b944:	7819      	ldrb	r1, [r3, #0]
 800b946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b94a:	2202      	movs	r2, #2
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f002 fb2c 	bl	800dfaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b952:	4b51      	ldr	r3, [pc, #324]	; (800ba98 <USBD_CDC_Init+0x1e8>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	f003 020f 	and.w	r2, r3, #15
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	4613      	mov	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	440b      	add	r3, r1
 800b966:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b96a:	2201      	movs	r2, #1
 800b96c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b96e:	4b4b      	ldr	r3, [pc, #300]	; (800ba9c <USBD_CDC_Init+0x1ec>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	f003 020f 	and.w	r2, r3, #15
 800b976:	6879      	ldr	r1, [r7, #4]
 800b978:	4613      	mov	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	440b      	add	r3, r1
 800b982:	3326      	adds	r3, #38	; 0x26
 800b984:	2210      	movs	r2, #16
 800b986:	801a      	strh	r2, [r3, #0]
 800b988:	e035      	b.n	800b9f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b98a:	4b42      	ldr	r3, [pc, #264]	; (800ba94 <USBD_CDC_Init+0x1e4>)
 800b98c:	7819      	ldrb	r1, [r3, #0]
 800b98e:	2340      	movs	r3, #64	; 0x40
 800b990:	2202      	movs	r2, #2
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f002 fb09 	bl	800dfaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b998:	4b3e      	ldr	r3, [pc, #248]	; (800ba94 <USBD_CDC_Init+0x1e4>)
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	f003 020f 	and.w	r2, r3, #15
 800b9a0:	6879      	ldr	r1, [r7, #4]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	440b      	add	r3, r1
 800b9ac:	3324      	adds	r3, #36	; 0x24
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b9b2:	4b39      	ldr	r3, [pc, #228]	; (800ba98 <USBD_CDC_Init+0x1e8>)
 800b9b4:	7819      	ldrb	r1, [r3, #0]
 800b9b6:	2340      	movs	r3, #64	; 0x40
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f002 faf5 	bl	800dfaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b9c0:	4b35      	ldr	r3, [pc, #212]	; (800ba98 <USBD_CDC_Init+0x1e8>)
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	f003 020f 	and.w	r2, r3, #15
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9d8:	2201      	movs	r2, #1
 800b9da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b9dc:	4b2f      	ldr	r3, [pc, #188]	; (800ba9c <USBD_CDC_Init+0x1ec>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	f003 020f 	and.w	r2, r3, #15
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	3326      	adds	r3, #38	; 0x26
 800b9f2:	2210      	movs	r2, #16
 800b9f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b9f6:	4b29      	ldr	r3, [pc, #164]	; (800ba9c <USBD_CDC_Init+0x1ec>)
 800b9f8:	7819      	ldrb	r1, [r3, #0]
 800b9fa:	2308      	movs	r3, #8
 800b9fc:	2203      	movs	r2, #3
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f002 fad3 	bl	800dfaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ba04:	4b25      	ldr	r3, [pc, #148]	; (800ba9c <USBD_CDC_Init+0x1ec>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	f003 020f 	and.w	r2, r3, #15
 800ba0c:	6879      	ldr	r1, [r7, #4]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	440b      	add	r3, r1
 800ba18:	3324      	adds	r3, #36	; 0x24
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	33b0      	adds	r3, #176	; 0xb0
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ba54:	2302      	movs	r3, #2
 800ba56:	e018      	b.n	800ba8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	7c1b      	ldrb	r3, [r3, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba60:	4b0d      	ldr	r3, [pc, #52]	; (800ba98 <USBD_CDC_Init+0x1e8>)
 800ba62:	7819      	ldrb	r1, [r3, #0]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f002 fb8a 	bl	800e188 <USBD_LL_PrepareReceive>
 800ba74:	e008      	b.n	800ba88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <USBD_CDC_Init+0x1e8>)
 800ba78:	7819      	ldrb	r1, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba80:	2340      	movs	r3, #64	; 0x40
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f002 fb80 	bl	800e188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	200001a7 	.word	0x200001a7
 800ba98:	200001a8 	.word	0x200001a8
 800ba9c:	200001a9 	.word	0x200001a9

0800baa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	460b      	mov	r3, r1
 800baaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800baac:	4b3a      	ldr	r3, [pc, #232]	; (800bb98 <USBD_CDC_DeInit+0xf8>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f002 fa9f 	bl	800dff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bab8:	4b37      	ldr	r3, [pc, #220]	; (800bb98 <USBD_CDC_DeInit+0xf8>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	f003 020f 	and.w	r2, r3, #15
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	440b      	add	r3, r1
 800bacc:	3324      	adds	r3, #36	; 0x24
 800bace:	2200      	movs	r2, #0
 800bad0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bad2:	4b32      	ldr	r3, [pc, #200]	; (800bb9c <USBD_CDC_DeInit+0xfc>)
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f002 fa8c 	bl	800dff6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bade:	4b2f      	ldr	r3, [pc, #188]	; (800bb9c <USBD_CDC_DeInit+0xfc>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f003 020f 	and.w	r2, r3, #15
 800bae6:	6879      	ldr	r1, [r7, #4]
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	440b      	add	r3, r1
 800baf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800baf6:	2200      	movs	r2, #0
 800baf8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bafa:	4b29      	ldr	r3, [pc, #164]	; (800bba0 <USBD_CDC_DeInit+0x100>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f002 fa78 	bl	800dff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bb06:	4b26      	ldr	r3, [pc, #152]	; (800bba0 <USBD_CDC_DeInit+0x100>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	f003 020f 	and.w	r2, r3, #15
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	4613      	mov	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	440b      	add	r3, r1
 800bb1a:	3324      	adds	r3, #36	; 0x24
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bb20:	4b1f      	ldr	r3, [pc, #124]	; (800bba0 <USBD_CDC_DeInit+0x100>)
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	f003 020f 	and.w	r2, r3, #15
 800bb28:	6879      	ldr	r1, [r7, #4]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	440b      	add	r3, r1
 800bb34:	3326      	adds	r3, #38	; 0x26
 800bb36:	2200      	movs	r2, #0
 800bb38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	32b0      	adds	r2, #176	; 0xb0
 800bb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01f      	beq.n	800bb8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	33b0      	adds	r3, #176	; 0xb0
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	32b0      	adds	r2, #176	; 0xb0
 800bb6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f002 fb4c 	bl	800e20c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	32b0      	adds	r2, #176	; 0xb0
 800bb7e:	2100      	movs	r1, #0
 800bb80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	200001a7 	.word	0x200001a7
 800bb9c:	200001a8 	.word	0x200001a8
 800bba0:	200001a9 	.word	0x200001a9

0800bba4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	32b0      	adds	r2, #176	; 0xb0
 800bbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	e0bf      	b.n	800bd54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d050      	beq.n	800bc82 <USBD_CDC_Setup+0xde>
 800bbe0:	2b20      	cmp	r3, #32
 800bbe2:	f040 80af 	bne.w	800bd44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	88db      	ldrh	r3, [r3, #6]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d03a      	beq.n	800bc64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	da1b      	bge.n	800bc30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	33b0      	adds	r3, #176	; 0xb0
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bc0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	88d2      	ldrh	r2, [r2, #6]
 800bc14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	88db      	ldrh	r3, [r3, #6]
 800bc1a:	2b07      	cmp	r3, #7
 800bc1c:	bf28      	it	cs
 800bc1e:	2307      	movcs	r3, #7
 800bc20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	89fa      	ldrh	r2, [r7, #14]
 800bc26:	4619      	mov	r1, r3
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f001 fd89 	bl	800d740 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bc2e:	e090      	b.n	800bd52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	785a      	ldrb	r2, [r3, #1]
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	88db      	ldrh	r3, [r3, #6]
 800bc3e:	2b3f      	cmp	r3, #63	; 0x3f
 800bc40:	d803      	bhi.n	800bc4a <USBD_CDC_Setup+0xa6>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	88db      	ldrh	r3, [r3, #6]
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	e000      	b.n	800bc4c <USBD_CDC_Setup+0xa8>
 800bc4a:	2240      	movs	r2, #64	; 0x40
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bc52:	6939      	ldr	r1, [r7, #16]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 fd9b 	bl	800d798 <USBD_CtlPrepareRx>
      break;
 800bc62:	e076      	b.n	800bd52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	33b0      	adds	r3, #176	; 0xb0
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	7850      	ldrb	r0, [r2, #1]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	4798      	blx	r3
      break;
 800bc80:	e067      	b.n	800bd52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	785b      	ldrb	r3, [r3, #1]
 800bc86:	2b0b      	cmp	r3, #11
 800bc88:	d851      	bhi.n	800bd2e <USBD_CDC_Setup+0x18a>
 800bc8a:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <USBD_CDC_Setup+0xec>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bcc1 	.word	0x0800bcc1
 800bc94:	0800bd3d 	.word	0x0800bd3d
 800bc98:	0800bd2f 	.word	0x0800bd2f
 800bc9c:	0800bd2f 	.word	0x0800bd2f
 800bca0:	0800bd2f 	.word	0x0800bd2f
 800bca4:	0800bd2f 	.word	0x0800bd2f
 800bca8:	0800bd2f 	.word	0x0800bd2f
 800bcac:	0800bd2f 	.word	0x0800bd2f
 800bcb0:	0800bd2f 	.word	0x0800bd2f
 800bcb4:	0800bd2f 	.word	0x0800bd2f
 800bcb8:	0800bceb 	.word	0x0800bceb
 800bcbc:	0800bd15 	.word	0x0800bd15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d107      	bne.n	800bcdc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bccc:	f107 030a 	add.w	r3, r7, #10
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 fd33 	bl	800d740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcda:	e032      	b.n	800bd42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f001 fcbd 	bl	800d65e <USBD_CtlError>
            ret = USBD_FAIL;
 800bce4:	2303      	movs	r3, #3
 800bce6:	75fb      	strb	r3, [r7, #23]
          break;
 800bce8:	e02b      	b.n	800bd42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d107      	bne.n	800bd06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bcf6:	f107 030d 	add.w	r3, r7, #13
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f001 fd1e 	bl	800d740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd04:	e01d      	b.n	800bd42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f001 fca8 	bl	800d65e <USBD_CtlError>
            ret = USBD_FAIL;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	75fb      	strb	r3, [r7, #23]
          break;
 800bd12:	e016      	b.n	800bd42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d00f      	beq.n	800bd40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f001 fc9b 	bl	800d65e <USBD_CtlError>
            ret = USBD_FAIL;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bd2c:	e008      	b.n	800bd40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f001 fc94 	bl	800d65e <USBD_CtlError>
          ret = USBD_FAIL;
 800bd36:	2303      	movs	r3, #3
 800bd38:	75fb      	strb	r3, [r7, #23]
          break;
 800bd3a:	e002      	b.n	800bd42 <USBD_CDC_Setup+0x19e>
          break;
 800bd3c:	bf00      	nop
 800bd3e:	e008      	b.n	800bd52 <USBD_CDC_Setup+0x1ae>
          break;
 800bd40:	bf00      	nop
      }
      break;
 800bd42:	e006      	b.n	800bd52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f001 fc89 	bl	800d65e <USBD_CtlError>
      ret = USBD_FAIL;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd50:	bf00      	nop
  }

  return (uint8_t)ret;
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	32b0      	adds	r2, #176	; 0xb0
 800bd7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e065      	b.n	800be52 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	32b0      	adds	r2, #176	; 0xb0
 800bd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd96:	78fb      	ldrb	r3, [r7, #3]
 800bd98:	f003 020f 	and.w	r2, r3, #15
 800bd9c:	6879      	ldr	r1, [r7, #4]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	440b      	add	r3, r1
 800bda8:	3318      	adds	r3, #24
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d02f      	beq.n	800be10 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	f003 020f 	and.w	r2, r3, #15
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	440b      	add	r3, r1
 800bdc2:	3318      	adds	r3, #24
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	78fb      	ldrb	r3, [r7, #3]
 800bdc8:	f003 010f 	and.w	r1, r3, #15
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	460b      	mov	r3, r1
 800bdd0:	00db      	lsls	r3, r3, #3
 800bdd2:	440b      	add	r3, r1
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4403      	add	r3, r0
 800bdd8:	3348      	adds	r3, #72	; 0x48
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bde0:	fb01 f303 	mul.w	r3, r1, r3
 800bde4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d112      	bne.n	800be10 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bdea:	78fb      	ldrb	r3, [r7, #3]
 800bdec:	f003 020f 	and.w	r2, r3, #15
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	440b      	add	r3, r1
 800bdfc:	3318      	adds	r3, #24
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800be02:	78f9      	ldrb	r1, [r7, #3]
 800be04:	2300      	movs	r3, #0
 800be06:	2200      	movs	r2, #0
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f002 f99c 	bl	800e146 <USBD_LL_Transmit>
 800be0e:	e01f      	b.n	800be50 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	2200      	movs	r2, #0
 800be14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	33b0      	adds	r3, #176	; 0xb0
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d010      	beq.n	800be50 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	33b0      	adds	r3, #176	; 0xb0
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800be4c:	78fa      	ldrb	r2, [r7, #3]
 800be4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	32b0      	adds	r2, #176	; 0xb0
 800be70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	32b0      	adds	r2, #176	; 0xb0
 800be80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800be88:	2303      	movs	r3, #3
 800be8a:	e01a      	b.n	800bec2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f002 f99a 	bl	800e1ca <USBD_LL_GetRxDataSize>
 800be96:	4602      	mov	r2, r0
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	33b0      	adds	r3, #176	; 0xb0
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bebc:	4611      	mov	r1, r2
 800bebe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	32b0      	adds	r2, #176	; 0xb0
 800bedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bee8:	2303      	movs	r3, #3
 800beea:	e025      	b.n	800bf38 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	33b0      	adds	r3, #176	; 0xb0
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d01a      	beq.n	800bf36 <USBD_CDC_EP0_RxReady+0x6c>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf06:	2bff      	cmp	r3, #255	; 0xff
 800bf08:	d015      	beq.n	800bf36 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	33b0      	adds	r3, #176	; 0xb0
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bf22:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf2a:	b292      	uxth	r2, r2
 800bf2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	22ff      	movs	r2, #255	; 0xff
 800bf32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf48:	2182      	movs	r1, #130	; 0x82
 800bf4a:	4818      	ldr	r0, [pc, #96]	; (800bfac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf4c:	f000 fd4f 	bl	800c9ee <USBD_GetEpDesc>
 800bf50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf52:	2101      	movs	r1, #1
 800bf54:	4815      	ldr	r0, [pc, #84]	; (800bfac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf56:	f000 fd4a 	bl	800c9ee <USBD_GetEpDesc>
 800bf5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf5c:	2181      	movs	r1, #129	; 0x81
 800bf5e:	4813      	ldr	r0, [pc, #76]	; (800bfac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf60:	f000 fd45 	bl	800c9ee <USBD_GetEpDesc>
 800bf64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2210      	movs	r2, #16
 800bf70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf80:	711a      	strb	r2, [r3, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d006      	beq.n	800bf9a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf94:	711a      	strb	r2, [r3, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2243      	movs	r2, #67	; 0x43
 800bf9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfa0:	4b02      	ldr	r3, [pc, #8]	; (800bfac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20000164 	.word	0x20000164

0800bfb0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfb8:	2182      	movs	r1, #130	; 0x82
 800bfba:	4818      	ldr	r0, [pc, #96]	; (800c01c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfbc:	f000 fd17 	bl	800c9ee <USBD_GetEpDesc>
 800bfc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bfc2:	2101      	movs	r1, #1
 800bfc4:	4815      	ldr	r0, [pc, #84]	; (800c01c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfc6:	f000 fd12 	bl	800c9ee <USBD_GetEpDesc>
 800bfca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bfcc:	2181      	movs	r1, #129	; 0x81
 800bfce:	4813      	ldr	r0, [pc, #76]	; (800c01c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfd0:	f000 fd0d 	bl	800c9ee <USBD_GetEpDesc>
 800bfd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2210      	movs	r2, #16
 800bfe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d006      	beq.n	800bff6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2200      	movs	r2, #0
 800bfec:	711a      	strb	r2, [r3, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f042 0202 	orr.w	r2, r2, #2
 800bff4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d006      	beq.n	800c00a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	711a      	strb	r2, [r3, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f042 0202 	orr.w	r2, r2, #2
 800c008:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2243      	movs	r2, #67	; 0x43
 800c00e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c010:	4b02      	ldr	r3, [pc, #8]	; (800c01c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c012:	4618      	mov	r0, r3
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20000164 	.word	0x20000164

0800c020 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c028:	2182      	movs	r1, #130	; 0x82
 800c02a:	4818      	ldr	r0, [pc, #96]	; (800c08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c02c:	f000 fcdf 	bl	800c9ee <USBD_GetEpDesc>
 800c030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c032:	2101      	movs	r1, #1
 800c034:	4815      	ldr	r0, [pc, #84]	; (800c08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c036:	f000 fcda 	bl	800c9ee <USBD_GetEpDesc>
 800c03a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c03c:	2181      	movs	r1, #129	; 0x81
 800c03e:	4813      	ldr	r0, [pc, #76]	; (800c08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c040:	f000 fcd5 	bl	800c9ee <USBD_GetEpDesc>
 800c044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	2210      	movs	r2, #16
 800c050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d006      	beq.n	800c066 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c060:	711a      	strb	r2, [r3, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d006      	beq.n	800c07a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c074:	711a      	strb	r2, [r3, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2243      	movs	r2, #67	; 0x43
 800c07e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c080:	4b02      	ldr	r3, [pc, #8]	; (800c08c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c082:	4618      	mov	r0, r3
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	20000164 	.word	0x20000164

0800c090 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	220a      	movs	r2, #10
 800c09c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c09e:	4b03      	ldr	r3, [pc, #12]	; (800c0ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	20000120 	.word	0x20000120

0800c0b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e009      	b.n	800c0d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	33b0      	adds	r3, #176	; 0xb0
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	32b0      	adds	r2, #176	; 0xb0
 800c0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c106:	2303      	movs	r3, #3
 800c108:	e008      	b.n	800c11c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	371c      	adds	r7, #28
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	32b0      	adds	r2, #176	; 0xb0
 800c13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c140:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c148:	2303      	movs	r3, #3
 800c14a:	e004      	b.n	800c156 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
	...

0800c164 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	32b0      	adds	r2, #176	; 0xb0
 800c176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c17a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c17c:	2301      	movs	r3, #1
 800c17e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	32b0      	adds	r2, #176	; 0xb0
 800c18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c192:	2303      	movs	r3, #3
 800c194:	e025      	b.n	800c1e2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d11f      	bne.n	800c1e0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c1a8:	4b10      	ldr	r3, [pc, #64]	; (800c1ec <USBD_CDC_TransmitPacket+0x88>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	f003 020f 	and.w	r2, r3, #15
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4403      	add	r3, r0
 800c1c2:	3318      	adds	r3, #24
 800c1c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c1c6:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <USBD_CDC_TransmitPacket+0x88>)
 800c1c8:	7819      	ldrb	r1, [r3, #0]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f001 ffb5 	bl	800e146 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	200001a7 	.word	0x200001a7

0800c1f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	32b0      	adds	r2, #176	; 0xb0
 800c202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c206:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	32b0      	adds	r2, #176	; 0xb0
 800c212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e018      	b.n	800c250 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	7c1b      	ldrb	r3, [r3, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10a      	bne.n	800c23c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c226:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <USBD_CDC_ReceivePacket+0x68>)
 800c228:	7819      	ldrb	r1, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c230:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 ffa7 	bl	800e188 <USBD_LL_PrepareReceive>
 800c23a:	e008      	b.n	800c24e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c23c:	4b06      	ldr	r3, [pc, #24]	; (800c258 <USBD_CDC_ReceivePacket+0x68>)
 800c23e:	7819      	ldrb	r1, [r3, #0]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c246:	2340      	movs	r3, #64	; 0x40
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f001 ff9d 	bl	800e188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	200001a8 	.word	0x200001a8

0800c25c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c270:	2303      	movs	r3, #3
 800c272:	e01f      	b.n	800c2b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d003      	beq.n	800c29a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	79fa      	ldrb	r2, [r7, #7]
 800c2a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f001 fe11 	bl	800ded0 <USBD_LL_Init>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	e025      	b.n	800c320 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	32ae      	adds	r2, #174	; 0xae
 800c2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00f      	beq.n	800c310 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	32ae      	adds	r2, #174	; 0xae
 800c2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	f107 020e 	add.w	r2, r7, #14
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	4602      	mov	r2, r0
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fe1f 	bl	800df74 <USBD_LL_Start>
 800c336:	4603      	mov	r3, r0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d009      	beq.n	800c384 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	78fa      	ldrb	r2, [r7, #3]
 800c37a:	4611      	mov	r1, r2
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	4798      	blx	r3
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c384:	7bfb      	ldrb	r3, [r7, #15]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	460b      	mov	r3, r1
 800c398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	4798      	blx	r3
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f001 f908 	bl	800d5ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3f6:	f003 031f 	and.w	r3, r3, #31
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d01a      	beq.n	800c434 <USBD_LL_SetupStage+0x72>
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d822      	bhi.n	800c448 <USBD_LL_SetupStage+0x86>
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <USBD_LL_SetupStage+0x4a>
 800c406:	2b01      	cmp	r3, #1
 800c408:	d00a      	beq.n	800c420 <USBD_LL_SetupStage+0x5e>
 800c40a:	e01d      	b.n	800c448 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fb5f 	bl	800cad8 <USBD_StdDevReq>
 800c41a:	4603      	mov	r3, r0
 800c41c:	73fb      	strb	r3, [r7, #15]
      break;
 800c41e:	e020      	b.n	800c462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fbc7 	bl	800cbbc <USBD_StdItfReq>
 800c42e:	4603      	mov	r3, r0
 800c430:	73fb      	strb	r3, [r7, #15]
      break;
 800c432:	e016      	b.n	800c462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fc29 	bl	800cc94 <USBD_StdEPReq>
 800c442:	4603      	mov	r3, r0
 800c444:	73fb      	strb	r3, [r7, #15]
      break;
 800c446:	e00c      	b.n	800c462 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c44e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c452:	b2db      	uxtb	r3, r3
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f001 fdec 	bl	800e034 <USBD_LL_StallEP>
 800c45c:	4603      	mov	r3, r0
 800c45e:	73fb      	strb	r3, [r7, #15]
      break;
 800c460:	bf00      	nop
  }

  return ret;
 800c462:	7bfb      	ldrb	r3, [r7, #15]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	460b      	mov	r3, r1
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c47e:	7afb      	ldrb	r3, [r7, #11]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d16e      	bne.n	800c562 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c48a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c492:	2b03      	cmp	r3, #3
 800c494:	f040 8098 	bne.w	800c5c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d913      	bls.n	800c4cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	689a      	ldr	r2, [r3, #8]
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	1ad2      	subs	r2, r2, r3
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	68da      	ldr	r2, [r3, #12]
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	bf28      	it	cs
 800c4be:	4613      	movcs	r3, r2
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	6879      	ldr	r1, [r7, #4]
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f001 f984 	bl	800d7d2 <USBD_CtlContinueRx>
 800c4ca:	e07d      	b.n	800c5c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4d2:	f003 031f 	and.w	r3, r3, #31
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d014      	beq.n	800c504 <USBD_LL_DataOutStage+0x98>
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d81d      	bhi.n	800c51a <USBD_LL_DataOutStage+0xae>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d002      	beq.n	800c4e8 <USBD_LL_DataOutStage+0x7c>
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d003      	beq.n	800c4ee <USBD_LL_DataOutStage+0x82>
 800c4e6:	e018      	b.n	800c51a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	75bb      	strb	r3, [r7, #22]
            break;
 800c4ec:	e018      	b.n	800c520 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f000 fa5e 	bl	800c9ba <USBD_CoreFindIF>
 800c4fe:	4603      	mov	r3, r0
 800c500:	75bb      	strb	r3, [r7, #22]
            break;
 800c502:	e00d      	b.n	800c520 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	4619      	mov	r1, r3
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 fa60 	bl	800c9d4 <USBD_CoreFindEP>
 800c514:	4603      	mov	r3, r0
 800c516:	75bb      	strb	r3, [r7, #22]
            break;
 800c518:	e002      	b.n	800c520 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c51a:	2300      	movs	r3, #0
 800c51c:	75bb      	strb	r3, [r7, #22]
            break;
 800c51e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c520:	7dbb      	ldrb	r3, [r7, #22]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d119      	bne.n	800c55a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d113      	bne.n	800c55a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c532:	7dba      	ldrb	r2, [r7, #22]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	32ae      	adds	r2, #174	; 0xae
 800c538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00b      	beq.n	800c55a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c542:	7dba      	ldrb	r2, [r7, #22]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c54a:	7dba      	ldrb	r2, [r7, #22]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	32ae      	adds	r2, #174	; 0xae
 800c550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f001 f94a 	bl	800d7f4 <USBD_CtlSendStatus>
 800c560:	e032      	b.n	800c5c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	4619      	mov	r1, r3
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f000 fa31 	bl	800c9d4 <USBD_CoreFindEP>
 800c572:	4603      	mov	r3, r0
 800c574:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c576:	7dbb      	ldrb	r3, [r7, #22]
 800c578:	2bff      	cmp	r3, #255	; 0xff
 800c57a:	d025      	beq.n	800c5c8 <USBD_LL_DataOutStage+0x15c>
 800c57c:	7dbb      	ldrb	r3, [r7, #22]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d122      	bne.n	800c5c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b03      	cmp	r3, #3
 800c58c:	d117      	bne.n	800c5be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c58e:	7dba      	ldrb	r2, [r7, #22]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	32ae      	adds	r2, #174	; 0xae
 800c594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00f      	beq.n	800c5be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c59e:	7dba      	ldrb	r2, [r7, #22]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c5a6:	7dba      	ldrb	r2, [r7, #22]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	32ae      	adds	r2, #174	; 0xae
 800c5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	7afa      	ldrb	r2, [r7, #11]
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	4798      	blx	r3
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	e000      	b.n	800c5ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b086      	sub	sp, #24
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	607a      	str	r2, [r7, #4]
 800c5de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c5e0:	7afb      	ldrb	r3, [r7, #11]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d16f      	bne.n	800c6c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3314      	adds	r3, #20
 800c5ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d15a      	bne.n	800c6ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	689a      	ldr	r2, [r3, #8]
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d914      	bls.n	800c62c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	689a      	ldr	r2, [r3, #8]
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	1ad2      	subs	r2, r2, r3
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	461a      	mov	r2, r3
 800c616:	6879      	ldr	r1, [r7, #4]
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f001 f8ac 	bl	800d776 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c61e:	2300      	movs	r3, #0
 800c620:	2200      	movs	r2, #0
 800c622:	2100      	movs	r1, #0
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f001 fdaf 	bl	800e188 <USBD_LL_PrepareReceive>
 800c62a:	e03f      	b.n	800c6ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	68da      	ldr	r2, [r3, #12]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	429a      	cmp	r2, r3
 800c636:	d11c      	bne.n	800c672 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	685a      	ldr	r2, [r3, #4]
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c640:	429a      	cmp	r2, r3
 800c642:	d316      	bcc.n	800c672 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c64e:	429a      	cmp	r2, r3
 800c650:	d20f      	bcs.n	800c672 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c652:	2200      	movs	r2, #0
 800c654:	2100      	movs	r1, #0
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f001 f88d 	bl	800d776 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c664:	2300      	movs	r3, #0
 800c666:	2200      	movs	r2, #0
 800c668:	2100      	movs	r1, #0
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f001 fd8c 	bl	800e188 <USBD_LL_PrepareReceive>
 800c670:	e01c      	b.n	800c6ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d10f      	bne.n	800c69e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d009      	beq.n	800c69e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c69e:	2180      	movs	r1, #128	; 0x80
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f001 fcc7 	bl	800e034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f001 f8b7 	bl	800d81a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d03a      	beq.n	800c72c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f7ff fe42 	bl	800c340 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c6c4:	e032      	b.n	800c72c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c6c6:	7afb      	ldrb	r3, [r7, #11]
 800c6c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f000 f97f 	bl	800c9d4 <USBD_CoreFindEP>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	2bff      	cmp	r3, #255	; 0xff
 800c6de:	d025      	beq.n	800c72c <USBD_LL_DataInStage+0x15a>
 800c6e0:	7dfb      	ldrb	r3, [r7, #23]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d122      	bne.n	800c72c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d11c      	bne.n	800c72c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c6f2:	7dfa      	ldrb	r2, [r7, #23]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	32ae      	adds	r2, #174	; 0xae
 800c6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d014      	beq.n	800c72c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c702:	7dfa      	ldrb	r2, [r7, #23]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c70a:	7dfa      	ldrb	r2, [r7, #23]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	32ae      	adds	r2, #174	; 0xae
 800c710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	7afa      	ldrb	r2, [r7, #11]
 800c718:	4611      	mov	r1, r2
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	4798      	blx	r3
 800c71e:	4603      	mov	r3, r0
 800c720:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c722:	7dbb      	ldrb	r3, [r7, #22]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c728:	7dbb      	ldrb	r3, [r7, #22]
 800c72a:	e000      	b.n	800c72e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b084      	sub	sp, #16
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c73e:	2300      	movs	r3, #0
 800c740:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d014      	beq.n	800c79c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00e      	beq.n	800c79c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6852      	ldr	r2, [r2, #4]
 800c78a:	b2d2      	uxtb	r2, r2
 800c78c:	4611      	mov	r1, r2
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	4798      	blx	r3
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c798:	2303      	movs	r3, #3
 800c79a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c79c:	2340      	movs	r3, #64	; 0x40
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 fc01 	bl	800dfaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2240      	movs	r2, #64	; 0x40
 800c7b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7b8:	2340      	movs	r3, #64	; 0x40
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2180      	movs	r1, #128	; 0x80
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f001 fbf3 	bl	800dfaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2240      	movs	r2, #64	; 0x40
 800c7ce:	621a      	str	r2, [r3, #32]

  return ret;
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	78fa      	ldrb	r2, [r7, #3]
 800c7ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7fa:	b480      	push	{r7}
 800c7fc:	b083      	sub	sp, #12
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2204      	movs	r2, #4
 800c814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b04      	cmp	r3, #4
 800c838:	d106      	bne.n	800c848 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c840:	b2da      	uxtb	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b082      	sub	sp, #8
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b03      	cmp	r3, #3
 800c868:	d110      	bne.n	800c88c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00b      	beq.n	800c88c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c87a:	69db      	ldr	r3, [r3, #28]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d005      	beq.n	800c88c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c886:	69db      	ldr	r3, [r3, #28]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	460b      	mov	r3, r1
 800c8a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	32ae      	adds	r2, #174	; 0xae
 800c8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e01c      	b.n	800c8f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b03      	cmp	r3, #3
 800c8c2:	d115      	bne.n	800c8f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	32ae      	adds	r2, #174	; 0xae
 800c8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	32ae      	adds	r2, #174	; 0xae
 800c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e6:	6a1b      	ldr	r3, [r3, #32]
 800c8e8:	78fa      	ldrb	r2, [r7, #3]
 800c8ea:	4611      	mov	r1, r2
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	460b      	mov	r3, r1
 800c904:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	32ae      	adds	r2, #174	; 0xae
 800c910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c918:	2303      	movs	r3, #3
 800c91a:	e01c      	b.n	800c956 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b03      	cmp	r3, #3
 800c926:	d115      	bne.n	800c954 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	32ae      	adds	r2, #174	; 0xae
 800c932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00b      	beq.n	800c954 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	32ae      	adds	r2, #174	; 0xae
 800c946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94c:	78fa      	ldrb	r2, [r7, #3]
 800c94e:	4611      	mov	r1, r2
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c95e:	b480      	push	{r7}
 800c960:	b083      	sub	sp, #12
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00e      	beq.n	800c9b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	6852      	ldr	r2, [r2, #4]
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	4611      	mov	r1, r2
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	4798      	blx	r3
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b086      	sub	sp, #24
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ca02:	2300      	movs	r3, #0
 800ca04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	885b      	ldrh	r3, [r3, #2]
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d920      	bls.n	800ca58 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ca1e:	e013      	b.n	800ca48 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ca20:	f107 030a 	add.w	r3, r7, #10
 800ca24:	4619      	mov	r1, r3
 800ca26:	6978      	ldr	r0, [r7, #20]
 800ca28:	f000 f81b 	bl	800ca62 <USBD_GetNextDesc>
 800ca2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	785b      	ldrb	r3, [r3, #1]
 800ca32:	2b05      	cmp	r3, #5
 800ca34:	d108      	bne.n	800ca48 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	789b      	ldrb	r3, [r3, #2]
 800ca3e:	78fa      	ldrb	r2, [r7, #3]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d008      	beq.n	800ca56 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ca44:	2300      	movs	r3, #0
 800ca46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	885b      	ldrh	r3, [r3, #2]
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	897b      	ldrh	r3, [r7, #10]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d8e5      	bhi.n	800ca20 <USBD_GetEpDesc+0x32>
 800ca54:	e000      	b.n	800ca58 <USBD_GetEpDesc+0x6a>
          break;
 800ca56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ca58:	693b      	ldr	r3, [r7, #16]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b085      	sub	sp, #20
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	881a      	ldrh	r2, [r3, #0]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4413      	add	r3, r2
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	461a      	mov	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b087      	sub	sp, #28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	3301      	adds	r3, #1
 800cab2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800caba:	8a3b      	ldrh	r3, [r7, #16]
 800cabc:	021b      	lsls	r3, r3, #8
 800cabe:	b21a      	sxth	r2, r3
 800cac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cac4:	4313      	orrs	r3, r2
 800cac6:	b21b      	sxth	r3, r3
 800cac8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800caca:	89fb      	ldrh	r3, [r7, #14]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	371c      	adds	r7, #28
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cae2:	2300      	movs	r3, #0
 800cae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800caee:	2b40      	cmp	r3, #64	; 0x40
 800caf0:	d005      	beq.n	800cafe <USBD_StdDevReq+0x26>
 800caf2:	2b40      	cmp	r3, #64	; 0x40
 800caf4:	d857      	bhi.n	800cba6 <USBD_StdDevReq+0xce>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00f      	beq.n	800cb1a <USBD_StdDevReq+0x42>
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	d153      	bne.n	800cba6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	32ae      	adds	r2, #174	; 0xae
 800cb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	4798      	blx	r3
 800cb14:	4603      	mov	r3, r0
 800cb16:	73fb      	strb	r3, [r7, #15]
      break;
 800cb18:	e04a      	b.n	800cbb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	785b      	ldrb	r3, [r3, #1]
 800cb1e:	2b09      	cmp	r3, #9
 800cb20:	d83b      	bhi.n	800cb9a <USBD_StdDevReq+0xc2>
 800cb22:	a201      	add	r2, pc, #4	; (adr r2, 800cb28 <USBD_StdDevReq+0x50>)
 800cb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb28:	0800cb7d 	.word	0x0800cb7d
 800cb2c:	0800cb91 	.word	0x0800cb91
 800cb30:	0800cb9b 	.word	0x0800cb9b
 800cb34:	0800cb87 	.word	0x0800cb87
 800cb38:	0800cb9b 	.word	0x0800cb9b
 800cb3c:	0800cb5b 	.word	0x0800cb5b
 800cb40:	0800cb51 	.word	0x0800cb51
 800cb44:	0800cb9b 	.word	0x0800cb9b
 800cb48:	0800cb73 	.word	0x0800cb73
 800cb4c:	0800cb65 	.word	0x0800cb65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fa3c 	bl	800cfd0 <USBD_GetDescriptor>
          break;
 800cb58:	e024      	b.n	800cba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fba1 	bl	800d2a4 <USBD_SetAddress>
          break;
 800cb62:	e01f      	b.n	800cba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fbe0 	bl	800d32c <USBD_SetConfig>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	73fb      	strb	r3, [r7, #15]
          break;
 800cb70:	e018      	b.n	800cba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fc83 	bl	800d480 <USBD_GetConfig>
          break;
 800cb7a:	e013      	b.n	800cba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cb7c:	6839      	ldr	r1, [r7, #0]
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fcb4 	bl	800d4ec <USBD_GetStatus>
          break;
 800cb84:	e00e      	b.n	800cba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fce3 	bl	800d554 <USBD_SetFeature>
          break;
 800cb8e:	e009      	b.n	800cba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fd07 	bl	800d5a6 <USBD_ClrFeature>
          break;
 800cb98:	e004      	b.n	800cba4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 fd5e 	bl	800d65e <USBD_CtlError>
          break;
 800cba2:	bf00      	nop
      }
      break;
 800cba4:	e004      	b.n	800cbb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fd58 	bl	800d65e <USBD_CtlError>
      break;
 800cbae:	bf00      	nop
  }

  return ret;
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop

0800cbbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbd2:	2b40      	cmp	r3, #64	; 0x40
 800cbd4:	d005      	beq.n	800cbe2 <USBD_StdItfReq+0x26>
 800cbd6:	2b40      	cmp	r3, #64	; 0x40
 800cbd8:	d852      	bhi.n	800cc80 <USBD_StdItfReq+0xc4>
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <USBD_StdItfReq+0x26>
 800cbde:	2b20      	cmp	r3, #32
 800cbe0:	d14e      	bne.n	800cc80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	3b01      	subs	r3, #1
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d840      	bhi.n	800cc72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	889b      	ldrh	r3, [r3, #4]
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d836      	bhi.n	800cc68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	889b      	ldrh	r3, [r3, #4]
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fed9 	bl	800c9ba <USBD_CoreFindIF>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	2bff      	cmp	r3, #255	; 0xff
 800cc10:	d01d      	beq.n	800cc4e <USBD_StdItfReq+0x92>
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d11a      	bne.n	800cc4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cc18:	7bba      	ldrb	r2, [r7, #14]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	32ae      	adds	r2, #174	; 0xae
 800cc1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00f      	beq.n	800cc48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cc28:	7bba      	ldrb	r2, [r7, #14]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc30:	7bba      	ldrb	r2, [r7, #14]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	32ae      	adds	r2, #174	; 0xae
 800cc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	4798      	blx	r3
 800cc42:	4603      	mov	r3, r0
 800cc44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc46:	e004      	b.n	800cc52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc4c:	e001      	b.n	800cc52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	88db      	ldrh	r3, [r3, #6]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d110      	bne.n	800cc7c <USBD_StdItfReq+0xc0>
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10d      	bne.n	800cc7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 fdc7 	bl	800d7f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc66:	e009      	b.n	800cc7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fcf7 	bl	800d65e <USBD_CtlError>
          break;
 800cc70:	e004      	b.n	800cc7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cc72:	6839      	ldr	r1, [r7, #0]
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 fcf2 	bl	800d65e <USBD_CtlError>
          break;
 800cc7a:	e000      	b.n	800cc7e <USBD_StdItfReq+0xc2>
          break;
 800cc7c:	bf00      	nop
      }
      break;
 800cc7e:	e004      	b.n	800cc8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fceb 	bl	800d65e <USBD_CtlError>
      break;
 800cc88:	bf00      	nop
  }

  return ret;
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	889b      	ldrh	r3, [r3, #4]
 800cca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccb0:	2b40      	cmp	r3, #64	; 0x40
 800ccb2:	d007      	beq.n	800ccc4 <USBD_StdEPReq+0x30>
 800ccb4:	2b40      	cmp	r3, #64	; 0x40
 800ccb6:	f200 817f 	bhi.w	800cfb8 <USBD_StdEPReq+0x324>
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d02a      	beq.n	800cd14 <USBD_StdEPReq+0x80>
 800ccbe:	2b20      	cmp	r3, #32
 800ccc0:	f040 817a 	bne.w	800cfb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ccc4:	7bbb      	ldrb	r3, [r7, #14]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7ff fe83 	bl	800c9d4 <USBD_CoreFindEP>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccd2:	7b7b      	ldrb	r3, [r7, #13]
 800ccd4:	2bff      	cmp	r3, #255	; 0xff
 800ccd6:	f000 8174 	beq.w	800cfc2 <USBD_StdEPReq+0x32e>
 800ccda:	7b7b      	ldrb	r3, [r7, #13]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f040 8170 	bne.w	800cfc2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cce2:	7b7a      	ldrb	r2, [r7, #13]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ccea:	7b7a      	ldrb	r2, [r7, #13]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	32ae      	adds	r2, #174	; 0xae
 800ccf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 8163 	beq.w	800cfc2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ccfc:	7b7a      	ldrb	r2, [r7, #13]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	32ae      	adds	r2, #174	; 0xae
 800cd02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	4798      	blx	r3
 800cd0e:	4603      	mov	r3, r0
 800cd10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cd12:	e156      	b.n	800cfc2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	785b      	ldrb	r3, [r3, #1]
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d008      	beq.n	800cd2e <USBD_StdEPReq+0x9a>
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	f300 8145 	bgt.w	800cfac <USBD_StdEPReq+0x318>
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 809b 	beq.w	800ce5e <USBD_StdEPReq+0x1ca>
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d03c      	beq.n	800cda6 <USBD_StdEPReq+0x112>
 800cd2c:	e13e      	b.n	800cfac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d002      	beq.n	800cd40 <USBD_StdEPReq+0xac>
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	d016      	beq.n	800cd6c <USBD_StdEPReq+0xd8>
 800cd3e:	e02c      	b.n	800cd9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd40:	7bbb      	ldrb	r3, [r7, #14]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00d      	beq.n	800cd62 <USBD_StdEPReq+0xce>
 800cd46:	7bbb      	ldrb	r3, [r7, #14]
 800cd48:	2b80      	cmp	r3, #128	; 0x80
 800cd4a:	d00a      	beq.n	800cd62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 f96f 	bl	800e034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd56:	2180      	movs	r1, #128	; 0x80
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f001 f96b 	bl	800e034 <USBD_LL_StallEP>
 800cd5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd60:	e020      	b.n	800cda4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fc7a 	bl	800d65e <USBD_CtlError>
              break;
 800cd6a:	e01b      	b.n	800cda4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	885b      	ldrh	r3, [r3, #2]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10e      	bne.n	800cd92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00b      	beq.n	800cd92 <USBD_StdEPReq+0xfe>
 800cd7a:	7bbb      	ldrb	r3, [r7, #14]
 800cd7c:	2b80      	cmp	r3, #128	; 0x80
 800cd7e:	d008      	beq.n	800cd92 <USBD_StdEPReq+0xfe>
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	88db      	ldrh	r3, [r3, #6]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d104      	bne.n	800cd92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd88:	7bbb      	ldrb	r3, [r7, #14]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f001 f951 	bl	800e034 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fd2e 	bl	800d7f4 <USBD_CtlSendStatus>

              break;
 800cd98:	e004      	b.n	800cda4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cd9a:	6839      	ldr	r1, [r7, #0]
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fc5e 	bl	800d65e <USBD_CtlError>
              break;
 800cda2:	bf00      	nop
          }
          break;
 800cda4:	e107      	b.n	800cfb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d002      	beq.n	800cdb8 <USBD_StdEPReq+0x124>
 800cdb2:	2b03      	cmp	r3, #3
 800cdb4:	d016      	beq.n	800cde4 <USBD_StdEPReq+0x150>
 800cdb6:	e04b      	b.n	800ce50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00d      	beq.n	800cdda <USBD_StdEPReq+0x146>
 800cdbe:	7bbb      	ldrb	r3, [r7, #14]
 800cdc0:	2b80      	cmp	r3, #128	; 0x80
 800cdc2:	d00a      	beq.n	800cdda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f001 f933 	bl	800e034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdce:	2180      	movs	r1, #128	; 0x80
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f001 f92f 	bl	800e034 <USBD_LL_StallEP>
 800cdd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cdd8:	e040      	b.n	800ce5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fc3e 	bl	800d65e <USBD_CtlError>
              break;
 800cde2:	e03b      	b.n	800ce5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	885b      	ldrh	r3, [r3, #2]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d136      	bne.n	800ce5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cdec:	7bbb      	ldrb	r3, [r7, #14]
 800cdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d004      	beq.n	800ce00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f001 f939 	bl	800e072 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fcf7 	bl	800d7f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff fde2 	bl	800c9d4 <USBD_CoreFindEP>
 800ce10:	4603      	mov	r3, r0
 800ce12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce14:	7b7b      	ldrb	r3, [r7, #13]
 800ce16:	2bff      	cmp	r3, #255	; 0xff
 800ce18:	d01f      	beq.n	800ce5a <USBD_StdEPReq+0x1c6>
 800ce1a:	7b7b      	ldrb	r3, [r7, #13]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d11c      	bne.n	800ce5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ce20:	7b7a      	ldrb	r2, [r7, #13]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ce28:	7b7a      	ldrb	r2, [r7, #13]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	32ae      	adds	r2, #174	; 0xae
 800ce2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d010      	beq.n	800ce5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce38:	7b7a      	ldrb	r2, [r7, #13]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	32ae      	adds	r2, #174	; 0xae
 800ce3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	4798      	blx	r3
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ce4e:	e004      	b.n	800ce5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fc03 	bl	800d65e <USBD_CtlError>
              break;
 800ce58:	e000      	b.n	800ce5c <USBD_StdEPReq+0x1c8>
              break;
 800ce5a:	bf00      	nop
          }
          break;
 800ce5c:	e0ab      	b.n	800cfb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d002      	beq.n	800ce70 <USBD_StdEPReq+0x1dc>
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d032      	beq.n	800ced4 <USBD_StdEPReq+0x240>
 800ce6e:	e097      	b.n	800cfa0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce70:	7bbb      	ldrb	r3, [r7, #14]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d007      	beq.n	800ce86 <USBD_StdEPReq+0x1f2>
 800ce76:	7bbb      	ldrb	r3, [r7, #14]
 800ce78:	2b80      	cmp	r3, #128	; 0x80
 800ce7a:	d004      	beq.n	800ce86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fbed 	bl	800d65e <USBD_CtlError>
                break;
 800ce84:	e091      	b.n	800cfaa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	da0b      	bge.n	800cea6 <USBD_StdEPReq+0x212>
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
 800ce90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce94:	4613      	mov	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	3310      	adds	r3, #16
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	4413      	add	r3, r2
 800cea2:	3304      	adds	r3, #4
 800cea4:	e00b      	b.n	800cebe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ceac:	4613      	mov	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	4413      	add	r3, r2
 800cebc:	3304      	adds	r3, #4
 800cebe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2202      	movs	r2, #2
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fc37 	bl	800d740 <USBD_CtlSendData>
              break;
 800ced2:	e06a      	b.n	800cfaa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ced4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	da11      	bge.n	800cf00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
 800cede:	f003 020f 	and.w	r2, r3, #15
 800cee2:	6879      	ldr	r1, [r7, #4]
 800cee4:	4613      	mov	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	440b      	add	r3, r1
 800ceee:	3324      	adds	r3, #36	; 0x24
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d117      	bne.n	800cf26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 fbb0 	bl	800d65e <USBD_CtlError>
                  break;
 800cefe:	e054      	b.n	800cfaa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf00:	7bbb      	ldrb	r3, [r7, #14]
 800cf02:	f003 020f 	and.w	r2, r3, #15
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	440b      	add	r3, r1
 800cf12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf16:	881b      	ldrh	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d104      	bne.n	800cf26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fb9d 	bl	800d65e <USBD_CtlError>
                  break;
 800cf24:	e041      	b.n	800cfaa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	da0b      	bge.n	800cf46 <USBD_StdEPReq+0x2b2>
 800cf2e:	7bbb      	ldrb	r3, [r7, #14]
 800cf30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf34:	4613      	mov	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	3310      	adds	r3, #16
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	4413      	add	r3, r2
 800cf42:	3304      	adds	r3, #4
 800cf44:	e00b      	b.n	800cf5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <USBD_StdEPReq+0x2d8>
 800cf66:	7bbb      	ldrb	r3, [r7, #14]
 800cf68:	2b80      	cmp	r3, #128	; 0x80
 800cf6a:	d103      	bne.n	800cf74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]
 800cf72:	e00e      	b.n	800cf92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf74:	7bbb      	ldrb	r3, [r7, #14]
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f001 f899 	bl	800e0b0 <USBD_LL_IsStallEP>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d003      	beq.n	800cf8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2201      	movs	r2, #1
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	e002      	b.n	800cf92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	2202      	movs	r2, #2
 800cf96:	4619      	mov	r1, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fbd1 	bl	800d740 <USBD_CtlSendData>
              break;
 800cf9e:	e004      	b.n	800cfaa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fb5b 	bl	800d65e <USBD_CtlError>
              break;
 800cfa8:	bf00      	nop
          }
          break;
 800cfaa:	e004      	b.n	800cfb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cfac:	6839      	ldr	r1, [r7, #0]
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 fb55 	bl	800d65e <USBD_CtlError>
          break;
 800cfb4:	bf00      	nop
      }
      break;
 800cfb6:	e005      	b.n	800cfc4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fb4f 	bl	800d65e <USBD_CtlError>
      break;
 800cfc0:	e000      	b.n	800cfc4 <USBD_StdEPReq+0x330>
      break;
 800cfc2:	bf00      	nop
  }

  return ret;
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	885b      	ldrh	r3, [r3, #2]
 800cfea:	0a1b      	lsrs	r3, r3, #8
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	3b01      	subs	r3, #1
 800cff0:	2b06      	cmp	r3, #6
 800cff2:	f200 8128 	bhi.w	800d246 <USBD_GetDescriptor+0x276>
 800cff6:	a201      	add	r2, pc, #4	; (adr r2, 800cffc <USBD_GetDescriptor+0x2c>)
 800cff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffc:	0800d019 	.word	0x0800d019
 800d000:	0800d031 	.word	0x0800d031
 800d004:	0800d071 	.word	0x0800d071
 800d008:	0800d247 	.word	0x0800d247
 800d00c:	0800d247 	.word	0x0800d247
 800d010:	0800d1e7 	.word	0x0800d1e7
 800d014:	0800d213 	.word	0x0800d213
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	7c12      	ldrb	r2, [r2, #16]
 800d024:	f107 0108 	add.w	r1, r7, #8
 800d028:	4610      	mov	r0, r2
 800d02a:	4798      	blx	r3
 800d02c:	60f8      	str	r0, [r7, #12]
      break;
 800d02e:	e112      	b.n	800d256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	7c1b      	ldrb	r3, [r3, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10d      	bne.n	800d054 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d040:	f107 0208 	add.w	r2, r7, #8
 800d044:	4610      	mov	r0, r2
 800d046:	4798      	blx	r3
 800d048:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	3301      	adds	r3, #1
 800d04e:	2202      	movs	r2, #2
 800d050:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d052:	e100      	b.n	800d256 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	f107 0208 	add.w	r2, r7, #8
 800d060:	4610      	mov	r0, r2
 800d062:	4798      	blx	r3
 800d064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3301      	adds	r3, #1
 800d06a:	2202      	movs	r2, #2
 800d06c:	701a      	strb	r2, [r3, #0]
      break;
 800d06e:	e0f2      	b.n	800d256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	885b      	ldrh	r3, [r3, #2]
 800d074:	b2db      	uxtb	r3, r3
 800d076:	2b05      	cmp	r3, #5
 800d078:	f200 80ac 	bhi.w	800d1d4 <USBD_GetDescriptor+0x204>
 800d07c:	a201      	add	r2, pc, #4	; (adr r2, 800d084 <USBD_GetDescriptor+0xb4>)
 800d07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d082:	bf00      	nop
 800d084:	0800d09d 	.word	0x0800d09d
 800d088:	0800d0d1 	.word	0x0800d0d1
 800d08c:	0800d105 	.word	0x0800d105
 800d090:	0800d139 	.word	0x0800d139
 800d094:	0800d16d 	.word	0x0800d16d
 800d098:	0800d1a1 	.word	0x0800d1a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	7c12      	ldrb	r2, [r2, #16]
 800d0b4:	f107 0108 	add.w	r1, r7, #8
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	4798      	blx	r3
 800d0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0be:	e091      	b.n	800d1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0c0:	6839      	ldr	r1, [r7, #0]
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 facb 	bl	800d65e <USBD_CtlError>
            err++;
 800d0c8:	7afb      	ldrb	r3, [r7, #11]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ce:	e089      	b.n	800d1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00b      	beq.n	800d0f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	7c12      	ldrb	r2, [r2, #16]
 800d0e8:	f107 0108 	add.w	r1, r7, #8
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4798      	blx	r3
 800d0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0f2:	e077      	b.n	800d1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fab1 	bl	800d65e <USBD_CtlError>
            err++;
 800d0fc:	7afb      	ldrb	r3, [r7, #11]
 800d0fe:	3301      	adds	r3, #1
 800d100:	72fb      	strb	r3, [r7, #11]
          break;
 800d102:	e06f      	b.n	800d1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00b      	beq.n	800d128 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	7c12      	ldrb	r2, [r2, #16]
 800d11c:	f107 0108 	add.w	r1, r7, #8
 800d120:	4610      	mov	r0, r2
 800d122:	4798      	blx	r3
 800d124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d126:	e05d      	b.n	800d1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d128:	6839      	ldr	r1, [r7, #0]
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fa97 	bl	800d65e <USBD_CtlError>
            err++;
 800d130:	7afb      	ldrb	r3, [r7, #11]
 800d132:	3301      	adds	r3, #1
 800d134:	72fb      	strb	r3, [r7, #11]
          break;
 800d136:	e055      	b.n	800d1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00b      	beq.n	800d15c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	7c12      	ldrb	r2, [r2, #16]
 800d150:	f107 0108 	add.w	r1, r7, #8
 800d154:	4610      	mov	r0, r2
 800d156:	4798      	blx	r3
 800d158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d15a:	e043      	b.n	800d1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fa7d 	bl	800d65e <USBD_CtlError>
            err++;
 800d164:	7afb      	ldrb	r3, [r7, #11]
 800d166:	3301      	adds	r3, #1
 800d168:	72fb      	strb	r3, [r7, #11]
          break;
 800d16a:	e03b      	b.n	800d1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00b      	beq.n	800d190 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d17e:	695b      	ldr	r3, [r3, #20]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	7c12      	ldrb	r2, [r2, #16]
 800d184:	f107 0108 	add.w	r1, r7, #8
 800d188:	4610      	mov	r0, r2
 800d18a:	4798      	blx	r3
 800d18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d18e:	e029      	b.n	800d1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d190:	6839      	ldr	r1, [r7, #0]
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 fa63 	bl	800d65e <USBD_CtlError>
            err++;
 800d198:	7afb      	ldrb	r3, [r7, #11]
 800d19a:	3301      	adds	r3, #1
 800d19c:	72fb      	strb	r3, [r7, #11]
          break;
 800d19e:	e021      	b.n	800d1e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00b      	beq.n	800d1c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1b2:	699b      	ldr	r3, [r3, #24]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	7c12      	ldrb	r2, [r2, #16]
 800d1b8:	f107 0108 	add.w	r1, r7, #8
 800d1bc:	4610      	mov	r0, r2
 800d1be:	4798      	blx	r3
 800d1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1c2:	e00f      	b.n	800d1e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 fa49 	bl	800d65e <USBD_CtlError>
            err++;
 800d1cc:	7afb      	ldrb	r3, [r7, #11]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1d2:	e007      	b.n	800d1e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fa41 	bl	800d65e <USBD_CtlError>
          err++;
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d1e2:	bf00      	nop
      }
      break;
 800d1e4:	e037      	b.n	800d256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	7c1b      	ldrb	r3, [r3, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d109      	bne.n	800d202 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f6:	f107 0208 	add.w	r2, r7, #8
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	4798      	blx	r3
 800d1fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d200:	e029      	b.n	800d256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 fa2a 	bl	800d65e <USBD_CtlError>
        err++;
 800d20a:	7afb      	ldrb	r3, [r7, #11]
 800d20c:	3301      	adds	r3, #1
 800d20e:	72fb      	strb	r3, [r7, #11]
      break;
 800d210:	e021      	b.n	800d256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	7c1b      	ldrb	r3, [r3, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10d      	bne.n	800d236 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d222:	f107 0208 	add.w	r2, r7, #8
 800d226:	4610      	mov	r0, r2
 800d228:	4798      	blx	r3
 800d22a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3301      	adds	r3, #1
 800d230:	2207      	movs	r2, #7
 800d232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d234:	e00f      	b.n	800d256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d236:	6839      	ldr	r1, [r7, #0]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa10 	bl	800d65e <USBD_CtlError>
        err++;
 800d23e:	7afb      	ldrb	r3, [r7, #11]
 800d240:	3301      	adds	r3, #1
 800d242:	72fb      	strb	r3, [r7, #11]
      break;
 800d244:	e007      	b.n	800d256 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d246:	6839      	ldr	r1, [r7, #0]
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fa08 	bl	800d65e <USBD_CtlError>
      err++;
 800d24e:	7afb      	ldrb	r3, [r7, #11]
 800d250:	3301      	adds	r3, #1
 800d252:	72fb      	strb	r3, [r7, #11]
      break;
 800d254:	bf00      	nop
  }

  if (err != 0U)
 800d256:	7afb      	ldrb	r3, [r7, #11]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d11e      	bne.n	800d29a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	88db      	ldrh	r3, [r3, #6]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d016      	beq.n	800d292 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d264:	893b      	ldrh	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00e      	beq.n	800d288 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	88da      	ldrh	r2, [r3, #6]
 800d26e:	893b      	ldrh	r3, [r7, #8]
 800d270:	4293      	cmp	r3, r2
 800d272:	bf28      	it	cs
 800d274:	4613      	movcs	r3, r2
 800d276:	b29b      	uxth	r3, r3
 800d278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d27a:	893b      	ldrh	r3, [r7, #8]
 800d27c:	461a      	mov	r2, r3
 800d27e:	68f9      	ldr	r1, [r7, #12]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fa5d 	bl	800d740 <USBD_CtlSendData>
 800d286:	e009      	b.n	800d29c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f9e7 	bl	800d65e <USBD_CtlError>
 800d290:	e004      	b.n	800d29c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 faae 	bl	800d7f4 <USBD_CtlSendStatus>
 800d298:	e000      	b.n	800d29c <USBD_GetDescriptor+0x2cc>
    return;
 800d29a:	bf00      	nop
  }
}
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop

0800d2a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	889b      	ldrh	r3, [r3, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d131      	bne.n	800d31a <USBD_SetAddress+0x76>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	88db      	ldrh	r3, [r3, #6]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d12d      	bne.n	800d31a <USBD_SetAddress+0x76>
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	885b      	ldrh	r3, [r3, #2]
 800d2c2:	2b7f      	cmp	r3, #127	; 0x7f
 800d2c4:	d829      	bhi.n	800d31a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	885b      	ldrh	r3, [r3, #2]
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d104      	bne.n	800d2e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d2de:	6839      	ldr	r1, [r7, #0]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 f9bc 	bl	800d65e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2e6:	e01d      	b.n	800d324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7bfa      	ldrb	r2, [r7, #15]
 800d2ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 ff07 	bl	800e108 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fa7a 	bl	800d7f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d300:	7bfb      	ldrb	r3, [r7, #15]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2202      	movs	r2, #2
 800d30a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d30e:	e009      	b.n	800d324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d318:	e004      	b.n	800d324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d31a:	6839      	ldr	r1, [r7, #0]
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f99e 	bl	800d65e <USBD_CtlError>
  }
}
 800d322:	bf00      	nop
 800d324:	bf00      	nop
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	885b      	ldrh	r3, [r3, #2]
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	4b4e      	ldr	r3, [pc, #312]	; (800d47c <USBD_SetConfig+0x150>)
 800d342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d344:	4b4d      	ldr	r3, [pc, #308]	; (800d47c <USBD_SetConfig+0x150>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d905      	bls.n	800d358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f985 	bl	800d65e <USBD_CtlError>
    return USBD_FAIL;
 800d354:	2303      	movs	r3, #3
 800d356:	e08c      	b.n	800d472 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b02      	cmp	r3, #2
 800d362:	d002      	beq.n	800d36a <USBD_SetConfig+0x3e>
 800d364:	2b03      	cmp	r3, #3
 800d366:	d029      	beq.n	800d3bc <USBD_SetConfig+0x90>
 800d368:	e075      	b.n	800d456 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d36a:	4b44      	ldr	r3, [pc, #272]	; (800d47c <USBD_SetConfig+0x150>)
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d020      	beq.n	800d3b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d372:	4b42      	ldr	r3, [pc, #264]	; (800d47c <USBD_SetConfig+0x150>)
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	461a      	mov	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d37c:	4b3f      	ldr	r3, [pc, #252]	; (800d47c <USBD_SetConfig+0x150>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	4619      	mov	r1, r3
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7fe ffe7 	bl	800c356 <USBD_SetClassConfig>
 800d388:	4603      	mov	r3, r0
 800d38a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d008      	beq.n	800d3a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d392:	6839      	ldr	r1, [r7, #0]
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f962 	bl	800d65e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2202      	movs	r2, #2
 800d39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3a2:	e065      	b.n	800d470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fa25 	bl	800d7f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2203      	movs	r2, #3
 800d3ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3b2:	e05d      	b.n	800d470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 fa1d 	bl	800d7f4 <USBD_CtlSendStatus>
      break;
 800d3ba:	e059      	b.n	800d470 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d3bc:	4b2f      	ldr	r3, [pc, #188]	; (800d47c <USBD_SetConfig+0x150>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d112      	bne.n	800d3ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2202      	movs	r2, #2
 800d3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d3cc:	4b2b      	ldr	r3, [pc, #172]	; (800d47c <USBD_SetConfig+0x150>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3d6:	4b29      	ldr	r3, [pc, #164]	; (800d47c <USBD_SetConfig+0x150>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f7fe ffd6 	bl	800c38e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fa06 	bl	800d7f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3e8:	e042      	b.n	800d470 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d3ea:	4b24      	ldr	r3, [pc, #144]	; (800d47c <USBD_SetConfig+0x150>)
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d02a      	beq.n	800d44e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	4619      	mov	r1, r3
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7fe ffc4 	bl	800c38e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d406:	4b1d      	ldr	r3, [pc, #116]	; (800d47c <USBD_SetConfig+0x150>)
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	461a      	mov	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d410:	4b1a      	ldr	r3, [pc, #104]	; (800d47c <USBD_SetConfig+0x150>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	4619      	mov	r1, r3
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7fe ff9d 	bl	800c356 <USBD_SetClassConfig>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00f      	beq.n	800d446 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f918 	bl	800d65e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	b2db      	uxtb	r3, r3
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7fe ffa9 	bl	800c38e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2202      	movs	r2, #2
 800d440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d444:	e014      	b.n	800d470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f9d4 	bl	800d7f4 <USBD_CtlSendStatus>
      break;
 800d44c:	e010      	b.n	800d470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 f9d0 	bl	800d7f4 <USBD_CtlSendStatus>
      break;
 800d454:	e00c      	b.n	800d470 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f900 	bl	800d65e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d45e:	4b07      	ldr	r3, [pc, #28]	; (800d47c <USBD_SetConfig+0x150>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7fe ff92 	bl	800c38e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d46a:	2303      	movs	r3, #3
 800d46c:	73fb      	strb	r3, [r7, #15]
      break;
 800d46e:	bf00      	nop
  }

  return ret;
 800d470:	7bfb      	ldrb	r3, [r7, #15]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20004794 	.word	0x20004794

0800d480 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	88db      	ldrh	r3, [r3, #6]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d004      	beq.n	800d49c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f8e2 	bl	800d65e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d49a:	e023      	b.n	800d4e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	dc02      	bgt.n	800d4ae <USBD_GetConfig+0x2e>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	dc03      	bgt.n	800d4b4 <USBD_GetConfig+0x34>
 800d4ac:	e015      	b.n	800d4da <USBD_GetConfig+0x5a>
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d00b      	beq.n	800d4ca <USBD_GetConfig+0x4a>
 800d4b2:	e012      	b.n	800d4da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3308      	adds	r3, #8
 800d4be:	2201      	movs	r2, #1
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f93c 	bl	800d740 <USBD_CtlSendData>
        break;
 800d4c8:	e00c      	b.n	800d4e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f934 	bl	800d740 <USBD_CtlSendData>
        break;
 800d4d8:	e004      	b.n	800d4e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f8be 	bl	800d65e <USBD_CtlError>
        break;
 800d4e2:	bf00      	nop
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	3b01      	subs	r3, #1
 800d500:	2b02      	cmp	r3, #2
 800d502:	d81e      	bhi.n	800d542 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	88db      	ldrh	r3, [r3, #6]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d004      	beq.n	800d516 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f8a5 	bl	800d65e <USBD_CtlError>
        break;
 800d514:	e01a      	b.n	800d54c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2201      	movs	r2, #1
 800d51a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d522:	2b00      	cmp	r3, #0
 800d524:	d005      	beq.n	800d532 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	f043 0202 	orr.w	r2, r3, #2
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	330c      	adds	r3, #12
 800d536:	2202      	movs	r2, #2
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f900 	bl	800d740 <USBD_CtlSendData>
      break;
 800d540:	e004      	b.n	800d54c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d542:	6839      	ldr	r1, [r7, #0]
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 f88a 	bl	800d65e <USBD_CtlError>
      break;
 800d54a:	bf00      	nop
  }
}
 800d54c:	bf00      	nop
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	885b      	ldrh	r3, [r3, #2]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d107      	bne.n	800d576 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f940 	bl	800d7f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d574:	e013      	b.n	800d59e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	885b      	ldrh	r3, [r3, #2]
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	d10b      	bne.n	800d596 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	889b      	ldrh	r3, [r3, #4]
 800d582:	0a1b      	lsrs	r3, r3, #8
 800d584:	b29b      	uxth	r3, r3
 800d586:	b2da      	uxtb	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f930 	bl	800d7f4 <USBD_CtlSendStatus>
}
 800d594:	e003      	b.n	800d59e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f860 	bl	800d65e <USBD_CtlError>
}
 800d59e:	bf00      	nop
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b082      	sub	sp, #8
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d80b      	bhi.n	800d5d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	885b      	ldrh	r3, [r3, #2]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d10c      	bne.n	800d5e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f910 	bl	800d7f4 <USBD_CtlSendStatus>
      }
      break;
 800d5d4:	e004      	b.n	800d5e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d5d6:	6839      	ldr	r1, [r7, #0]
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 f840 	bl	800d65e <USBD_CtlError>
      break;
 800d5de:	e000      	b.n	800d5e2 <USBD_ClrFeature+0x3c>
      break;
 800d5e0:	bf00      	nop
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	781a      	ldrb	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	3301      	adds	r3, #1
 800d604:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	781a      	ldrb	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3301      	adds	r3, #1
 800d612:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f7ff fa41 	bl	800ca9c <SWAPBYTE>
 800d61a:	4603      	mov	r3, r0
 800d61c:	461a      	mov	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3301      	adds	r3, #1
 800d626:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	3301      	adds	r3, #1
 800d62c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7ff fa34 	bl	800ca9c <SWAPBYTE>
 800d634:	4603      	mov	r3, r0
 800d636:	461a      	mov	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	3301      	adds	r3, #1
 800d640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f7ff fa27 	bl	800ca9c <SWAPBYTE>
 800d64e:	4603      	mov	r3, r0
 800d650:	461a      	mov	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	80da      	strh	r2, [r3, #6]
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d668:	2180      	movs	r1, #128	; 0x80
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fce2 	bl	800e034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d670:	2100      	movs	r1, #0
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fcde 	bl	800e034 <USBD_LL_StallEP>
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d68c:	2300      	movs	r3, #0
 800d68e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d036      	beq.n	800d704 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d69a:	6938      	ldr	r0, [r7, #16]
 800d69c:	f000 f836 	bl	800d70c <USBD_GetLen>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	68ba      	ldr	r2, [r7, #8]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	7812      	ldrb	r2, [r2, #0]
 800d6b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	2203      	movs	r2, #3
 800d6c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6ca:	7dfb      	ldrb	r3, [r7, #23]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d6d0:	e013      	b.n	800d6fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	693a      	ldr	r2, [r7, #16]
 800d6da:	7812      	ldrb	r2, [r2, #0]
 800d6dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	613b      	str	r3, [r7, #16]
    idx++;
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1e7      	bne.n	800d6d2 <USBD_GetString+0x52>
 800d702:	e000      	b.n	800d706 <USBD_GetString+0x86>
    return;
 800d704:	bf00      	nop
  }
}
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d714:	2300      	movs	r3, #0
 800d716:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d71c:	e005      	b.n	800d72a <USBD_GetLen+0x1e>
  {
    len++;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
 800d720:	3301      	adds	r3, #1
 800d722:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	3301      	adds	r3, #1
 800d728:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1f5      	bne.n	800d71e <USBD_GetLen+0x12>
  }

  return len;
 800d732:	7bfb      	ldrb	r3, [r7, #15]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2202      	movs	r2, #2
 800d750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	68ba      	ldr	r2, [r7, #8]
 800d764:	2100      	movs	r1, #0
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f000 fced 	bl	800e146 <USBD_LL_Transmit>

  return USBD_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	60f8      	str	r0, [r7, #12]
 800d77e:	60b9      	str	r1, [r7, #8]
 800d780:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	2100      	movs	r1, #0
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f000 fcdc 	bl	800e146 <USBD_LL_Transmit>

  return USBD_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2203      	movs	r2, #3
 800d7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f000 fce0 	bl	800e188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	60f8      	str	r0, [r7, #12]
 800d7da:	60b9      	str	r1, [r7, #8]
 800d7dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 fccf 	bl	800e188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2204      	movs	r2, #4
 800d800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d804:	2300      	movs	r3, #0
 800d806:	2200      	movs	r2, #0
 800d808:	2100      	movs	r1, #0
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fc9b 	bl	800e146 <USBD_LL_Transmit>

  return USBD_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b082      	sub	sp, #8
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2205      	movs	r2, #5
 800d826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d82a:	2300      	movs	r3, #0
 800d82c:	2200      	movs	r2, #0
 800d82e:	2100      	movs	r1, #0
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fca9 	bl	800e188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d844:	2201      	movs	r2, #1
 800d846:	4912      	ldr	r1, [pc, #72]	; (800d890 <MX_USB_DEVICE_Init+0x50>)
 800d848:	4812      	ldr	r0, [pc, #72]	; (800d894 <MX_USB_DEVICE_Init+0x54>)
 800d84a:	f7fe fd07 	bl	800c25c <USBD_Init>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d001      	beq.n	800d858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d854:	f7f3 ff40 	bl	80016d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d858:	490f      	ldr	r1, [pc, #60]	; (800d898 <MX_USB_DEVICE_Init+0x58>)
 800d85a:	480e      	ldr	r0, [pc, #56]	; (800d894 <MX_USB_DEVICE_Init+0x54>)
 800d85c:	f7fe fd2e 	bl	800c2bc <USBD_RegisterClass>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d866:	f7f3 ff37 	bl	80016d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d86a:	490c      	ldr	r1, [pc, #48]	; (800d89c <MX_USB_DEVICE_Init+0x5c>)
 800d86c:	4809      	ldr	r0, [pc, #36]	; (800d894 <MX_USB_DEVICE_Init+0x54>)
 800d86e:	f7fe fc1f 	bl	800c0b0 <USBD_CDC_RegisterInterface>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d001      	beq.n	800d87c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d878:	f7f3 ff2e 	bl	80016d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d87c:	4805      	ldr	r0, [pc, #20]	; (800d894 <MX_USB_DEVICE_Init+0x54>)
 800d87e:	f7fe fd53 	bl	800c328 <USBD_Start>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d001      	beq.n	800d88c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d888:	f7f3 ff26 	bl	80016d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d88c:	bf00      	nop
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	200001c0 	.word	0x200001c0
 800d894:	20004798 	.word	0x20004798
 800d898:	2000012c 	.word	0x2000012c
 800d89c:	200001ac 	.word	0x200001ac

0800d8a0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4905      	ldr	r1, [pc, #20]	; (800d8bc <CDC_Init_HS+0x1c>)
 800d8a8:	4805      	ldr	r0, [pc, #20]	; (800d8c0 <CDC_Init_HS+0x20>)
 800d8aa:	f7fe fc1b 	bl	800c0e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d8ae:	4905      	ldr	r1, [pc, #20]	; (800d8c4 <CDC_Init_HS+0x24>)
 800d8b0:	4803      	ldr	r0, [pc, #12]	; (800d8c0 <CDC_Init_HS+0x20>)
 800d8b2:	f7fe fc39 	bl	800c128 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d8b6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20005274 	.word	0x20005274
 800d8c0:	20004798 	.word	0x20004798
 800d8c4:	20004a74 	.word	0x20004a74

0800d8c8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d8cc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	6039      	str	r1, [r7, #0]
 800d8e2:	71fb      	strb	r3, [r7, #7]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d8e8:	79fb      	ldrb	r3, [r7, #7]
 800d8ea:	2b23      	cmp	r3, #35	; 0x23
 800d8ec:	d84a      	bhi.n	800d984 <CDC_Control_HS+0xac>
 800d8ee:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <CDC_Control_HS+0x1c>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d985 	.word	0x0800d985
 800d8f8:	0800d985 	.word	0x0800d985
 800d8fc:	0800d985 	.word	0x0800d985
 800d900:	0800d985 	.word	0x0800d985
 800d904:	0800d985 	.word	0x0800d985
 800d908:	0800d985 	.word	0x0800d985
 800d90c:	0800d985 	.word	0x0800d985
 800d910:	0800d985 	.word	0x0800d985
 800d914:	0800d985 	.word	0x0800d985
 800d918:	0800d985 	.word	0x0800d985
 800d91c:	0800d985 	.word	0x0800d985
 800d920:	0800d985 	.word	0x0800d985
 800d924:	0800d985 	.word	0x0800d985
 800d928:	0800d985 	.word	0x0800d985
 800d92c:	0800d985 	.word	0x0800d985
 800d930:	0800d985 	.word	0x0800d985
 800d934:	0800d985 	.word	0x0800d985
 800d938:	0800d985 	.word	0x0800d985
 800d93c:	0800d985 	.word	0x0800d985
 800d940:	0800d985 	.word	0x0800d985
 800d944:	0800d985 	.word	0x0800d985
 800d948:	0800d985 	.word	0x0800d985
 800d94c:	0800d985 	.word	0x0800d985
 800d950:	0800d985 	.word	0x0800d985
 800d954:	0800d985 	.word	0x0800d985
 800d958:	0800d985 	.word	0x0800d985
 800d95c:	0800d985 	.word	0x0800d985
 800d960:	0800d985 	.word	0x0800d985
 800d964:	0800d985 	.word	0x0800d985
 800d968:	0800d985 	.word	0x0800d985
 800d96c:	0800d985 	.word	0x0800d985
 800d970:	0800d985 	.word	0x0800d985
 800d974:	0800d985 	.word	0x0800d985
 800d978:	0800d985 	.word	0x0800d985
 800d97c:	0800d985 	.word	0x0800d985
 800d980:	0800d985 	.word	0x0800d985
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d984:	bf00      	nop
  }

  return (USBD_OK);
 800d986:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d988:	4618      	mov	r0, r3
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d99e:	6879      	ldr	r1, [r7, #4]
 800d9a0:	4805      	ldr	r0, [pc, #20]	; (800d9b8 <CDC_Receive_HS+0x24>)
 800d9a2:	f7fe fbc1 	bl	800c128 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d9a6:	4804      	ldr	r0, [pc, #16]	; (800d9b8 <CDC_Receive_HS+0x24>)
 800d9a8:	f7fe fc22 	bl	800c1f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d9ac:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20004798 	.word	0x20004798

0800d9bc <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d9cc:	4b0d      	ldr	r3, [pc, #52]	; (800da04 <CDC_Transmit_HS+0x48>)
 800d9ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e00b      	b.n	800d9fa <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800d9e2:	887b      	ldrh	r3, [r7, #2]
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	6879      	ldr	r1, [r7, #4]
 800d9e8:	4806      	ldr	r0, [pc, #24]	; (800da04 <CDC_Transmit_HS+0x48>)
 800d9ea:	f7fe fb7b 	bl	800c0e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800d9ee:	4805      	ldr	r0, [pc, #20]	; (800da04 <CDC_Transmit_HS+0x48>)
 800d9f0:	f7fe fbb8 	bl	800c164 <USBD_CDC_TransmitPacket>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	20004798 	.word	0x20004798

0800da08 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800da08:	b480      	push	{r7}
 800da0a:	b087      	sub	sp, #28
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	4613      	mov	r3, r2
 800da14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da16:	2300      	movs	r3, #0
 800da18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800da1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
	...

0800da2c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2212      	movs	r2, #18
 800da3c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800da3e:	4b03      	ldr	r3, [pc, #12]	; (800da4c <USBD_HS_DeviceDescriptor+0x20>)
}
 800da40:	4618      	mov	r0, r3
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	200001dc 	.word	0x200001dc

0800da50 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	6039      	str	r1, [r7, #0]
 800da5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	2204      	movs	r2, #4
 800da60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da62:	4b03      	ldr	r3, [pc, #12]	; (800da70 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	200001f0 	.word	0x200001f0

0800da74 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	6039      	str	r1, [r7, #0]
 800da7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da80:	79fb      	ldrb	r3, [r7, #7]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d105      	bne.n	800da92 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	4907      	ldr	r1, [pc, #28]	; (800daa8 <USBD_HS_ProductStrDescriptor+0x34>)
 800da8a:	4808      	ldr	r0, [pc, #32]	; (800daac <USBD_HS_ProductStrDescriptor+0x38>)
 800da8c:	f7ff fdf8 	bl	800d680 <USBD_GetString>
 800da90:	e004      	b.n	800da9c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	4904      	ldr	r1, [pc, #16]	; (800daa8 <USBD_HS_ProductStrDescriptor+0x34>)
 800da96:	4805      	ldr	r0, [pc, #20]	; (800daac <USBD_HS_ProductStrDescriptor+0x38>)
 800da98:	f7ff fdf2 	bl	800d680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da9c:	4b02      	ldr	r3, [pc, #8]	; (800daa8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20005a74 	.word	0x20005a74
 800daac:	0801126c 	.word	0x0801126c

0800dab0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	4603      	mov	r3, r0
 800dab8:	6039      	str	r1, [r7, #0]
 800daba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	4904      	ldr	r1, [pc, #16]	; (800dad0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800dac0:	4804      	ldr	r0, [pc, #16]	; (800dad4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800dac2:	f7ff fddd 	bl	800d680 <USBD_GetString>
  return USBD_StrDesc;
 800dac6:	4b02      	ldr	r3, [pc, #8]	; (800dad0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	20005a74 	.word	0x20005a74
 800dad4:	08011284 	.word	0x08011284

0800dad8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	4603      	mov	r3, r0
 800dae0:	6039      	str	r1, [r7, #0]
 800dae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	221a      	movs	r2, #26
 800dae8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800daea:	f000 f843 	bl	800db74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800daee:	4b02      	ldr	r3, [pc, #8]	; (800daf8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	200001f4 	.word	0x200001f4

0800dafc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	6039      	str	r1, [r7, #0]
 800db06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d105      	bne.n	800db1a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	4907      	ldr	r1, [pc, #28]	; (800db30 <USBD_HS_ConfigStrDescriptor+0x34>)
 800db12:	4808      	ldr	r0, [pc, #32]	; (800db34 <USBD_HS_ConfigStrDescriptor+0x38>)
 800db14:	f7ff fdb4 	bl	800d680 <USBD_GetString>
 800db18:	e004      	b.n	800db24 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	4904      	ldr	r1, [pc, #16]	; (800db30 <USBD_HS_ConfigStrDescriptor+0x34>)
 800db1e:	4805      	ldr	r0, [pc, #20]	; (800db34 <USBD_HS_ConfigStrDescriptor+0x38>)
 800db20:	f7ff fdae 	bl	800d680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db24:	4b02      	ldr	r3, [pc, #8]	; (800db30 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800db26:	4618      	mov	r0, r3
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20005a74 	.word	0x20005a74
 800db34:	08011298 	.word	0x08011298

0800db38 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	6039      	str	r1, [r7, #0]
 800db42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db44:	79fb      	ldrb	r3, [r7, #7]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d105      	bne.n	800db56 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800db4a:	683a      	ldr	r2, [r7, #0]
 800db4c:	4907      	ldr	r1, [pc, #28]	; (800db6c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800db4e:	4808      	ldr	r0, [pc, #32]	; (800db70 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800db50:	f7ff fd96 	bl	800d680 <USBD_GetString>
 800db54:	e004      	b.n	800db60 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	4904      	ldr	r1, [pc, #16]	; (800db6c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800db5a:	4805      	ldr	r0, [pc, #20]	; (800db70 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800db5c:	f7ff fd90 	bl	800d680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db60:	4b02      	ldr	r3, [pc, #8]	; (800db6c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800db62:	4618      	mov	r0, r3
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	20005a74 	.word	0x20005a74
 800db70:	080112a4 	.word	0x080112a4

0800db74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db7a:	4b0f      	ldr	r3, [pc, #60]	; (800dbb8 <Get_SerialNum+0x44>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db80:	4b0e      	ldr	r3, [pc, #56]	; (800dbbc <Get_SerialNum+0x48>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db86:	4b0e      	ldr	r3, [pc, #56]	; (800dbc0 <Get_SerialNum+0x4c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4413      	add	r3, r2
 800db92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d009      	beq.n	800dbae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db9a:	2208      	movs	r2, #8
 800db9c:	4909      	ldr	r1, [pc, #36]	; (800dbc4 <Get_SerialNum+0x50>)
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f000 f814 	bl	800dbcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dba4:	2204      	movs	r2, #4
 800dba6:	4908      	ldr	r1, [pc, #32]	; (800dbc8 <Get_SerialNum+0x54>)
 800dba8:	68b8      	ldr	r0, [r7, #8]
 800dbaa:	f000 f80f 	bl	800dbcc <IntToUnicode>
  }
}
 800dbae:	bf00      	nop
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	1fff7a10 	.word	0x1fff7a10
 800dbbc:	1fff7a14 	.word	0x1fff7a14
 800dbc0:	1fff7a18 	.word	0x1fff7a18
 800dbc4:	200001f6 	.word	0x200001f6
 800dbc8:	20000206 	.word	0x20000206

0800dbcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dbde:	2300      	movs	r3, #0
 800dbe0:	75fb      	strb	r3, [r7, #23]
 800dbe2:	e027      	b.n	800dc34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	0f1b      	lsrs	r3, r3, #28
 800dbe8:	2b09      	cmp	r3, #9
 800dbea:	d80b      	bhi.n	800dc04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	0f1b      	lsrs	r3, r3, #28
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	005b      	lsls	r3, r3, #1
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	440b      	add	r3, r1
 800dbfc:	3230      	adds	r2, #48	; 0x30
 800dbfe:	b2d2      	uxtb	r2, r2
 800dc00:	701a      	strb	r2, [r3, #0]
 800dc02:	e00a      	b.n	800dc1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	0f1b      	lsrs	r3, r3, #28
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	7dfb      	ldrb	r3, [r7, #23]
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	4619      	mov	r1, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	440b      	add	r3, r1
 800dc14:	3237      	adds	r2, #55	; 0x37
 800dc16:	b2d2      	uxtb	r2, r2
 800dc18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	011b      	lsls	r3, r3, #4
 800dc1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	3301      	adds	r3, #1
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	4413      	add	r3, r2
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	3301      	adds	r3, #1
 800dc32:	75fb      	strb	r3, [r7, #23]
 800dc34:	7dfa      	ldrb	r2, [r7, #23]
 800dc36:	79fb      	ldrb	r3, [r7, #7]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d3d3      	bcc.n	800dbe4 <IntToUnicode+0x18>
  }
}
 800dc3c:	bf00      	nop
 800dc3e:	bf00      	nop
 800dc40:	371c      	adds	r7, #28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
	...

0800dc4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08a      	sub	sp, #40	; 0x28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc54:	f107 0314 	add.w	r3, r7, #20
 800dc58:	2200      	movs	r2, #0
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	605a      	str	r2, [r3, #4]
 800dc5e:	609a      	str	r2, [r3, #8]
 800dc60:	60da      	str	r2, [r3, #12]
 800dc62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a1d      	ldr	r2, [pc, #116]	; (800dce0 <HAL_PCD_MspInit+0x94>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d134      	bne.n	800dcd8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc6e:	2300      	movs	r3, #0
 800dc70:	613b      	str	r3, [r7, #16]
 800dc72:	4b1c      	ldr	r3, [pc, #112]	; (800dce4 <HAL_PCD_MspInit+0x98>)
 800dc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc76:	4a1b      	ldr	r2, [pc, #108]	; (800dce4 <HAL_PCD_MspInit+0x98>)
 800dc78:	f043 0302 	orr.w	r3, r3, #2
 800dc7c:	6313      	str	r3, [r2, #48]	; 0x30
 800dc7e:	4b19      	ldr	r3, [pc, #100]	; (800dce4 <HAL_PCD_MspInit+0x98>)
 800dc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc82:	f003 0302 	and.w	r3, r3, #2
 800dc86:	613b      	str	r3, [r7, #16]
 800dc88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800dc8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800dc8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc90:	2302      	movs	r3, #2
 800dc92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc94:	2300      	movs	r3, #0
 800dc96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc98:	2303      	movs	r3, #3
 800dc9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dc9c:	230c      	movs	r3, #12
 800dc9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dca0:	f107 0314 	add.w	r3, r7, #20
 800dca4:	4619      	mov	r1, r3
 800dca6:	4810      	ldr	r0, [pc, #64]	; (800dce8 <HAL_PCD_MspInit+0x9c>)
 800dca8:	f7f6 fc3c 	bl	8004524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dcac:	2300      	movs	r3, #0
 800dcae:	60fb      	str	r3, [r7, #12]
 800dcb0:	4b0c      	ldr	r3, [pc, #48]	; (800dce4 <HAL_PCD_MspInit+0x98>)
 800dcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb4:	4a0b      	ldr	r2, [pc, #44]	; (800dce4 <HAL_PCD_MspInit+0x98>)
 800dcb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcba:	6313      	str	r3, [r2, #48]	; 0x30
 800dcbc:	4b09      	ldr	r3, [pc, #36]	; (800dce4 <HAL_PCD_MspInit+0x98>)
 800dcbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800dcc8:	2200      	movs	r2, #0
 800dcca:	2105      	movs	r1, #5
 800dccc:	204d      	movs	r0, #77	; 0x4d
 800dcce:	f7f5 ff7b 	bl	8003bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dcd2:	204d      	movs	r0, #77	; 0x4d
 800dcd4:	f7f5 ff94 	bl	8003c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dcd8:	bf00      	nop
 800dcda:	3728      	adds	r7, #40	; 0x28
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	40040000 	.word	0x40040000
 800dce4:	40023800 	.word	0x40023800
 800dce8:	40020400 	.word	0x40020400

0800dcec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dd00:	4619      	mov	r1, r3
 800dd02:	4610      	mov	r0, r2
 800dd04:	f7fe fb5d 	bl	800c3c2 <USBD_LL_SetupStage>
}
 800dd08:	bf00      	nop
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dd22:	78fa      	ldrb	r2, [r7, #3]
 800dd24:	6879      	ldr	r1, [r7, #4]
 800dd26:	4613      	mov	r3, r2
 800dd28:	00db      	lsls	r3, r3, #3
 800dd2a:	4413      	add	r3, r2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	440b      	add	r3, r1
 800dd30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	78fb      	ldrb	r3, [r7, #3]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f7fe fb97 	bl	800c46c <USBD_LL_DataOutStage>
}
 800dd3e:	bf00      	nop
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b082      	sub	sp, #8
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	460b      	mov	r3, r1
 800dd50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dd58:	78fa      	ldrb	r2, [r7, #3]
 800dd5a:	6879      	ldr	r1, [r7, #4]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	00db      	lsls	r3, r3, #3
 800dd60:	4413      	add	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	440b      	add	r3, r1
 800dd66:	334c      	adds	r3, #76	; 0x4c
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	78fb      	ldrb	r3, [r7, #3]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	f7fe fc30 	bl	800c5d2 <USBD_LL_DataInStage>
}
 800dd72:	bf00      	nop
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b082      	sub	sp, #8
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fe fd64 	bl	800c856 <USBD_LL_SOF>
}
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}

0800dd96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b084      	sub	sp, #16
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d102      	bne.n	800ddb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	73fb      	strb	r3, [r7, #15]
 800ddae:	e008      	b.n	800ddc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d102      	bne.n	800ddbe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	73fb      	strb	r3, [r7, #15]
 800ddbc:	e001      	b.n	800ddc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ddbe:	f7f3 fc8b 	bl	80016d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddc8:	7bfa      	ldrb	r2, [r7, #15]
 800ddca:	4611      	mov	r1, r2
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fe fd04 	bl	800c7da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe fcac 	bl	800c736 <USBD_LL_Reset>
}
 800ddde:	bf00      	nop
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
	...

0800dde8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fe fcff 	bl	800c7fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	6812      	ldr	r2, [r2, #0]
 800de0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de0e:	f043 0301 	orr.w	r3, r3, #1
 800de12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a1b      	ldr	r3, [r3, #32]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d005      	beq.n	800de28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de1c:	4b04      	ldr	r3, [pc, #16]	; (800de30 <HAL_PCD_SuspendCallback+0x48>)
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	4a03      	ldr	r2, [pc, #12]	; (800de30 <HAL_PCD_SuspendCallback+0x48>)
 800de22:	f043 0306 	orr.w	r3, r3, #6
 800de26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800de28:	bf00      	nop
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	e000ed00 	.word	0xe000ed00

0800de34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe fcef 	bl	800c826 <USBD_LL_Resume>
}
 800de48:	bf00      	nop
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de62:	78fa      	ldrb	r2, [r7, #3]
 800de64:	4611      	mov	r1, r2
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe fd47 	bl	800c8fa <USBD_LL_IsoOUTIncomplete>
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	460b      	mov	r3, r1
 800de7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de86:	78fa      	ldrb	r2, [r7, #3]
 800de88:	4611      	mov	r1, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe fd03 	bl	800c896 <USBD_LL_IsoINIncomplete>
}
 800de90:	bf00      	nop
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fe fd59 	bl	800c95e <USBD_LL_DevConnected>
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe fd56 	bl	800c974 <USBD_LL_DevDisconnected>
}
 800dec8:	bf00      	nop
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d140      	bne.n	800df62 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800dee0:	4a22      	ldr	r2, [pc, #136]	; (800df6c <USBD_LL_Init+0x9c>)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4a20      	ldr	r2, [pc, #128]	; (800df6c <USBD_LL_Init+0x9c>)
 800deec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800def0:	4b1e      	ldr	r3, [pc, #120]	; (800df6c <USBD_LL_Init+0x9c>)
 800def2:	4a1f      	ldr	r2, [pc, #124]	; (800df70 <USBD_LL_Init+0xa0>)
 800def4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800def6:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <USBD_LL_Init+0x9c>)
 800def8:	2206      	movs	r2, #6
 800defa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800defc:	4b1b      	ldr	r3, [pc, #108]	; (800df6c <USBD_LL_Init+0x9c>)
 800defe:	2202      	movs	r2, #2
 800df00:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800df02:	4b1a      	ldr	r3, [pc, #104]	; (800df6c <USBD_LL_Init+0x9c>)
 800df04:	2200      	movs	r2, #0
 800df06:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800df08:	4b18      	ldr	r3, [pc, #96]	; (800df6c <USBD_LL_Init+0x9c>)
 800df0a:	2202      	movs	r2, #2
 800df0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800df0e:	4b17      	ldr	r3, [pc, #92]	; (800df6c <USBD_LL_Init+0x9c>)
 800df10:	2200      	movs	r2, #0
 800df12:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800df14:	4b15      	ldr	r3, [pc, #84]	; (800df6c <USBD_LL_Init+0x9c>)
 800df16:	2200      	movs	r2, #0
 800df18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800df1a:	4b14      	ldr	r3, [pc, #80]	; (800df6c <USBD_LL_Init+0x9c>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800df20:	4b12      	ldr	r3, [pc, #72]	; (800df6c <USBD_LL_Init+0x9c>)
 800df22:	2200      	movs	r2, #0
 800df24:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800df26:	4b11      	ldr	r3, [pc, #68]	; (800df6c <USBD_LL_Init+0x9c>)
 800df28:	2200      	movs	r2, #0
 800df2a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800df2c:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <USBD_LL_Init+0x9c>)
 800df2e:	2200      	movs	r2, #0
 800df30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800df32:	480e      	ldr	r0, [pc, #56]	; (800df6c <USBD_LL_Init+0x9c>)
 800df34:	f7f7 f8a1 	bl	800507a <HAL_PCD_Init>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800df3e:	f7f3 fbcb 	bl	80016d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800df42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df46:	4809      	ldr	r0, [pc, #36]	; (800df6c <USBD_LL_Init+0x9c>)
 800df48:	f7f8 faf7 	bl	800653a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800df4c:	2280      	movs	r2, #128	; 0x80
 800df4e:	2100      	movs	r1, #0
 800df50:	4806      	ldr	r0, [pc, #24]	; (800df6c <USBD_LL_Init+0x9c>)
 800df52:	f7f8 faab 	bl	80064ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800df56:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800df5a:	2101      	movs	r1, #1
 800df5c:	4803      	ldr	r0, [pc, #12]	; (800df6c <USBD_LL_Init+0x9c>)
 800df5e:	f7f8 faa5 	bl	80064ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20005c74 	.word	0x20005c74
 800df70:	40040000 	.word	0x40040000

0800df74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7f7 f992 	bl	80052b4 <HAL_PCD_Start>
 800df90:	4603      	mov	r3, r0
 800df92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df94:	7bfb      	ldrb	r3, [r7, #15]
 800df96:	4618      	mov	r0, r3
 800df98:	f000 f942 	bl	800e220 <USBD_Get_USB_Status>
 800df9c:	4603      	mov	r3, r0
 800df9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfa0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	4608      	mov	r0, r1
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	4603      	mov	r3, r0
 800dfba:	70fb      	strb	r3, [r7, #3]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70bb      	strb	r3, [r7, #2]
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dfd2:	78bb      	ldrb	r3, [r7, #2]
 800dfd4:	883a      	ldrh	r2, [r7, #0]
 800dfd6:	78f9      	ldrb	r1, [r7, #3]
 800dfd8:	f7f7 fe63 	bl	8005ca2 <HAL_PCD_EP_Open>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f000 f91c 	bl	800e220 <USBD_Get_USB_Status>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	460b      	mov	r3, r1
 800e000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e010:	78fa      	ldrb	r2, [r7, #3]
 800e012:	4611      	mov	r1, r2
 800e014:	4618      	mov	r0, r3
 800e016:	f7f7 feac 	bl	8005d72 <HAL_PCD_EP_Close>
 800e01a:	4603      	mov	r3, r0
 800e01c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
 800e020:	4618      	mov	r0, r3
 800e022:	f000 f8fd 	bl	800e220 <USBD_Get_USB_Status>
 800e026:	4603      	mov	r3, r0
 800e028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e02a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e040:	2300      	movs	r3, #0
 800e042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e044:	2300      	movs	r3, #0
 800e046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e04e:	78fa      	ldrb	r2, [r7, #3]
 800e050:	4611      	mov	r1, r2
 800e052:	4618      	mov	r0, r3
 800e054:	f7f7 ff84 	bl	8005f60 <HAL_PCD_EP_SetStall>
 800e058:	4603      	mov	r3, r0
 800e05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f8de 	bl	800e220 <USBD_Get_USB_Status>
 800e064:	4603      	mov	r3, r0
 800e066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e068:	7bbb      	ldrb	r3, [r7, #14]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	460b      	mov	r3, r1
 800e07c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e08c:	78fa      	ldrb	r2, [r7, #3]
 800e08e:	4611      	mov	r1, r2
 800e090:	4618      	mov	r0, r3
 800e092:	f7f7 ffc9 	bl	8006028 <HAL_PCD_EP_ClrStall>
 800e096:	4603      	mov	r3, r0
 800e098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f000 f8bf 	bl	800e220 <USBD_Get_USB_Status>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e0c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	da0b      	bge.n	800e0e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0d2:	68f9      	ldr	r1, [r7, #12]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	4413      	add	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	440b      	add	r3, r1
 800e0de:	333e      	adds	r3, #62	; 0x3e
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	e00b      	b.n	800e0fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0e4:	78fb      	ldrb	r3, [r7, #3]
 800e0e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0ea:	68f9      	ldr	r1, [r7, #12]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	4413      	add	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	440b      	add	r3, r1
 800e0f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e0fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	460b      	mov	r3, r1
 800e112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e118:	2300      	movs	r3, #0
 800e11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e122:	78fa      	ldrb	r2, [r7, #3]
 800e124:	4611      	mov	r1, r2
 800e126:	4618      	mov	r0, r3
 800e128:	f7f7 fd96 	bl	8005c58 <HAL_PCD_SetAddress>
 800e12c:	4603      	mov	r3, r0
 800e12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e130:	7bfb      	ldrb	r3, [r7, #15]
 800e132:	4618      	mov	r0, r3
 800e134:	f000 f874 	bl	800e220 <USBD_Get_USB_Status>
 800e138:	4603      	mov	r3, r0
 800e13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b086      	sub	sp, #24
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	60f8      	str	r0, [r7, #12]
 800e14e:	607a      	str	r2, [r7, #4]
 800e150:	603b      	str	r3, [r7, #0]
 800e152:	460b      	mov	r3, r1
 800e154:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e164:	7af9      	ldrb	r1, [r7, #11]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	f7f7 feaf 	bl	8005ecc <HAL_PCD_EP_Transmit>
 800e16e:	4603      	mov	r3, r0
 800e170:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e172:	7dfb      	ldrb	r3, [r7, #23]
 800e174:	4618      	mov	r0, r3
 800e176:	f000 f853 	bl	800e220 <USBD_Get_USB_Status>
 800e17a:	4603      	mov	r3, r0
 800e17c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e17e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	607a      	str	r2, [r7, #4]
 800e192:	603b      	str	r3, [r7, #0]
 800e194:	460b      	mov	r3, r1
 800e196:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e1a6:	7af9      	ldrb	r1, [r7, #11]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	f7f7 fe2b 	bl	8005e06 <HAL_PCD_EP_Receive>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1b4:	7dfb      	ldrb	r3, [r7, #23]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 f832 	bl	800e220 <USBD_Get_USB_Status>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b082      	sub	sp, #8
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1dc:	78fa      	ldrb	r2, [r7, #3]
 800e1de:	4611      	mov	r1, r2
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f7 fe5b 	bl	8005e9c <HAL_PCD_EP_GetRxCount>
 800e1e6:	4603      	mov	r3, r0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e1f8:	4b03      	ldr	r3, [pc, #12]	; (800e208 <USBD_static_malloc+0x18>)
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	20006180 	.word	0x20006180

0800e20c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]

}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e220:	b480      	push	{r7}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
 800e226:	4603      	mov	r3, r0
 800e228:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e22a:	2300      	movs	r3, #0
 800e22c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e22e:	79fb      	ldrb	r3, [r7, #7]
 800e230:	2b03      	cmp	r3, #3
 800e232:	d817      	bhi.n	800e264 <USBD_Get_USB_Status+0x44>
 800e234:	a201      	add	r2, pc, #4	; (adr r2, 800e23c <USBD_Get_USB_Status+0x1c>)
 800e236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23a:	bf00      	nop
 800e23c:	0800e24d 	.word	0x0800e24d
 800e240:	0800e253 	.word	0x0800e253
 800e244:	0800e259 	.word	0x0800e259
 800e248:	0800e25f 	.word	0x0800e25f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e24c:	2300      	movs	r3, #0
 800e24e:	73fb      	strb	r3, [r7, #15]
    break;
 800e250:	e00b      	b.n	800e26a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e252:	2303      	movs	r3, #3
 800e254:	73fb      	strb	r3, [r7, #15]
    break;
 800e256:	e008      	b.n	800e26a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e258:	2301      	movs	r3, #1
 800e25a:	73fb      	strb	r3, [r7, #15]
    break;
 800e25c:	e005      	b.n	800e26a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e25e:	2303      	movs	r3, #3
 800e260:	73fb      	strb	r3, [r7, #15]
    break;
 800e262:	e002      	b.n	800e26a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e264:	2303      	movs	r3, #3
 800e266:	73fb      	strb	r3, [r7, #15]
    break;
 800e268:	bf00      	nop
  }
  return usb_status;
 800e26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3714      	adds	r7, #20
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <__errno>:
 800e278:	4b01      	ldr	r3, [pc, #4]	; (800e280 <__errno+0x8>)
 800e27a:	6818      	ldr	r0, [r3, #0]
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	20000210 	.word	0x20000210

0800e284 <std>:
 800e284:	2300      	movs	r3, #0
 800e286:	b510      	push	{r4, lr}
 800e288:	4604      	mov	r4, r0
 800e28a:	e9c0 3300 	strd	r3, r3, [r0]
 800e28e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e292:	6083      	str	r3, [r0, #8]
 800e294:	8181      	strh	r1, [r0, #12]
 800e296:	6643      	str	r3, [r0, #100]	; 0x64
 800e298:	81c2      	strh	r2, [r0, #14]
 800e29a:	6183      	str	r3, [r0, #24]
 800e29c:	4619      	mov	r1, r3
 800e29e:	2208      	movs	r2, #8
 800e2a0:	305c      	adds	r0, #92	; 0x5c
 800e2a2:	f000 f91a 	bl	800e4da <memset>
 800e2a6:	4b05      	ldr	r3, [pc, #20]	; (800e2bc <std+0x38>)
 800e2a8:	6263      	str	r3, [r4, #36]	; 0x24
 800e2aa:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <std+0x3c>)
 800e2ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2ae:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <std+0x40>)
 800e2b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2b2:	4b05      	ldr	r3, [pc, #20]	; (800e2c8 <std+0x44>)
 800e2b4:	6224      	str	r4, [r4, #32]
 800e2b6:	6323      	str	r3, [r4, #48]	; 0x30
 800e2b8:	bd10      	pop	{r4, pc}
 800e2ba:	bf00      	nop
 800e2bc:	0800f01d 	.word	0x0800f01d
 800e2c0:	0800f03f 	.word	0x0800f03f
 800e2c4:	0800f077 	.word	0x0800f077
 800e2c8:	0800f09b 	.word	0x0800f09b

0800e2cc <_cleanup_r>:
 800e2cc:	4901      	ldr	r1, [pc, #4]	; (800e2d4 <_cleanup_r+0x8>)
 800e2ce:	f000 b8af 	b.w	800e430 <_fwalk_reent>
 800e2d2:	bf00      	nop
 800e2d4:	0800fee9 	.word	0x0800fee9

0800e2d8 <__sfmoreglue>:
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	2268      	movs	r2, #104	; 0x68
 800e2dc:	1e4d      	subs	r5, r1, #1
 800e2de:	4355      	muls	r5, r2
 800e2e0:	460e      	mov	r6, r1
 800e2e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2e6:	f000 f921 	bl	800e52c <_malloc_r>
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	b140      	cbz	r0, 800e300 <__sfmoreglue+0x28>
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	e9c0 1600 	strd	r1, r6, [r0]
 800e2f4:	300c      	adds	r0, #12
 800e2f6:	60a0      	str	r0, [r4, #8]
 800e2f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2fc:	f000 f8ed 	bl	800e4da <memset>
 800e300:	4620      	mov	r0, r4
 800e302:	bd70      	pop	{r4, r5, r6, pc}

0800e304 <__sfp_lock_acquire>:
 800e304:	4801      	ldr	r0, [pc, #4]	; (800e30c <__sfp_lock_acquire+0x8>)
 800e306:	f000 b8d8 	b.w	800e4ba <__retarget_lock_acquire_recursive>
 800e30a:	bf00      	nop
 800e30c:	200063a1 	.word	0x200063a1

0800e310 <__sfp_lock_release>:
 800e310:	4801      	ldr	r0, [pc, #4]	; (800e318 <__sfp_lock_release+0x8>)
 800e312:	f000 b8d3 	b.w	800e4bc <__retarget_lock_release_recursive>
 800e316:	bf00      	nop
 800e318:	200063a1 	.word	0x200063a1

0800e31c <__sinit_lock_acquire>:
 800e31c:	4801      	ldr	r0, [pc, #4]	; (800e324 <__sinit_lock_acquire+0x8>)
 800e31e:	f000 b8cc 	b.w	800e4ba <__retarget_lock_acquire_recursive>
 800e322:	bf00      	nop
 800e324:	200063a2 	.word	0x200063a2

0800e328 <__sinit_lock_release>:
 800e328:	4801      	ldr	r0, [pc, #4]	; (800e330 <__sinit_lock_release+0x8>)
 800e32a:	f000 b8c7 	b.w	800e4bc <__retarget_lock_release_recursive>
 800e32e:	bf00      	nop
 800e330:	200063a2 	.word	0x200063a2

0800e334 <__sinit>:
 800e334:	b510      	push	{r4, lr}
 800e336:	4604      	mov	r4, r0
 800e338:	f7ff fff0 	bl	800e31c <__sinit_lock_acquire>
 800e33c:	69a3      	ldr	r3, [r4, #24]
 800e33e:	b11b      	cbz	r3, 800e348 <__sinit+0x14>
 800e340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e344:	f7ff bff0 	b.w	800e328 <__sinit_lock_release>
 800e348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e34c:	6523      	str	r3, [r4, #80]	; 0x50
 800e34e:	4b13      	ldr	r3, [pc, #76]	; (800e39c <__sinit+0x68>)
 800e350:	4a13      	ldr	r2, [pc, #76]	; (800e3a0 <__sinit+0x6c>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	62a2      	str	r2, [r4, #40]	; 0x28
 800e356:	42a3      	cmp	r3, r4
 800e358:	bf04      	itt	eq
 800e35a:	2301      	moveq	r3, #1
 800e35c:	61a3      	streq	r3, [r4, #24]
 800e35e:	4620      	mov	r0, r4
 800e360:	f000 f820 	bl	800e3a4 <__sfp>
 800e364:	6060      	str	r0, [r4, #4]
 800e366:	4620      	mov	r0, r4
 800e368:	f000 f81c 	bl	800e3a4 <__sfp>
 800e36c:	60a0      	str	r0, [r4, #8]
 800e36e:	4620      	mov	r0, r4
 800e370:	f000 f818 	bl	800e3a4 <__sfp>
 800e374:	2200      	movs	r2, #0
 800e376:	60e0      	str	r0, [r4, #12]
 800e378:	2104      	movs	r1, #4
 800e37a:	6860      	ldr	r0, [r4, #4]
 800e37c:	f7ff ff82 	bl	800e284 <std>
 800e380:	68a0      	ldr	r0, [r4, #8]
 800e382:	2201      	movs	r2, #1
 800e384:	2109      	movs	r1, #9
 800e386:	f7ff ff7d 	bl	800e284 <std>
 800e38a:	68e0      	ldr	r0, [r4, #12]
 800e38c:	2202      	movs	r2, #2
 800e38e:	2112      	movs	r1, #18
 800e390:	f7ff ff78 	bl	800e284 <std>
 800e394:	2301      	movs	r3, #1
 800e396:	61a3      	str	r3, [r4, #24]
 800e398:	e7d2      	b.n	800e340 <__sinit+0xc>
 800e39a:	bf00      	nop
 800e39c:	08013cc4 	.word	0x08013cc4
 800e3a0:	0800e2cd 	.word	0x0800e2cd

0800e3a4 <__sfp>:
 800e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a6:	4607      	mov	r7, r0
 800e3a8:	f7ff ffac 	bl	800e304 <__sfp_lock_acquire>
 800e3ac:	4b1e      	ldr	r3, [pc, #120]	; (800e428 <__sfp+0x84>)
 800e3ae:	681e      	ldr	r6, [r3, #0]
 800e3b0:	69b3      	ldr	r3, [r6, #24]
 800e3b2:	b913      	cbnz	r3, 800e3ba <__sfp+0x16>
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f7ff ffbd 	bl	800e334 <__sinit>
 800e3ba:	3648      	adds	r6, #72	; 0x48
 800e3bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	d503      	bpl.n	800e3cc <__sfp+0x28>
 800e3c4:	6833      	ldr	r3, [r6, #0]
 800e3c6:	b30b      	cbz	r3, 800e40c <__sfp+0x68>
 800e3c8:	6836      	ldr	r6, [r6, #0]
 800e3ca:	e7f7      	b.n	800e3bc <__sfp+0x18>
 800e3cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3d0:	b9d5      	cbnz	r5, 800e408 <__sfp+0x64>
 800e3d2:	4b16      	ldr	r3, [pc, #88]	; (800e42c <__sfp+0x88>)
 800e3d4:	60e3      	str	r3, [r4, #12]
 800e3d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3da:	6665      	str	r5, [r4, #100]	; 0x64
 800e3dc:	f000 f86c 	bl	800e4b8 <__retarget_lock_init_recursive>
 800e3e0:	f7ff ff96 	bl	800e310 <__sfp_lock_release>
 800e3e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3ec:	6025      	str	r5, [r4, #0]
 800e3ee:	61a5      	str	r5, [r4, #24]
 800e3f0:	2208      	movs	r2, #8
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3f8:	f000 f86f 	bl	800e4da <memset>
 800e3fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e404:	4620      	mov	r0, r4
 800e406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e408:	3468      	adds	r4, #104	; 0x68
 800e40a:	e7d9      	b.n	800e3c0 <__sfp+0x1c>
 800e40c:	2104      	movs	r1, #4
 800e40e:	4638      	mov	r0, r7
 800e410:	f7ff ff62 	bl	800e2d8 <__sfmoreglue>
 800e414:	4604      	mov	r4, r0
 800e416:	6030      	str	r0, [r6, #0]
 800e418:	2800      	cmp	r0, #0
 800e41a:	d1d5      	bne.n	800e3c8 <__sfp+0x24>
 800e41c:	f7ff ff78 	bl	800e310 <__sfp_lock_release>
 800e420:	230c      	movs	r3, #12
 800e422:	603b      	str	r3, [r7, #0]
 800e424:	e7ee      	b.n	800e404 <__sfp+0x60>
 800e426:	bf00      	nop
 800e428:	08013cc4 	.word	0x08013cc4
 800e42c:	ffff0001 	.word	0xffff0001

0800e430 <_fwalk_reent>:
 800e430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e434:	4606      	mov	r6, r0
 800e436:	4688      	mov	r8, r1
 800e438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e43c:	2700      	movs	r7, #0
 800e43e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e442:	f1b9 0901 	subs.w	r9, r9, #1
 800e446:	d505      	bpl.n	800e454 <_fwalk_reent+0x24>
 800e448:	6824      	ldr	r4, [r4, #0]
 800e44a:	2c00      	cmp	r4, #0
 800e44c:	d1f7      	bne.n	800e43e <_fwalk_reent+0xe>
 800e44e:	4638      	mov	r0, r7
 800e450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e454:	89ab      	ldrh	r3, [r5, #12]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d907      	bls.n	800e46a <_fwalk_reent+0x3a>
 800e45a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e45e:	3301      	adds	r3, #1
 800e460:	d003      	beq.n	800e46a <_fwalk_reent+0x3a>
 800e462:	4629      	mov	r1, r5
 800e464:	4630      	mov	r0, r6
 800e466:	47c0      	blx	r8
 800e468:	4307      	orrs	r7, r0
 800e46a:	3568      	adds	r5, #104	; 0x68
 800e46c:	e7e9      	b.n	800e442 <_fwalk_reent+0x12>
	...

0800e470 <__libc_init_array>:
 800e470:	b570      	push	{r4, r5, r6, lr}
 800e472:	4d0d      	ldr	r5, [pc, #52]	; (800e4a8 <__libc_init_array+0x38>)
 800e474:	4c0d      	ldr	r4, [pc, #52]	; (800e4ac <__libc_init_array+0x3c>)
 800e476:	1b64      	subs	r4, r4, r5
 800e478:	10a4      	asrs	r4, r4, #2
 800e47a:	2600      	movs	r6, #0
 800e47c:	42a6      	cmp	r6, r4
 800e47e:	d109      	bne.n	800e494 <__libc_init_array+0x24>
 800e480:	4d0b      	ldr	r5, [pc, #44]	; (800e4b0 <__libc_init_array+0x40>)
 800e482:	4c0c      	ldr	r4, [pc, #48]	; (800e4b4 <__libc_init_array+0x44>)
 800e484:	f002 fe76 	bl	8011174 <_init>
 800e488:	1b64      	subs	r4, r4, r5
 800e48a:	10a4      	asrs	r4, r4, #2
 800e48c:	2600      	movs	r6, #0
 800e48e:	42a6      	cmp	r6, r4
 800e490:	d105      	bne.n	800e49e <__libc_init_array+0x2e>
 800e492:	bd70      	pop	{r4, r5, r6, pc}
 800e494:	f855 3b04 	ldr.w	r3, [r5], #4
 800e498:	4798      	blx	r3
 800e49a:	3601      	adds	r6, #1
 800e49c:	e7ee      	b.n	800e47c <__libc_init_array+0xc>
 800e49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4a2:	4798      	blx	r3
 800e4a4:	3601      	adds	r6, #1
 800e4a6:	e7f2      	b.n	800e48e <__libc_init_array+0x1e>
 800e4a8:	08014044 	.word	0x08014044
 800e4ac:	08014044 	.word	0x08014044
 800e4b0:	08014044 	.word	0x08014044
 800e4b4:	08014048 	.word	0x08014048

0800e4b8 <__retarget_lock_init_recursive>:
 800e4b8:	4770      	bx	lr

0800e4ba <__retarget_lock_acquire_recursive>:
 800e4ba:	4770      	bx	lr

0800e4bc <__retarget_lock_release_recursive>:
 800e4bc:	4770      	bx	lr

0800e4be <memcpy>:
 800e4be:	440a      	add	r2, r1
 800e4c0:	4291      	cmp	r1, r2
 800e4c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4c6:	d100      	bne.n	800e4ca <memcpy+0xc>
 800e4c8:	4770      	bx	lr
 800e4ca:	b510      	push	{r4, lr}
 800e4cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4d4:	4291      	cmp	r1, r2
 800e4d6:	d1f9      	bne.n	800e4cc <memcpy+0xe>
 800e4d8:	bd10      	pop	{r4, pc}

0800e4da <memset>:
 800e4da:	4402      	add	r2, r0
 800e4dc:	4603      	mov	r3, r0
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d100      	bne.n	800e4e4 <memset+0xa>
 800e4e2:	4770      	bx	lr
 800e4e4:	f803 1b01 	strb.w	r1, [r3], #1
 800e4e8:	e7f9      	b.n	800e4de <memset+0x4>
	...

0800e4ec <sbrk_aligned>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	4e0e      	ldr	r6, [pc, #56]	; (800e528 <sbrk_aligned+0x3c>)
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	6831      	ldr	r1, [r6, #0]
 800e4f4:	4605      	mov	r5, r0
 800e4f6:	b911      	cbnz	r1, 800e4fe <sbrk_aligned+0x12>
 800e4f8:	f000 fd60 	bl	800efbc <_sbrk_r>
 800e4fc:	6030      	str	r0, [r6, #0]
 800e4fe:	4621      	mov	r1, r4
 800e500:	4628      	mov	r0, r5
 800e502:	f000 fd5b 	bl	800efbc <_sbrk_r>
 800e506:	1c43      	adds	r3, r0, #1
 800e508:	d00a      	beq.n	800e520 <sbrk_aligned+0x34>
 800e50a:	1cc4      	adds	r4, r0, #3
 800e50c:	f024 0403 	bic.w	r4, r4, #3
 800e510:	42a0      	cmp	r0, r4
 800e512:	d007      	beq.n	800e524 <sbrk_aligned+0x38>
 800e514:	1a21      	subs	r1, r4, r0
 800e516:	4628      	mov	r0, r5
 800e518:	f000 fd50 	bl	800efbc <_sbrk_r>
 800e51c:	3001      	adds	r0, #1
 800e51e:	d101      	bne.n	800e524 <sbrk_aligned+0x38>
 800e520:	f04f 34ff 	mov.w	r4, #4294967295
 800e524:	4620      	mov	r0, r4
 800e526:	bd70      	pop	{r4, r5, r6, pc}
 800e528:	200063a8 	.word	0x200063a8

0800e52c <_malloc_r>:
 800e52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e530:	1ccd      	adds	r5, r1, #3
 800e532:	f025 0503 	bic.w	r5, r5, #3
 800e536:	3508      	adds	r5, #8
 800e538:	2d0c      	cmp	r5, #12
 800e53a:	bf38      	it	cc
 800e53c:	250c      	movcc	r5, #12
 800e53e:	2d00      	cmp	r5, #0
 800e540:	4607      	mov	r7, r0
 800e542:	db01      	blt.n	800e548 <_malloc_r+0x1c>
 800e544:	42a9      	cmp	r1, r5
 800e546:	d905      	bls.n	800e554 <_malloc_r+0x28>
 800e548:	230c      	movs	r3, #12
 800e54a:	603b      	str	r3, [r7, #0]
 800e54c:	2600      	movs	r6, #0
 800e54e:	4630      	mov	r0, r6
 800e550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e554:	4e2e      	ldr	r6, [pc, #184]	; (800e610 <_malloc_r+0xe4>)
 800e556:	f001 fd21 	bl	800ff9c <__malloc_lock>
 800e55a:	6833      	ldr	r3, [r6, #0]
 800e55c:	461c      	mov	r4, r3
 800e55e:	bb34      	cbnz	r4, 800e5ae <_malloc_r+0x82>
 800e560:	4629      	mov	r1, r5
 800e562:	4638      	mov	r0, r7
 800e564:	f7ff ffc2 	bl	800e4ec <sbrk_aligned>
 800e568:	1c43      	adds	r3, r0, #1
 800e56a:	4604      	mov	r4, r0
 800e56c:	d14d      	bne.n	800e60a <_malloc_r+0xde>
 800e56e:	6834      	ldr	r4, [r6, #0]
 800e570:	4626      	mov	r6, r4
 800e572:	2e00      	cmp	r6, #0
 800e574:	d140      	bne.n	800e5f8 <_malloc_r+0xcc>
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	4631      	mov	r1, r6
 800e57a:	4638      	mov	r0, r7
 800e57c:	eb04 0803 	add.w	r8, r4, r3
 800e580:	f000 fd1c 	bl	800efbc <_sbrk_r>
 800e584:	4580      	cmp	r8, r0
 800e586:	d13a      	bne.n	800e5fe <_malloc_r+0xd2>
 800e588:	6821      	ldr	r1, [r4, #0]
 800e58a:	3503      	adds	r5, #3
 800e58c:	1a6d      	subs	r5, r5, r1
 800e58e:	f025 0503 	bic.w	r5, r5, #3
 800e592:	3508      	adds	r5, #8
 800e594:	2d0c      	cmp	r5, #12
 800e596:	bf38      	it	cc
 800e598:	250c      	movcc	r5, #12
 800e59a:	4629      	mov	r1, r5
 800e59c:	4638      	mov	r0, r7
 800e59e:	f7ff ffa5 	bl	800e4ec <sbrk_aligned>
 800e5a2:	3001      	adds	r0, #1
 800e5a4:	d02b      	beq.n	800e5fe <_malloc_r+0xd2>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	442b      	add	r3, r5
 800e5aa:	6023      	str	r3, [r4, #0]
 800e5ac:	e00e      	b.n	800e5cc <_malloc_r+0xa0>
 800e5ae:	6822      	ldr	r2, [r4, #0]
 800e5b0:	1b52      	subs	r2, r2, r5
 800e5b2:	d41e      	bmi.n	800e5f2 <_malloc_r+0xc6>
 800e5b4:	2a0b      	cmp	r2, #11
 800e5b6:	d916      	bls.n	800e5e6 <_malloc_r+0xba>
 800e5b8:	1961      	adds	r1, r4, r5
 800e5ba:	42a3      	cmp	r3, r4
 800e5bc:	6025      	str	r5, [r4, #0]
 800e5be:	bf18      	it	ne
 800e5c0:	6059      	strne	r1, [r3, #4]
 800e5c2:	6863      	ldr	r3, [r4, #4]
 800e5c4:	bf08      	it	eq
 800e5c6:	6031      	streq	r1, [r6, #0]
 800e5c8:	5162      	str	r2, [r4, r5]
 800e5ca:	604b      	str	r3, [r1, #4]
 800e5cc:	4638      	mov	r0, r7
 800e5ce:	f104 060b 	add.w	r6, r4, #11
 800e5d2:	f001 fce9 	bl	800ffa8 <__malloc_unlock>
 800e5d6:	f026 0607 	bic.w	r6, r6, #7
 800e5da:	1d23      	adds	r3, r4, #4
 800e5dc:	1af2      	subs	r2, r6, r3
 800e5de:	d0b6      	beq.n	800e54e <_malloc_r+0x22>
 800e5e0:	1b9b      	subs	r3, r3, r6
 800e5e2:	50a3      	str	r3, [r4, r2]
 800e5e4:	e7b3      	b.n	800e54e <_malloc_r+0x22>
 800e5e6:	6862      	ldr	r2, [r4, #4]
 800e5e8:	42a3      	cmp	r3, r4
 800e5ea:	bf0c      	ite	eq
 800e5ec:	6032      	streq	r2, [r6, #0]
 800e5ee:	605a      	strne	r2, [r3, #4]
 800e5f0:	e7ec      	b.n	800e5cc <_malloc_r+0xa0>
 800e5f2:	4623      	mov	r3, r4
 800e5f4:	6864      	ldr	r4, [r4, #4]
 800e5f6:	e7b2      	b.n	800e55e <_malloc_r+0x32>
 800e5f8:	4634      	mov	r4, r6
 800e5fa:	6876      	ldr	r6, [r6, #4]
 800e5fc:	e7b9      	b.n	800e572 <_malloc_r+0x46>
 800e5fe:	230c      	movs	r3, #12
 800e600:	603b      	str	r3, [r7, #0]
 800e602:	4638      	mov	r0, r7
 800e604:	f001 fcd0 	bl	800ffa8 <__malloc_unlock>
 800e608:	e7a1      	b.n	800e54e <_malloc_r+0x22>
 800e60a:	6025      	str	r5, [r4, #0]
 800e60c:	e7de      	b.n	800e5cc <_malloc_r+0xa0>
 800e60e:	bf00      	nop
 800e610:	200063a4 	.word	0x200063a4

0800e614 <__cvt>:
 800e614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e618:	ec55 4b10 	vmov	r4, r5, d0
 800e61c:	2d00      	cmp	r5, #0
 800e61e:	460e      	mov	r6, r1
 800e620:	4619      	mov	r1, r3
 800e622:	462b      	mov	r3, r5
 800e624:	bfbb      	ittet	lt
 800e626:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e62a:	461d      	movlt	r5, r3
 800e62c:	2300      	movge	r3, #0
 800e62e:	232d      	movlt	r3, #45	; 0x2d
 800e630:	700b      	strb	r3, [r1, #0]
 800e632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e638:	4691      	mov	r9, r2
 800e63a:	f023 0820 	bic.w	r8, r3, #32
 800e63e:	bfbc      	itt	lt
 800e640:	4622      	movlt	r2, r4
 800e642:	4614      	movlt	r4, r2
 800e644:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e648:	d005      	beq.n	800e656 <__cvt+0x42>
 800e64a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e64e:	d100      	bne.n	800e652 <__cvt+0x3e>
 800e650:	3601      	adds	r6, #1
 800e652:	2102      	movs	r1, #2
 800e654:	e000      	b.n	800e658 <__cvt+0x44>
 800e656:	2103      	movs	r1, #3
 800e658:	ab03      	add	r3, sp, #12
 800e65a:	9301      	str	r3, [sp, #4]
 800e65c:	ab02      	add	r3, sp, #8
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	ec45 4b10 	vmov	d0, r4, r5
 800e664:	4653      	mov	r3, sl
 800e666:	4632      	mov	r2, r6
 800e668:	f000 fdca 	bl	800f200 <_dtoa_r>
 800e66c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e670:	4607      	mov	r7, r0
 800e672:	d102      	bne.n	800e67a <__cvt+0x66>
 800e674:	f019 0f01 	tst.w	r9, #1
 800e678:	d022      	beq.n	800e6c0 <__cvt+0xac>
 800e67a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e67e:	eb07 0906 	add.w	r9, r7, r6
 800e682:	d110      	bne.n	800e6a6 <__cvt+0x92>
 800e684:	783b      	ldrb	r3, [r7, #0]
 800e686:	2b30      	cmp	r3, #48	; 0x30
 800e688:	d10a      	bne.n	800e6a0 <__cvt+0x8c>
 800e68a:	2200      	movs	r2, #0
 800e68c:	2300      	movs	r3, #0
 800e68e:	4620      	mov	r0, r4
 800e690:	4629      	mov	r1, r5
 800e692:	f7f2 fa29 	bl	8000ae8 <__aeabi_dcmpeq>
 800e696:	b918      	cbnz	r0, 800e6a0 <__cvt+0x8c>
 800e698:	f1c6 0601 	rsb	r6, r6, #1
 800e69c:	f8ca 6000 	str.w	r6, [sl]
 800e6a0:	f8da 3000 	ldr.w	r3, [sl]
 800e6a4:	4499      	add	r9, r3
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	f7f2 fa1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6b2:	b108      	cbz	r0, 800e6b8 <__cvt+0xa4>
 800e6b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6b8:	2230      	movs	r2, #48	; 0x30
 800e6ba:	9b03      	ldr	r3, [sp, #12]
 800e6bc:	454b      	cmp	r3, r9
 800e6be:	d307      	bcc.n	800e6d0 <__cvt+0xbc>
 800e6c0:	9b03      	ldr	r3, [sp, #12]
 800e6c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6c4:	1bdb      	subs	r3, r3, r7
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	b004      	add	sp, #16
 800e6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d0:	1c59      	adds	r1, r3, #1
 800e6d2:	9103      	str	r1, [sp, #12]
 800e6d4:	701a      	strb	r2, [r3, #0]
 800e6d6:	e7f0      	b.n	800e6ba <__cvt+0xa6>

0800e6d8 <__exponent>:
 800e6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2900      	cmp	r1, #0
 800e6de:	bfb8      	it	lt
 800e6e0:	4249      	neglt	r1, r1
 800e6e2:	f803 2b02 	strb.w	r2, [r3], #2
 800e6e6:	bfb4      	ite	lt
 800e6e8:	222d      	movlt	r2, #45	; 0x2d
 800e6ea:	222b      	movge	r2, #43	; 0x2b
 800e6ec:	2909      	cmp	r1, #9
 800e6ee:	7042      	strb	r2, [r0, #1]
 800e6f0:	dd2a      	ble.n	800e748 <__exponent+0x70>
 800e6f2:	f10d 0407 	add.w	r4, sp, #7
 800e6f6:	46a4      	mov	ip, r4
 800e6f8:	270a      	movs	r7, #10
 800e6fa:	46a6      	mov	lr, r4
 800e6fc:	460a      	mov	r2, r1
 800e6fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800e702:	fb07 1516 	mls	r5, r7, r6, r1
 800e706:	3530      	adds	r5, #48	; 0x30
 800e708:	2a63      	cmp	r2, #99	; 0x63
 800e70a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e70e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e712:	4631      	mov	r1, r6
 800e714:	dcf1      	bgt.n	800e6fa <__exponent+0x22>
 800e716:	3130      	adds	r1, #48	; 0x30
 800e718:	f1ae 0502 	sub.w	r5, lr, #2
 800e71c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e720:	1c44      	adds	r4, r0, #1
 800e722:	4629      	mov	r1, r5
 800e724:	4561      	cmp	r1, ip
 800e726:	d30a      	bcc.n	800e73e <__exponent+0x66>
 800e728:	f10d 0209 	add.w	r2, sp, #9
 800e72c:	eba2 020e 	sub.w	r2, r2, lr
 800e730:	4565      	cmp	r5, ip
 800e732:	bf88      	it	hi
 800e734:	2200      	movhi	r2, #0
 800e736:	4413      	add	r3, r2
 800e738:	1a18      	subs	r0, r3, r0
 800e73a:	b003      	add	sp, #12
 800e73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e742:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e746:	e7ed      	b.n	800e724 <__exponent+0x4c>
 800e748:	2330      	movs	r3, #48	; 0x30
 800e74a:	3130      	adds	r1, #48	; 0x30
 800e74c:	7083      	strb	r3, [r0, #2]
 800e74e:	70c1      	strb	r1, [r0, #3]
 800e750:	1d03      	adds	r3, r0, #4
 800e752:	e7f1      	b.n	800e738 <__exponent+0x60>

0800e754 <_printf_float>:
 800e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	ed2d 8b02 	vpush	{d8}
 800e75c:	b08d      	sub	sp, #52	; 0x34
 800e75e:	460c      	mov	r4, r1
 800e760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e764:	4616      	mov	r6, r2
 800e766:	461f      	mov	r7, r3
 800e768:	4605      	mov	r5, r0
 800e76a:	f001 fbf9 	bl	800ff60 <_localeconv_r>
 800e76e:	f8d0 a000 	ldr.w	sl, [r0]
 800e772:	4650      	mov	r0, sl
 800e774:	f7f1 fd3c 	bl	80001f0 <strlen>
 800e778:	2300      	movs	r3, #0
 800e77a:	930a      	str	r3, [sp, #40]	; 0x28
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	9305      	str	r3, [sp, #20]
 800e780:	f8d8 3000 	ldr.w	r3, [r8]
 800e784:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e788:	3307      	adds	r3, #7
 800e78a:	f023 0307 	bic.w	r3, r3, #7
 800e78e:	f103 0208 	add.w	r2, r3, #8
 800e792:	f8c8 2000 	str.w	r2, [r8]
 800e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e79e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e7a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7a6:	9307      	str	r3, [sp, #28]
 800e7a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7ac:	ee08 0a10 	vmov	s16, r0
 800e7b0:	4b9f      	ldr	r3, [pc, #636]	; (800ea30 <_printf_float+0x2dc>)
 800e7b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ba:	f7f2 f9c7 	bl	8000b4c <__aeabi_dcmpun>
 800e7be:	bb88      	cbnz	r0, 800e824 <_printf_float+0xd0>
 800e7c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7c4:	4b9a      	ldr	r3, [pc, #616]	; (800ea30 <_printf_float+0x2dc>)
 800e7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ca:	f7f2 f9a1 	bl	8000b10 <__aeabi_dcmple>
 800e7ce:	bb48      	cbnz	r0, 800e824 <_printf_float+0xd0>
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	4640      	mov	r0, r8
 800e7d6:	4649      	mov	r1, r9
 800e7d8:	f7f2 f990 	bl	8000afc <__aeabi_dcmplt>
 800e7dc:	b110      	cbz	r0, 800e7e4 <_printf_float+0x90>
 800e7de:	232d      	movs	r3, #45	; 0x2d
 800e7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7e4:	4b93      	ldr	r3, [pc, #588]	; (800ea34 <_printf_float+0x2e0>)
 800e7e6:	4894      	ldr	r0, [pc, #592]	; (800ea38 <_printf_float+0x2e4>)
 800e7e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e7ec:	bf94      	ite	ls
 800e7ee:	4698      	movls	r8, r3
 800e7f0:	4680      	movhi	r8, r0
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	6123      	str	r3, [r4, #16]
 800e7f6:	9b05      	ldr	r3, [sp, #20]
 800e7f8:	f023 0204 	bic.w	r2, r3, #4
 800e7fc:	6022      	str	r2, [r4, #0]
 800e7fe:	f04f 0900 	mov.w	r9, #0
 800e802:	9700      	str	r7, [sp, #0]
 800e804:	4633      	mov	r3, r6
 800e806:	aa0b      	add	r2, sp, #44	; 0x2c
 800e808:	4621      	mov	r1, r4
 800e80a:	4628      	mov	r0, r5
 800e80c:	f000 f9d8 	bl	800ebc0 <_printf_common>
 800e810:	3001      	adds	r0, #1
 800e812:	f040 8090 	bne.w	800e936 <_printf_float+0x1e2>
 800e816:	f04f 30ff 	mov.w	r0, #4294967295
 800e81a:	b00d      	add	sp, #52	; 0x34
 800e81c:	ecbd 8b02 	vpop	{d8}
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e824:	4642      	mov	r2, r8
 800e826:	464b      	mov	r3, r9
 800e828:	4640      	mov	r0, r8
 800e82a:	4649      	mov	r1, r9
 800e82c:	f7f2 f98e 	bl	8000b4c <__aeabi_dcmpun>
 800e830:	b140      	cbz	r0, 800e844 <_printf_float+0xf0>
 800e832:	464b      	mov	r3, r9
 800e834:	2b00      	cmp	r3, #0
 800e836:	bfbc      	itt	lt
 800e838:	232d      	movlt	r3, #45	; 0x2d
 800e83a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e83e:	487f      	ldr	r0, [pc, #508]	; (800ea3c <_printf_float+0x2e8>)
 800e840:	4b7f      	ldr	r3, [pc, #508]	; (800ea40 <_printf_float+0x2ec>)
 800e842:	e7d1      	b.n	800e7e8 <_printf_float+0x94>
 800e844:	6863      	ldr	r3, [r4, #4]
 800e846:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e84a:	9206      	str	r2, [sp, #24]
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	d13f      	bne.n	800e8d0 <_printf_float+0x17c>
 800e850:	2306      	movs	r3, #6
 800e852:	6063      	str	r3, [r4, #4]
 800e854:	9b05      	ldr	r3, [sp, #20]
 800e856:	6861      	ldr	r1, [r4, #4]
 800e858:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e85c:	2300      	movs	r3, #0
 800e85e:	9303      	str	r3, [sp, #12]
 800e860:	ab0a      	add	r3, sp, #40	; 0x28
 800e862:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e866:	ab09      	add	r3, sp, #36	; 0x24
 800e868:	ec49 8b10 	vmov	d0, r8, r9
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	6022      	str	r2, [r4, #0]
 800e870:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e874:	4628      	mov	r0, r5
 800e876:	f7ff fecd 	bl	800e614 <__cvt>
 800e87a:	9b06      	ldr	r3, [sp, #24]
 800e87c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e87e:	2b47      	cmp	r3, #71	; 0x47
 800e880:	4680      	mov	r8, r0
 800e882:	d108      	bne.n	800e896 <_printf_float+0x142>
 800e884:	1cc8      	adds	r0, r1, #3
 800e886:	db02      	blt.n	800e88e <_printf_float+0x13a>
 800e888:	6863      	ldr	r3, [r4, #4]
 800e88a:	4299      	cmp	r1, r3
 800e88c:	dd41      	ble.n	800e912 <_printf_float+0x1be>
 800e88e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e892:	fa5f fb8b 	uxtb.w	fp, fp
 800e896:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e89a:	d820      	bhi.n	800e8de <_printf_float+0x18a>
 800e89c:	3901      	subs	r1, #1
 800e89e:	465a      	mov	r2, fp
 800e8a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e8a4:	9109      	str	r1, [sp, #36]	; 0x24
 800e8a6:	f7ff ff17 	bl	800e6d8 <__exponent>
 800e8aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8ac:	1813      	adds	r3, r2, r0
 800e8ae:	2a01      	cmp	r2, #1
 800e8b0:	4681      	mov	r9, r0
 800e8b2:	6123      	str	r3, [r4, #16]
 800e8b4:	dc02      	bgt.n	800e8bc <_printf_float+0x168>
 800e8b6:	6822      	ldr	r2, [r4, #0]
 800e8b8:	07d2      	lsls	r2, r2, #31
 800e8ba:	d501      	bpl.n	800e8c0 <_printf_float+0x16c>
 800e8bc:	3301      	adds	r3, #1
 800e8be:	6123      	str	r3, [r4, #16]
 800e8c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d09c      	beq.n	800e802 <_printf_float+0xae>
 800e8c8:	232d      	movs	r3, #45	; 0x2d
 800e8ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8ce:	e798      	b.n	800e802 <_printf_float+0xae>
 800e8d0:	9a06      	ldr	r2, [sp, #24]
 800e8d2:	2a47      	cmp	r2, #71	; 0x47
 800e8d4:	d1be      	bne.n	800e854 <_printf_float+0x100>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1bc      	bne.n	800e854 <_printf_float+0x100>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e7b9      	b.n	800e852 <_printf_float+0xfe>
 800e8de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e8e2:	d118      	bne.n	800e916 <_printf_float+0x1c2>
 800e8e4:	2900      	cmp	r1, #0
 800e8e6:	6863      	ldr	r3, [r4, #4]
 800e8e8:	dd0b      	ble.n	800e902 <_printf_float+0x1ae>
 800e8ea:	6121      	str	r1, [r4, #16]
 800e8ec:	b913      	cbnz	r3, 800e8f4 <_printf_float+0x1a0>
 800e8ee:	6822      	ldr	r2, [r4, #0]
 800e8f0:	07d0      	lsls	r0, r2, #31
 800e8f2:	d502      	bpl.n	800e8fa <_printf_float+0x1a6>
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	440b      	add	r3, r1
 800e8f8:	6123      	str	r3, [r4, #16]
 800e8fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8fc:	f04f 0900 	mov.w	r9, #0
 800e900:	e7de      	b.n	800e8c0 <_printf_float+0x16c>
 800e902:	b913      	cbnz	r3, 800e90a <_printf_float+0x1b6>
 800e904:	6822      	ldr	r2, [r4, #0]
 800e906:	07d2      	lsls	r2, r2, #31
 800e908:	d501      	bpl.n	800e90e <_printf_float+0x1ba>
 800e90a:	3302      	adds	r3, #2
 800e90c:	e7f4      	b.n	800e8f8 <_printf_float+0x1a4>
 800e90e:	2301      	movs	r3, #1
 800e910:	e7f2      	b.n	800e8f8 <_printf_float+0x1a4>
 800e912:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e918:	4299      	cmp	r1, r3
 800e91a:	db05      	blt.n	800e928 <_printf_float+0x1d4>
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	6121      	str	r1, [r4, #16]
 800e920:	07d8      	lsls	r0, r3, #31
 800e922:	d5ea      	bpl.n	800e8fa <_printf_float+0x1a6>
 800e924:	1c4b      	adds	r3, r1, #1
 800e926:	e7e7      	b.n	800e8f8 <_printf_float+0x1a4>
 800e928:	2900      	cmp	r1, #0
 800e92a:	bfd4      	ite	le
 800e92c:	f1c1 0202 	rsble	r2, r1, #2
 800e930:	2201      	movgt	r2, #1
 800e932:	4413      	add	r3, r2
 800e934:	e7e0      	b.n	800e8f8 <_printf_float+0x1a4>
 800e936:	6823      	ldr	r3, [r4, #0]
 800e938:	055a      	lsls	r2, r3, #21
 800e93a:	d407      	bmi.n	800e94c <_printf_float+0x1f8>
 800e93c:	6923      	ldr	r3, [r4, #16]
 800e93e:	4642      	mov	r2, r8
 800e940:	4631      	mov	r1, r6
 800e942:	4628      	mov	r0, r5
 800e944:	47b8      	blx	r7
 800e946:	3001      	adds	r0, #1
 800e948:	d12c      	bne.n	800e9a4 <_printf_float+0x250>
 800e94a:	e764      	b.n	800e816 <_printf_float+0xc2>
 800e94c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e950:	f240 80e0 	bls.w	800eb14 <_printf_float+0x3c0>
 800e954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e958:	2200      	movs	r2, #0
 800e95a:	2300      	movs	r3, #0
 800e95c:	f7f2 f8c4 	bl	8000ae8 <__aeabi_dcmpeq>
 800e960:	2800      	cmp	r0, #0
 800e962:	d034      	beq.n	800e9ce <_printf_float+0x27a>
 800e964:	4a37      	ldr	r2, [pc, #220]	; (800ea44 <_printf_float+0x2f0>)
 800e966:	2301      	movs	r3, #1
 800e968:	4631      	mov	r1, r6
 800e96a:	4628      	mov	r0, r5
 800e96c:	47b8      	blx	r7
 800e96e:	3001      	adds	r0, #1
 800e970:	f43f af51 	beq.w	800e816 <_printf_float+0xc2>
 800e974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e978:	429a      	cmp	r2, r3
 800e97a:	db02      	blt.n	800e982 <_printf_float+0x22e>
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	07d8      	lsls	r0, r3, #31
 800e980:	d510      	bpl.n	800e9a4 <_printf_float+0x250>
 800e982:	ee18 3a10 	vmov	r3, s16
 800e986:	4652      	mov	r2, sl
 800e988:	4631      	mov	r1, r6
 800e98a:	4628      	mov	r0, r5
 800e98c:	47b8      	blx	r7
 800e98e:	3001      	adds	r0, #1
 800e990:	f43f af41 	beq.w	800e816 <_printf_float+0xc2>
 800e994:	f04f 0800 	mov.w	r8, #0
 800e998:	f104 091a 	add.w	r9, r4, #26
 800e99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	4543      	cmp	r3, r8
 800e9a2:	dc09      	bgt.n	800e9b8 <_printf_float+0x264>
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	079b      	lsls	r3, r3, #30
 800e9a8:	f100 8105 	bmi.w	800ebb6 <_printf_float+0x462>
 800e9ac:	68e0      	ldr	r0, [r4, #12]
 800e9ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9b0:	4298      	cmp	r0, r3
 800e9b2:	bfb8      	it	lt
 800e9b4:	4618      	movlt	r0, r3
 800e9b6:	e730      	b.n	800e81a <_printf_float+0xc6>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	464a      	mov	r2, r9
 800e9bc:	4631      	mov	r1, r6
 800e9be:	4628      	mov	r0, r5
 800e9c0:	47b8      	blx	r7
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	f43f af27 	beq.w	800e816 <_printf_float+0xc2>
 800e9c8:	f108 0801 	add.w	r8, r8, #1
 800e9cc:	e7e6      	b.n	800e99c <_printf_float+0x248>
 800e9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	dc39      	bgt.n	800ea48 <_printf_float+0x2f4>
 800e9d4:	4a1b      	ldr	r2, [pc, #108]	; (800ea44 <_printf_float+0x2f0>)
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	4631      	mov	r1, r6
 800e9da:	4628      	mov	r0, r5
 800e9dc:	47b8      	blx	r7
 800e9de:	3001      	adds	r0, #1
 800e9e0:	f43f af19 	beq.w	800e816 <_printf_float+0xc2>
 800e9e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	d102      	bne.n	800e9f2 <_printf_float+0x29e>
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	07d9      	lsls	r1, r3, #31
 800e9f0:	d5d8      	bpl.n	800e9a4 <_printf_float+0x250>
 800e9f2:	ee18 3a10 	vmov	r3, s16
 800e9f6:	4652      	mov	r2, sl
 800e9f8:	4631      	mov	r1, r6
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	47b8      	blx	r7
 800e9fe:	3001      	adds	r0, #1
 800ea00:	f43f af09 	beq.w	800e816 <_printf_float+0xc2>
 800ea04:	f04f 0900 	mov.w	r9, #0
 800ea08:	f104 0a1a 	add.w	sl, r4, #26
 800ea0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0e:	425b      	negs	r3, r3
 800ea10:	454b      	cmp	r3, r9
 800ea12:	dc01      	bgt.n	800ea18 <_printf_float+0x2c4>
 800ea14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea16:	e792      	b.n	800e93e <_printf_float+0x1ea>
 800ea18:	2301      	movs	r3, #1
 800ea1a:	4652      	mov	r2, sl
 800ea1c:	4631      	mov	r1, r6
 800ea1e:	4628      	mov	r0, r5
 800ea20:	47b8      	blx	r7
 800ea22:	3001      	adds	r0, #1
 800ea24:	f43f aef7 	beq.w	800e816 <_printf_float+0xc2>
 800ea28:	f109 0901 	add.w	r9, r9, #1
 800ea2c:	e7ee      	b.n	800ea0c <_printf_float+0x2b8>
 800ea2e:	bf00      	nop
 800ea30:	7fefffff 	.word	0x7fefffff
 800ea34:	08013cc8 	.word	0x08013cc8
 800ea38:	08013ccc 	.word	0x08013ccc
 800ea3c:	08013cd4 	.word	0x08013cd4
 800ea40:	08013cd0 	.word	0x08013cd0
 800ea44:	08013cd8 	.word	0x08013cd8
 800ea48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	bfa8      	it	ge
 800ea50:	461a      	movge	r2, r3
 800ea52:	2a00      	cmp	r2, #0
 800ea54:	4691      	mov	r9, r2
 800ea56:	dc37      	bgt.n	800eac8 <_printf_float+0x374>
 800ea58:	f04f 0b00 	mov.w	fp, #0
 800ea5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea60:	f104 021a 	add.w	r2, r4, #26
 800ea64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea66:	9305      	str	r3, [sp, #20]
 800ea68:	eba3 0309 	sub.w	r3, r3, r9
 800ea6c:	455b      	cmp	r3, fp
 800ea6e:	dc33      	bgt.n	800ead8 <_printf_float+0x384>
 800ea70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea74:	429a      	cmp	r2, r3
 800ea76:	db3b      	blt.n	800eaf0 <_printf_float+0x39c>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	07da      	lsls	r2, r3, #31
 800ea7c:	d438      	bmi.n	800eaf0 <_printf_float+0x39c>
 800ea7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea80:	9a05      	ldr	r2, [sp, #20]
 800ea82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea84:	1a9a      	subs	r2, r3, r2
 800ea86:	eba3 0901 	sub.w	r9, r3, r1
 800ea8a:	4591      	cmp	r9, r2
 800ea8c:	bfa8      	it	ge
 800ea8e:	4691      	movge	r9, r2
 800ea90:	f1b9 0f00 	cmp.w	r9, #0
 800ea94:	dc35      	bgt.n	800eb02 <_printf_float+0x3ae>
 800ea96:	f04f 0800 	mov.w	r8, #0
 800ea9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea9e:	f104 0a1a 	add.w	sl, r4, #26
 800eaa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaa6:	1a9b      	subs	r3, r3, r2
 800eaa8:	eba3 0309 	sub.w	r3, r3, r9
 800eaac:	4543      	cmp	r3, r8
 800eaae:	f77f af79 	ble.w	800e9a4 <_printf_float+0x250>
 800eab2:	2301      	movs	r3, #1
 800eab4:	4652      	mov	r2, sl
 800eab6:	4631      	mov	r1, r6
 800eab8:	4628      	mov	r0, r5
 800eaba:	47b8      	blx	r7
 800eabc:	3001      	adds	r0, #1
 800eabe:	f43f aeaa 	beq.w	800e816 <_printf_float+0xc2>
 800eac2:	f108 0801 	add.w	r8, r8, #1
 800eac6:	e7ec      	b.n	800eaa2 <_printf_float+0x34e>
 800eac8:	4613      	mov	r3, r2
 800eaca:	4631      	mov	r1, r6
 800eacc:	4642      	mov	r2, r8
 800eace:	4628      	mov	r0, r5
 800ead0:	47b8      	blx	r7
 800ead2:	3001      	adds	r0, #1
 800ead4:	d1c0      	bne.n	800ea58 <_printf_float+0x304>
 800ead6:	e69e      	b.n	800e816 <_printf_float+0xc2>
 800ead8:	2301      	movs	r3, #1
 800eada:	4631      	mov	r1, r6
 800eadc:	4628      	mov	r0, r5
 800eade:	9205      	str	r2, [sp, #20]
 800eae0:	47b8      	blx	r7
 800eae2:	3001      	adds	r0, #1
 800eae4:	f43f ae97 	beq.w	800e816 <_printf_float+0xc2>
 800eae8:	9a05      	ldr	r2, [sp, #20]
 800eaea:	f10b 0b01 	add.w	fp, fp, #1
 800eaee:	e7b9      	b.n	800ea64 <_printf_float+0x310>
 800eaf0:	ee18 3a10 	vmov	r3, s16
 800eaf4:	4652      	mov	r2, sl
 800eaf6:	4631      	mov	r1, r6
 800eaf8:	4628      	mov	r0, r5
 800eafa:	47b8      	blx	r7
 800eafc:	3001      	adds	r0, #1
 800eafe:	d1be      	bne.n	800ea7e <_printf_float+0x32a>
 800eb00:	e689      	b.n	800e816 <_printf_float+0xc2>
 800eb02:	9a05      	ldr	r2, [sp, #20]
 800eb04:	464b      	mov	r3, r9
 800eb06:	4442      	add	r2, r8
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	47b8      	blx	r7
 800eb0e:	3001      	adds	r0, #1
 800eb10:	d1c1      	bne.n	800ea96 <_printf_float+0x342>
 800eb12:	e680      	b.n	800e816 <_printf_float+0xc2>
 800eb14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb16:	2a01      	cmp	r2, #1
 800eb18:	dc01      	bgt.n	800eb1e <_printf_float+0x3ca>
 800eb1a:	07db      	lsls	r3, r3, #31
 800eb1c:	d538      	bpl.n	800eb90 <_printf_float+0x43c>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	4642      	mov	r2, r8
 800eb22:	4631      	mov	r1, r6
 800eb24:	4628      	mov	r0, r5
 800eb26:	47b8      	blx	r7
 800eb28:	3001      	adds	r0, #1
 800eb2a:	f43f ae74 	beq.w	800e816 <_printf_float+0xc2>
 800eb2e:	ee18 3a10 	vmov	r3, s16
 800eb32:	4652      	mov	r2, sl
 800eb34:	4631      	mov	r1, r6
 800eb36:	4628      	mov	r0, r5
 800eb38:	47b8      	blx	r7
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	f43f ae6b 	beq.w	800e816 <_printf_float+0xc2>
 800eb40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb44:	2200      	movs	r2, #0
 800eb46:	2300      	movs	r3, #0
 800eb48:	f7f1 ffce 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb4c:	b9d8      	cbnz	r0, 800eb86 <_printf_float+0x432>
 800eb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb50:	f108 0201 	add.w	r2, r8, #1
 800eb54:	3b01      	subs	r3, #1
 800eb56:	4631      	mov	r1, r6
 800eb58:	4628      	mov	r0, r5
 800eb5a:	47b8      	blx	r7
 800eb5c:	3001      	adds	r0, #1
 800eb5e:	d10e      	bne.n	800eb7e <_printf_float+0x42a>
 800eb60:	e659      	b.n	800e816 <_printf_float+0xc2>
 800eb62:	2301      	movs	r3, #1
 800eb64:	4652      	mov	r2, sl
 800eb66:	4631      	mov	r1, r6
 800eb68:	4628      	mov	r0, r5
 800eb6a:	47b8      	blx	r7
 800eb6c:	3001      	adds	r0, #1
 800eb6e:	f43f ae52 	beq.w	800e816 <_printf_float+0xc2>
 800eb72:	f108 0801 	add.w	r8, r8, #1
 800eb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	4543      	cmp	r3, r8
 800eb7c:	dcf1      	bgt.n	800eb62 <_printf_float+0x40e>
 800eb7e:	464b      	mov	r3, r9
 800eb80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb84:	e6dc      	b.n	800e940 <_printf_float+0x1ec>
 800eb86:	f04f 0800 	mov.w	r8, #0
 800eb8a:	f104 0a1a 	add.w	sl, r4, #26
 800eb8e:	e7f2      	b.n	800eb76 <_printf_float+0x422>
 800eb90:	2301      	movs	r3, #1
 800eb92:	4642      	mov	r2, r8
 800eb94:	e7df      	b.n	800eb56 <_printf_float+0x402>
 800eb96:	2301      	movs	r3, #1
 800eb98:	464a      	mov	r2, r9
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b8      	blx	r7
 800eba0:	3001      	adds	r0, #1
 800eba2:	f43f ae38 	beq.w	800e816 <_printf_float+0xc2>
 800eba6:	f108 0801 	add.w	r8, r8, #1
 800ebaa:	68e3      	ldr	r3, [r4, #12]
 800ebac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebae:	1a5b      	subs	r3, r3, r1
 800ebb0:	4543      	cmp	r3, r8
 800ebb2:	dcf0      	bgt.n	800eb96 <_printf_float+0x442>
 800ebb4:	e6fa      	b.n	800e9ac <_printf_float+0x258>
 800ebb6:	f04f 0800 	mov.w	r8, #0
 800ebba:	f104 0919 	add.w	r9, r4, #25
 800ebbe:	e7f4      	b.n	800ebaa <_printf_float+0x456>

0800ebc0 <_printf_common>:
 800ebc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc4:	4616      	mov	r6, r2
 800ebc6:	4699      	mov	r9, r3
 800ebc8:	688a      	ldr	r2, [r1, #8]
 800ebca:	690b      	ldr	r3, [r1, #16]
 800ebcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	bfb8      	it	lt
 800ebd4:	4613      	movlt	r3, r2
 800ebd6:	6033      	str	r3, [r6, #0]
 800ebd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebdc:	4607      	mov	r7, r0
 800ebde:	460c      	mov	r4, r1
 800ebe0:	b10a      	cbz	r2, 800ebe6 <_printf_common+0x26>
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	6033      	str	r3, [r6, #0]
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	0699      	lsls	r1, r3, #26
 800ebea:	bf42      	ittt	mi
 800ebec:	6833      	ldrmi	r3, [r6, #0]
 800ebee:	3302      	addmi	r3, #2
 800ebf0:	6033      	strmi	r3, [r6, #0]
 800ebf2:	6825      	ldr	r5, [r4, #0]
 800ebf4:	f015 0506 	ands.w	r5, r5, #6
 800ebf8:	d106      	bne.n	800ec08 <_printf_common+0x48>
 800ebfa:	f104 0a19 	add.w	sl, r4, #25
 800ebfe:	68e3      	ldr	r3, [r4, #12]
 800ec00:	6832      	ldr	r2, [r6, #0]
 800ec02:	1a9b      	subs	r3, r3, r2
 800ec04:	42ab      	cmp	r3, r5
 800ec06:	dc26      	bgt.n	800ec56 <_printf_common+0x96>
 800ec08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec0c:	1e13      	subs	r3, r2, #0
 800ec0e:	6822      	ldr	r2, [r4, #0]
 800ec10:	bf18      	it	ne
 800ec12:	2301      	movne	r3, #1
 800ec14:	0692      	lsls	r2, r2, #26
 800ec16:	d42b      	bmi.n	800ec70 <_printf_common+0xb0>
 800ec18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec1c:	4649      	mov	r1, r9
 800ec1e:	4638      	mov	r0, r7
 800ec20:	47c0      	blx	r8
 800ec22:	3001      	adds	r0, #1
 800ec24:	d01e      	beq.n	800ec64 <_printf_common+0xa4>
 800ec26:	6823      	ldr	r3, [r4, #0]
 800ec28:	68e5      	ldr	r5, [r4, #12]
 800ec2a:	6832      	ldr	r2, [r6, #0]
 800ec2c:	f003 0306 	and.w	r3, r3, #6
 800ec30:	2b04      	cmp	r3, #4
 800ec32:	bf08      	it	eq
 800ec34:	1aad      	subeq	r5, r5, r2
 800ec36:	68a3      	ldr	r3, [r4, #8]
 800ec38:	6922      	ldr	r2, [r4, #16]
 800ec3a:	bf0c      	ite	eq
 800ec3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec40:	2500      	movne	r5, #0
 800ec42:	4293      	cmp	r3, r2
 800ec44:	bfc4      	itt	gt
 800ec46:	1a9b      	subgt	r3, r3, r2
 800ec48:	18ed      	addgt	r5, r5, r3
 800ec4a:	2600      	movs	r6, #0
 800ec4c:	341a      	adds	r4, #26
 800ec4e:	42b5      	cmp	r5, r6
 800ec50:	d11a      	bne.n	800ec88 <_printf_common+0xc8>
 800ec52:	2000      	movs	r0, #0
 800ec54:	e008      	b.n	800ec68 <_printf_common+0xa8>
 800ec56:	2301      	movs	r3, #1
 800ec58:	4652      	mov	r2, sl
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	47c0      	blx	r8
 800ec60:	3001      	adds	r0, #1
 800ec62:	d103      	bne.n	800ec6c <_printf_common+0xac>
 800ec64:	f04f 30ff 	mov.w	r0, #4294967295
 800ec68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6c:	3501      	adds	r5, #1
 800ec6e:	e7c6      	b.n	800ebfe <_printf_common+0x3e>
 800ec70:	18e1      	adds	r1, r4, r3
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	2030      	movs	r0, #48	; 0x30
 800ec76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec7a:	4422      	add	r2, r4
 800ec7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec84:	3302      	adds	r3, #2
 800ec86:	e7c7      	b.n	800ec18 <_printf_common+0x58>
 800ec88:	2301      	movs	r3, #1
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	4649      	mov	r1, r9
 800ec8e:	4638      	mov	r0, r7
 800ec90:	47c0      	blx	r8
 800ec92:	3001      	adds	r0, #1
 800ec94:	d0e6      	beq.n	800ec64 <_printf_common+0xa4>
 800ec96:	3601      	adds	r6, #1
 800ec98:	e7d9      	b.n	800ec4e <_printf_common+0x8e>
	...

0800ec9c <_printf_i>:
 800ec9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eca0:	7e0f      	ldrb	r7, [r1, #24]
 800eca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eca4:	2f78      	cmp	r7, #120	; 0x78
 800eca6:	4691      	mov	r9, r2
 800eca8:	4680      	mov	r8, r0
 800ecaa:	460c      	mov	r4, r1
 800ecac:	469a      	mov	sl, r3
 800ecae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecb2:	d807      	bhi.n	800ecc4 <_printf_i+0x28>
 800ecb4:	2f62      	cmp	r7, #98	; 0x62
 800ecb6:	d80a      	bhi.n	800ecce <_printf_i+0x32>
 800ecb8:	2f00      	cmp	r7, #0
 800ecba:	f000 80d8 	beq.w	800ee6e <_printf_i+0x1d2>
 800ecbe:	2f58      	cmp	r7, #88	; 0x58
 800ecc0:	f000 80a3 	beq.w	800ee0a <_printf_i+0x16e>
 800ecc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eccc:	e03a      	b.n	800ed44 <_printf_i+0xa8>
 800ecce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecd2:	2b15      	cmp	r3, #21
 800ecd4:	d8f6      	bhi.n	800ecc4 <_printf_i+0x28>
 800ecd6:	a101      	add	r1, pc, #4	; (adr r1, 800ecdc <_printf_i+0x40>)
 800ecd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecdc:	0800ed35 	.word	0x0800ed35
 800ece0:	0800ed49 	.word	0x0800ed49
 800ece4:	0800ecc5 	.word	0x0800ecc5
 800ece8:	0800ecc5 	.word	0x0800ecc5
 800ecec:	0800ecc5 	.word	0x0800ecc5
 800ecf0:	0800ecc5 	.word	0x0800ecc5
 800ecf4:	0800ed49 	.word	0x0800ed49
 800ecf8:	0800ecc5 	.word	0x0800ecc5
 800ecfc:	0800ecc5 	.word	0x0800ecc5
 800ed00:	0800ecc5 	.word	0x0800ecc5
 800ed04:	0800ecc5 	.word	0x0800ecc5
 800ed08:	0800ee55 	.word	0x0800ee55
 800ed0c:	0800ed79 	.word	0x0800ed79
 800ed10:	0800ee37 	.word	0x0800ee37
 800ed14:	0800ecc5 	.word	0x0800ecc5
 800ed18:	0800ecc5 	.word	0x0800ecc5
 800ed1c:	0800ee77 	.word	0x0800ee77
 800ed20:	0800ecc5 	.word	0x0800ecc5
 800ed24:	0800ed79 	.word	0x0800ed79
 800ed28:	0800ecc5 	.word	0x0800ecc5
 800ed2c:	0800ecc5 	.word	0x0800ecc5
 800ed30:	0800ee3f 	.word	0x0800ee3f
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	1d1a      	adds	r2, r3, #4
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	602a      	str	r2, [r5, #0]
 800ed3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed44:	2301      	movs	r3, #1
 800ed46:	e0a3      	b.n	800ee90 <_printf_i+0x1f4>
 800ed48:	6820      	ldr	r0, [r4, #0]
 800ed4a:	6829      	ldr	r1, [r5, #0]
 800ed4c:	0606      	lsls	r6, r0, #24
 800ed4e:	f101 0304 	add.w	r3, r1, #4
 800ed52:	d50a      	bpl.n	800ed6a <_printf_i+0xce>
 800ed54:	680e      	ldr	r6, [r1, #0]
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	2e00      	cmp	r6, #0
 800ed5a:	da03      	bge.n	800ed64 <_printf_i+0xc8>
 800ed5c:	232d      	movs	r3, #45	; 0x2d
 800ed5e:	4276      	negs	r6, r6
 800ed60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed64:	485e      	ldr	r0, [pc, #376]	; (800eee0 <_printf_i+0x244>)
 800ed66:	230a      	movs	r3, #10
 800ed68:	e019      	b.n	800ed9e <_printf_i+0x102>
 800ed6a:	680e      	ldr	r6, [r1, #0]
 800ed6c:	602b      	str	r3, [r5, #0]
 800ed6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed72:	bf18      	it	ne
 800ed74:	b236      	sxthne	r6, r6
 800ed76:	e7ef      	b.n	800ed58 <_printf_i+0xbc>
 800ed78:	682b      	ldr	r3, [r5, #0]
 800ed7a:	6820      	ldr	r0, [r4, #0]
 800ed7c:	1d19      	adds	r1, r3, #4
 800ed7e:	6029      	str	r1, [r5, #0]
 800ed80:	0601      	lsls	r1, r0, #24
 800ed82:	d501      	bpl.n	800ed88 <_printf_i+0xec>
 800ed84:	681e      	ldr	r6, [r3, #0]
 800ed86:	e002      	b.n	800ed8e <_printf_i+0xf2>
 800ed88:	0646      	lsls	r6, r0, #25
 800ed8a:	d5fb      	bpl.n	800ed84 <_printf_i+0xe8>
 800ed8c:	881e      	ldrh	r6, [r3, #0]
 800ed8e:	4854      	ldr	r0, [pc, #336]	; (800eee0 <_printf_i+0x244>)
 800ed90:	2f6f      	cmp	r7, #111	; 0x6f
 800ed92:	bf0c      	ite	eq
 800ed94:	2308      	moveq	r3, #8
 800ed96:	230a      	movne	r3, #10
 800ed98:	2100      	movs	r1, #0
 800ed9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed9e:	6865      	ldr	r5, [r4, #4]
 800eda0:	60a5      	str	r5, [r4, #8]
 800eda2:	2d00      	cmp	r5, #0
 800eda4:	bfa2      	ittt	ge
 800eda6:	6821      	ldrge	r1, [r4, #0]
 800eda8:	f021 0104 	bicge.w	r1, r1, #4
 800edac:	6021      	strge	r1, [r4, #0]
 800edae:	b90e      	cbnz	r6, 800edb4 <_printf_i+0x118>
 800edb0:	2d00      	cmp	r5, #0
 800edb2:	d04d      	beq.n	800ee50 <_printf_i+0x1b4>
 800edb4:	4615      	mov	r5, r2
 800edb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800edba:	fb03 6711 	mls	r7, r3, r1, r6
 800edbe:	5dc7      	ldrb	r7, [r0, r7]
 800edc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edc4:	4637      	mov	r7, r6
 800edc6:	42bb      	cmp	r3, r7
 800edc8:	460e      	mov	r6, r1
 800edca:	d9f4      	bls.n	800edb6 <_printf_i+0x11a>
 800edcc:	2b08      	cmp	r3, #8
 800edce:	d10b      	bne.n	800ede8 <_printf_i+0x14c>
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	07de      	lsls	r6, r3, #31
 800edd4:	d508      	bpl.n	800ede8 <_printf_i+0x14c>
 800edd6:	6923      	ldr	r3, [r4, #16]
 800edd8:	6861      	ldr	r1, [r4, #4]
 800edda:	4299      	cmp	r1, r3
 800eddc:	bfde      	ittt	le
 800edde:	2330      	movle	r3, #48	; 0x30
 800ede0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ede4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ede8:	1b52      	subs	r2, r2, r5
 800edea:	6122      	str	r2, [r4, #16]
 800edec:	f8cd a000 	str.w	sl, [sp]
 800edf0:	464b      	mov	r3, r9
 800edf2:	aa03      	add	r2, sp, #12
 800edf4:	4621      	mov	r1, r4
 800edf6:	4640      	mov	r0, r8
 800edf8:	f7ff fee2 	bl	800ebc0 <_printf_common>
 800edfc:	3001      	adds	r0, #1
 800edfe:	d14c      	bne.n	800ee9a <_printf_i+0x1fe>
 800ee00:	f04f 30ff 	mov.w	r0, #4294967295
 800ee04:	b004      	add	sp, #16
 800ee06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee0a:	4835      	ldr	r0, [pc, #212]	; (800eee0 <_printf_i+0x244>)
 800ee0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ee10:	6829      	ldr	r1, [r5, #0]
 800ee12:	6823      	ldr	r3, [r4, #0]
 800ee14:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee18:	6029      	str	r1, [r5, #0]
 800ee1a:	061d      	lsls	r5, r3, #24
 800ee1c:	d514      	bpl.n	800ee48 <_printf_i+0x1ac>
 800ee1e:	07df      	lsls	r7, r3, #31
 800ee20:	bf44      	itt	mi
 800ee22:	f043 0320 	orrmi.w	r3, r3, #32
 800ee26:	6023      	strmi	r3, [r4, #0]
 800ee28:	b91e      	cbnz	r6, 800ee32 <_printf_i+0x196>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	f023 0320 	bic.w	r3, r3, #32
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	2310      	movs	r3, #16
 800ee34:	e7b0      	b.n	800ed98 <_printf_i+0xfc>
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	f043 0320 	orr.w	r3, r3, #32
 800ee3c:	6023      	str	r3, [r4, #0]
 800ee3e:	2378      	movs	r3, #120	; 0x78
 800ee40:	4828      	ldr	r0, [pc, #160]	; (800eee4 <_printf_i+0x248>)
 800ee42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee46:	e7e3      	b.n	800ee10 <_printf_i+0x174>
 800ee48:	0659      	lsls	r1, r3, #25
 800ee4a:	bf48      	it	mi
 800ee4c:	b2b6      	uxthmi	r6, r6
 800ee4e:	e7e6      	b.n	800ee1e <_printf_i+0x182>
 800ee50:	4615      	mov	r5, r2
 800ee52:	e7bb      	b.n	800edcc <_printf_i+0x130>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	6826      	ldr	r6, [r4, #0]
 800ee58:	6961      	ldr	r1, [r4, #20]
 800ee5a:	1d18      	adds	r0, r3, #4
 800ee5c:	6028      	str	r0, [r5, #0]
 800ee5e:	0635      	lsls	r5, r6, #24
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	d501      	bpl.n	800ee68 <_printf_i+0x1cc>
 800ee64:	6019      	str	r1, [r3, #0]
 800ee66:	e002      	b.n	800ee6e <_printf_i+0x1d2>
 800ee68:	0670      	lsls	r0, r6, #25
 800ee6a:	d5fb      	bpl.n	800ee64 <_printf_i+0x1c8>
 800ee6c:	8019      	strh	r1, [r3, #0]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	6123      	str	r3, [r4, #16]
 800ee72:	4615      	mov	r5, r2
 800ee74:	e7ba      	b.n	800edec <_printf_i+0x150>
 800ee76:	682b      	ldr	r3, [r5, #0]
 800ee78:	1d1a      	adds	r2, r3, #4
 800ee7a:	602a      	str	r2, [r5, #0]
 800ee7c:	681d      	ldr	r5, [r3, #0]
 800ee7e:	6862      	ldr	r2, [r4, #4]
 800ee80:	2100      	movs	r1, #0
 800ee82:	4628      	mov	r0, r5
 800ee84:	f7f1 f9bc 	bl	8000200 <memchr>
 800ee88:	b108      	cbz	r0, 800ee8e <_printf_i+0x1f2>
 800ee8a:	1b40      	subs	r0, r0, r5
 800ee8c:	6060      	str	r0, [r4, #4]
 800ee8e:	6863      	ldr	r3, [r4, #4]
 800ee90:	6123      	str	r3, [r4, #16]
 800ee92:	2300      	movs	r3, #0
 800ee94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee98:	e7a8      	b.n	800edec <_printf_i+0x150>
 800ee9a:	6923      	ldr	r3, [r4, #16]
 800ee9c:	462a      	mov	r2, r5
 800ee9e:	4649      	mov	r1, r9
 800eea0:	4640      	mov	r0, r8
 800eea2:	47d0      	blx	sl
 800eea4:	3001      	adds	r0, #1
 800eea6:	d0ab      	beq.n	800ee00 <_printf_i+0x164>
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	079b      	lsls	r3, r3, #30
 800eeac:	d413      	bmi.n	800eed6 <_printf_i+0x23a>
 800eeae:	68e0      	ldr	r0, [r4, #12]
 800eeb0:	9b03      	ldr	r3, [sp, #12]
 800eeb2:	4298      	cmp	r0, r3
 800eeb4:	bfb8      	it	lt
 800eeb6:	4618      	movlt	r0, r3
 800eeb8:	e7a4      	b.n	800ee04 <_printf_i+0x168>
 800eeba:	2301      	movs	r3, #1
 800eebc:	4632      	mov	r2, r6
 800eebe:	4649      	mov	r1, r9
 800eec0:	4640      	mov	r0, r8
 800eec2:	47d0      	blx	sl
 800eec4:	3001      	adds	r0, #1
 800eec6:	d09b      	beq.n	800ee00 <_printf_i+0x164>
 800eec8:	3501      	adds	r5, #1
 800eeca:	68e3      	ldr	r3, [r4, #12]
 800eecc:	9903      	ldr	r1, [sp, #12]
 800eece:	1a5b      	subs	r3, r3, r1
 800eed0:	42ab      	cmp	r3, r5
 800eed2:	dcf2      	bgt.n	800eeba <_printf_i+0x21e>
 800eed4:	e7eb      	b.n	800eeae <_printf_i+0x212>
 800eed6:	2500      	movs	r5, #0
 800eed8:	f104 0619 	add.w	r6, r4, #25
 800eedc:	e7f5      	b.n	800eeca <_printf_i+0x22e>
 800eede:	bf00      	nop
 800eee0:	08013cda 	.word	0x08013cda
 800eee4:	08013ceb 	.word	0x08013ceb

0800eee8 <cleanup_glue>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	460c      	mov	r4, r1
 800eeec:	6809      	ldr	r1, [r1, #0]
 800eeee:	4605      	mov	r5, r0
 800eef0:	b109      	cbz	r1, 800eef6 <cleanup_glue+0xe>
 800eef2:	f7ff fff9 	bl	800eee8 <cleanup_glue>
 800eef6:	4621      	mov	r1, r4
 800eef8:	4628      	mov	r0, r5
 800eefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eefe:	f001 bbf3 	b.w	80106e8 <_free_r>
	...

0800ef04 <_reclaim_reent>:
 800ef04:	4b2c      	ldr	r3, [pc, #176]	; (800efb8 <_reclaim_reent+0xb4>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4283      	cmp	r3, r0
 800ef0a:	b570      	push	{r4, r5, r6, lr}
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	d051      	beq.n	800efb4 <_reclaim_reent+0xb0>
 800ef10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef12:	b143      	cbz	r3, 800ef26 <_reclaim_reent+0x22>
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d14a      	bne.n	800efb0 <_reclaim_reent+0xac>
 800ef1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef1c:	6819      	ldr	r1, [r3, #0]
 800ef1e:	b111      	cbz	r1, 800ef26 <_reclaim_reent+0x22>
 800ef20:	4620      	mov	r0, r4
 800ef22:	f001 fbe1 	bl	80106e8 <_free_r>
 800ef26:	6961      	ldr	r1, [r4, #20]
 800ef28:	b111      	cbz	r1, 800ef30 <_reclaim_reent+0x2c>
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f001 fbdc 	bl	80106e8 <_free_r>
 800ef30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef32:	b111      	cbz	r1, 800ef3a <_reclaim_reent+0x36>
 800ef34:	4620      	mov	r0, r4
 800ef36:	f001 fbd7 	bl	80106e8 <_free_r>
 800ef3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef3c:	b111      	cbz	r1, 800ef44 <_reclaim_reent+0x40>
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f001 fbd2 	bl	80106e8 <_free_r>
 800ef44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ef46:	b111      	cbz	r1, 800ef4e <_reclaim_reent+0x4a>
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f001 fbcd 	bl	80106e8 <_free_r>
 800ef4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef50:	b111      	cbz	r1, 800ef58 <_reclaim_reent+0x54>
 800ef52:	4620      	mov	r0, r4
 800ef54:	f001 fbc8 	bl	80106e8 <_free_r>
 800ef58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ef5a:	b111      	cbz	r1, 800ef62 <_reclaim_reent+0x5e>
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f001 fbc3 	bl	80106e8 <_free_r>
 800ef62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ef64:	b111      	cbz	r1, 800ef6c <_reclaim_reent+0x68>
 800ef66:	4620      	mov	r0, r4
 800ef68:	f001 fbbe 	bl	80106e8 <_free_r>
 800ef6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef6e:	b111      	cbz	r1, 800ef76 <_reclaim_reent+0x72>
 800ef70:	4620      	mov	r0, r4
 800ef72:	f001 fbb9 	bl	80106e8 <_free_r>
 800ef76:	69a3      	ldr	r3, [r4, #24]
 800ef78:	b1e3      	cbz	r3, 800efb4 <_reclaim_reent+0xb0>
 800ef7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	4798      	blx	r3
 800ef80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef82:	b1b9      	cbz	r1, 800efb4 <_reclaim_reent+0xb0>
 800ef84:	4620      	mov	r0, r4
 800ef86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef8a:	f7ff bfad 	b.w	800eee8 <cleanup_glue>
 800ef8e:	5949      	ldr	r1, [r1, r5]
 800ef90:	b941      	cbnz	r1, 800efa4 <_reclaim_reent+0xa0>
 800ef92:	3504      	adds	r5, #4
 800ef94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef96:	2d80      	cmp	r5, #128	; 0x80
 800ef98:	68d9      	ldr	r1, [r3, #12]
 800ef9a:	d1f8      	bne.n	800ef8e <_reclaim_reent+0x8a>
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f001 fba3 	bl	80106e8 <_free_r>
 800efa2:	e7ba      	b.n	800ef1a <_reclaim_reent+0x16>
 800efa4:	680e      	ldr	r6, [r1, #0]
 800efa6:	4620      	mov	r0, r4
 800efa8:	f001 fb9e 	bl	80106e8 <_free_r>
 800efac:	4631      	mov	r1, r6
 800efae:	e7ef      	b.n	800ef90 <_reclaim_reent+0x8c>
 800efb0:	2500      	movs	r5, #0
 800efb2:	e7ef      	b.n	800ef94 <_reclaim_reent+0x90>
 800efb4:	bd70      	pop	{r4, r5, r6, pc}
 800efb6:	bf00      	nop
 800efb8:	20000210 	.word	0x20000210

0800efbc <_sbrk_r>:
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	4d06      	ldr	r5, [pc, #24]	; (800efd8 <_sbrk_r+0x1c>)
 800efc0:	2300      	movs	r3, #0
 800efc2:	4604      	mov	r4, r0
 800efc4:	4608      	mov	r0, r1
 800efc6:	602b      	str	r3, [r5, #0]
 800efc8:	f7f2 fd9c 	bl	8001b04 <_sbrk>
 800efcc:	1c43      	adds	r3, r0, #1
 800efce:	d102      	bne.n	800efd6 <_sbrk_r+0x1a>
 800efd0:	682b      	ldr	r3, [r5, #0]
 800efd2:	b103      	cbz	r3, 800efd6 <_sbrk_r+0x1a>
 800efd4:	6023      	str	r3, [r4, #0]
 800efd6:	bd38      	pop	{r3, r4, r5, pc}
 800efd8:	200063ac 	.word	0x200063ac

0800efdc <siprintf>:
 800efdc:	b40e      	push	{r1, r2, r3}
 800efde:	b500      	push	{lr}
 800efe0:	b09c      	sub	sp, #112	; 0x70
 800efe2:	ab1d      	add	r3, sp, #116	; 0x74
 800efe4:	9002      	str	r0, [sp, #8]
 800efe6:	9006      	str	r0, [sp, #24]
 800efe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efec:	4809      	ldr	r0, [pc, #36]	; (800f014 <siprintf+0x38>)
 800efee:	9107      	str	r1, [sp, #28]
 800eff0:	9104      	str	r1, [sp, #16]
 800eff2:	4909      	ldr	r1, [pc, #36]	; (800f018 <siprintf+0x3c>)
 800eff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eff8:	9105      	str	r1, [sp, #20]
 800effa:	6800      	ldr	r0, [r0, #0]
 800effc:	9301      	str	r3, [sp, #4]
 800effe:	a902      	add	r1, sp, #8
 800f000:	f001 fc1a 	bl	8010838 <_svfiprintf_r>
 800f004:	9b02      	ldr	r3, [sp, #8]
 800f006:	2200      	movs	r2, #0
 800f008:	701a      	strb	r2, [r3, #0]
 800f00a:	b01c      	add	sp, #112	; 0x70
 800f00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f010:	b003      	add	sp, #12
 800f012:	4770      	bx	lr
 800f014:	20000210 	.word	0x20000210
 800f018:	ffff0208 	.word	0xffff0208

0800f01c <__sread>:
 800f01c:	b510      	push	{r4, lr}
 800f01e:	460c      	mov	r4, r1
 800f020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f024:	f001 fd08 	bl	8010a38 <_read_r>
 800f028:	2800      	cmp	r0, #0
 800f02a:	bfab      	itete	ge
 800f02c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f02e:	89a3      	ldrhlt	r3, [r4, #12]
 800f030:	181b      	addge	r3, r3, r0
 800f032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f036:	bfac      	ite	ge
 800f038:	6563      	strge	r3, [r4, #84]	; 0x54
 800f03a:	81a3      	strhlt	r3, [r4, #12]
 800f03c:	bd10      	pop	{r4, pc}

0800f03e <__swrite>:
 800f03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f042:	461f      	mov	r7, r3
 800f044:	898b      	ldrh	r3, [r1, #12]
 800f046:	05db      	lsls	r3, r3, #23
 800f048:	4605      	mov	r5, r0
 800f04a:	460c      	mov	r4, r1
 800f04c:	4616      	mov	r6, r2
 800f04e:	d505      	bpl.n	800f05c <__swrite+0x1e>
 800f050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f054:	2302      	movs	r3, #2
 800f056:	2200      	movs	r2, #0
 800f058:	f000 ff86 	bl	800ff68 <_lseek_r>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f066:	81a3      	strh	r3, [r4, #12]
 800f068:	4632      	mov	r2, r6
 800f06a:	463b      	mov	r3, r7
 800f06c:	4628      	mov	r0, r5
 800f06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f072:	f000 b817 	b.w	800f0a4 <_write_r>

0800f076 <__sseek>:
 800f076:	b510      	push	{r4, lr}
 800f078:	460c      	mov	r4, r1
 800f07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f07e:	f000 ff73 	bl	800ff68 <_lseek_r>
 800f082:	1c43      	adds	r3, r0, #1
 800f084:	89a3      	ldrh	r3, [r4, #12]
 800f086:	bf15      	itete	ne
 800f088:	6560      	strne	r0, [r4, #84]	; 0x54
 800f08a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f08e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f092:	81a3      	strheq	r3, [r4, #12]
 800f094:	bf18      	it	ne
 800f096:	81a3      	strhne	r3, [r4, #12]
 800f098:	bd10      	pop	{r4, pc}

0800f09a <__sclose>:
 800f09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f09e:	f000 b813 	b.w	800f0c8 <_close_r>
	...

0800f0a4 <_write_r>:
 800f0a4:	b538      	push	{r3, r4, r5, lr}
 800f0a6:	4d07      	ldr	r5, [pc, #28]	; (800f0c4 <_write_r+0x20>)
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	4608      	mov	r0, r1
 800f0ac:	4611      	mov	r1, r2
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	602a      	str	r2, [r5, #0]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	f7f2 fcd5 	bl	8001a62 <_write>
 800f0b8:	1c43      	adds	r3, r0, #1
 800f0ba:	d102      	bne.n	800f0c2 <_write_r+0x1e>
 800f0bc:	682b      	ldr	r3, [r5, #0]
 800f0be:	b103      	cbz	r3, 800f0c2 <_write_r+0x1e>
 800f0c0:	6023      	str	r3, [r4, #0]
 800f0c2:	bd38      	pop	{r3, r4, r5, pc}
 800f0c4:	200063ac 	.word	0x200063ac

0800f0c8 <_close_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4d06      	ldr	r5, [pc, #24]	; (800f0e4 <_close_r+0x1c>)
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	4608      	mov	r0, r1
 800f0d2:	602b      	str	r3, [r5, #0]
 800f0d4:	f7f2 fce1 	bl	8001a9a <_close>
 800f0d8:	1c43      	adds	r3, r0, #1
 800f0da:	d102      	bne.n	800f0e2 <_close_r+0x1a>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	b103      	cbz	r3, 800f0e2 <_close_r+0x1a>
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	200063ac 	.word	0x200063ac

0800f0e8 <quorem>:
 800f0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	6903      	ldr	r3, [r0, #16]
 800f0ee:	690c      	ldr	r4, [r1, #16]
 800f0f0:	42a3      	cmp	r3, r4
 800f0f2:	4607      	mov	r7, r0
 800f0f4:	f2c0 8081 	blt.w	800f1fa <quorem+0x112>
 800f0f8:	3c01      	subs	r4, #1
 800f0fa:	f101 0814 	add.w	r8, r1, #20
 800f0fe:	f100 0514 	add.w	r5, r0, #20
 800f102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f106:	9301      	str	r3, [sp, #4]
 800f108:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f10c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f110:	3301      	adds	r3, #1
 800f112:	429a      	cmp	r2, r3
 800f114:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f11c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f120:	d331      	bcc.n	800f186 <quorem+0x9e>
 800f122:	f04f 0e00 	mov.w	lr, #0
 800f126:	4640      	mov	r0, r8
 800f128:	46ac      	mov	ip, r5
 800f12a:	46f2      	mov	sl, lr
 800f12c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f130:	b293      	uxth	r3, r2
 800f132:	fb06 e303 	mla	r3, r6, r3, lr
 800f136:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	ebaa 0303 	sub.w	r3, sl, r3
 800f140:	f8dc a000 	ldr.w	sl, [ip]
 800f144:	0c12      	lsrs	r2, r2, #16
 800f146:	fa13 f38a 	uxtah	r3, r3, sl
 800f14a:	fb06 e202 	mla	r2, r6, r2, lr
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	9b00      	ldr	r3, [sp, #0]
 800f152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f156:	b292      	uxth	r2, r2
 800f158:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f15c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f160:	f8bd 3000 	ldrh.w	r3, [sp]
 800f164:	4581      	cmp	r9, r0
 800f166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f16a:	f84c 3b04 	str.w	r3, [ip], #4
 800f16e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f172:	d2db      	bcs.n	800f12c <quorem+0x44>
 800f174:	f855 300b 	ldr.w	r3, [r5, fp]
 800f178:	b92b      	cbnz	r3, 800f186 <quorem+0x9e>
 800f17a:	9b01      	ldr	r3, [sp, #4]
 800f17c:	3b04      	subs	r3, #4
 800f17e:	429d      	cmp	r5, r3
 800f180:	461a      	mov	r2, r3
 800f182:	d32e      	bcc.n	800f1e2 <quorem+0xfa>
 800f184:	613c      	str	r4, [r7, #16]
 800f186:	4638      	mov	r0, r7
 800f188:	f001 f996 	bl	80104b8 <__mcmp>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	db24      	blt.n	800f1da <quorem+0xf2>
 800f190:	3601      	adds	r6, #1
 800f192:	4628      	mov	r0, r5
 800f194:	f04f 0c00 	mov.w	ip, #0
 800f198:	f858 2b04 	ldr.w	r2, [r8], #4
 800f19c:	f8d0 e000 	ldr.w	lr, [r0]
 800f1a0:	b293      	uxth	r3, r2
 800f1a2:	ebac 0303 	sub.w	r3, ip, r3
 800f1a6:	0c12      	lsrs	r2, r2, #16
 800f1a8:	fa13 f38e 	uxtah	r3, r3, lr
 800f1ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f1b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1ba:	45c1      	cmp	r9, r8
 800f1bc:	f840 3b04 	str.w	r3, [r0], #4
 800f1c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f1c4:	d2e8      	bcs.n	800f198 <quorem+0xb0>
 800f1c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1ce:	b922      	cbnz	r2, 800f1da <quorem+0xf2>
 800f1d0:	3b04      	subs	r3, #4
 800f1d2:	429d      	cmp	r5, r3
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	d30a      	bcc.n	800f1ee <quorem+0x106>
 800f1d8:	613c      	str	r4, [r7, #16]
 800f1da:	4630      	mov	r0, r6
 800f1dc:	b003      	add	sp, #12
 800f1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e2:	6812      	ldr	r2, [r2, #0]
 800f1e4:	3b04      	subs	r3, #4
 800f1e6:	2a00      	cmp	r2, #0
 800f1e8:	d1cc      	bne.n	800f184 <quorem+0x9c>
 800f1ea:	3c01      	subs	r4, #1
 800f1ec:	e7c7      	b.n	800f17e <quorem+0x96>
 800f1ee:	6812      	ldr	r2, [r2, #0]
 800f1f0:	3b04      	subs	r3, #4
 800f1f2:	2a00      	cmp	r2, #0
 800f1f4:	d1f0      	bne.n	800f1d8 <quorem+0xf0>
 800f1f6:	3c01      	subs	r4, #1
 800f1f8:	e7eb      	b.n	800f1d2 <quorem+0xea>
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	e7ee      	b.n	800f1dc <quorem+0xf4>
	...

0800f200 <_dtoa_r>:
 800f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f204:	ed2d 8b04 	vpush	{d8-d9}
 800f208:	ec57 6b10 	vmov	r6, r7, d0
 800f20c:	b093      	sub	sp, #76	; 0x4c
 800f20e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f214:	9106      	str	r1, [sp, #24]
 800f216:	ee10 aa10 	vmov	sl, s0
 800f21a:	4604      	mov	r4, r0
 800f21c:	9209      	str	r2, [sp, #36]	; 0x24
 800f21e:	930c      	str	r3, [sp, #48]	; 0x30
 800f220:	46bb      	mov	fp, r7
 800f222:	b975      	cbnz	r5, 800f242 <_dtoa_r+0x42>
 800f224:	2010      	movs	r0, #16
 800f226:	f000 feb1 	bl	800ff8c <malloc>
 800f22a:	4602      	mov	r2, r0
 800f22c:	6260      	str	r0, [r4, #36]	; 0x24
 800f22e:	b920      	cbnz	r0, 800f23a <_dtoa_r+0x3a>
 800f230:	4ba7      	ldr	r3, [pc, #668]	; (800f4d0 <_dtoa_r+0x2d0>)
 800f232:	21ea      	movs	r1, #234	; 0xea
 800f234:	48a7      	ldr	r0, [pc, #668]	; (800f4d4 <_dtoa_r+0x2d4>)
 800f236:	f001 fc11 	bl	8010a5c <__assert_func>
 800f23a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f23e:	6005      	str	r5, [r0, #0]
 800f240:	60c5      	str	r5, [r0, #12]
 800f242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f244:	6819      	ldr	r1, [r3, #0]
 800f246:	b151      	cbz	r1, 800f25e <_dtoa_r+0x5e>
 800f248:	685a      	ldr	r2, [r3, #4]
 800f24a:	604a      	str	r2, [r1, #4]
 800f24c:	2301      	movs	r3, #1
 800f24e:	4093      	lsls	r3, r2
 800f250:	608b      	str	r3, [r1, #8]
 800f252:	4620      	mov	r0, r4
 800f254:	f000 feee 	bl	8010034 <_Bfree>
 800f258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f25a:	2200      	movs	r2, #0
 800f25c:	601a      	str	r2, [r3, #0]
 800f25e:	1e3b      	subs	r3, r7, #0
 800f260:	bfaa      	itet	ge
 800f262:	2300      	movge	r3, #0
 800f264:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f268:	f8c8 3000 	strge.w	r3, [r8]
 800f26c:	4b9a      	ldr	r3, [pc, #616]	; (800f4d8 <_dtoa_r+0x2d8>)
 800f26e:	bfbc      	itt	lt
 800f270:	2201      	movlt	r2, #1
 800f272:	f8c8 2000 	strlt.w	r2, [r8]
 800f276:	ea33 030b 	bics.w	r3, r3, fp
 800f27a:	d11b      	bne.n	800f2b4 <_dtoa_r+0xb4>
 800f27c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f27e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f282:	6013      	str	r3, [r2, #0]
 800f284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f288:	4333      	orrs	r3, r6
 800f28a:	f000 8592 	beq.w	800fdb2 <_dtoa_r+0xbb2>
 800f28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f290:	b963      	cbnz	r3, 800f2ac <_dtoa_r+0xac>
 800f292:	4b92      	ldr	r3, [pc, #584]	; (800f4dc <_dtoa_r+0x2dc>)
 800f294:	e022      	b.n	800f2dc <_dtoa_r+0xdc>
 800f296:	4b92      	ldr	r3, [pc, #584]	; (800f4e0 <_dtoa_r+0x2e0>)
 800f298:	9301      	str	r3, [sp, #4]
 800f29a:	3308      	adds	r3, #8
 800f29c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f29e:	6013      	str	r3, [r2, #0]
 800f2a0:	9801      	ldr	r0, [sp, #4]
 800f2a2:	b013      	add	sp, #76	; 0x4c
 800f2a4:	ecbd 8b04 	vpop	{d8-d9}
 800f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ac:	4b8b      	ldr	r3, [pc, #556]	; (800f4dc <_dtoa_r+0x2dc>)
 800f2ae:	9301      	str	r3, [sp, #4]
 800f2b0:	3303      	adds	r3, #3
 800f2b2:	e7f3      	b.n	800f29c <_dtoa_r+0x9c>
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4650      	mov	r0, sl
 800f2ba:	4659      	mov	r1, fp
 800f2bc:	f7f1 fc14 	bl	8000ae8 <__aeabi_dcmpeq>
 800f2c0:	ec4b ab19 	vmov	d9, sl, fp
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	b158      	cbz	r0, 800f2e0 <_dtoa_r+0xe0>
 800f2c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	6013      	str	r3, [r2, #0]
 800f2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 856b 	beq.w	800fdac <_dtoa_r+0xbac>
 800f2d6:	4883      	ldr	r0, [pc, #524]	; (800f4e4 <_dtoa_r+0x2e4>)
 800f2d8:	6018      	str	r0, [r3, #0]
 800f2da:	1e43      	subs	r3, r0, #1
 800f2dc:	9301      	str	r3, [sp, #4]
 800f2de:	e7df      	b.n	800f2a0 <_dtoa_r+0xa0>
 800f2e0:	ec4b ab10 	vmov	d0, sl, fp
 800f2e4:	aa10      	add	r2, sp, #64	; 0x40
 800f2e6:	a911      	add	r1, sp, #68	; 0x44
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f001 f98b 	bl	8010604 <__d2b>
 800f2ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f2f2:	ee08 0a10 	vmov	s16, r0
 800f2f6:	2d00      	cmp	r5, #0
 800f2f8:	f000 8084 	beq.w	800f404 <_dtoa_r+0x204>
 800f2fc:	ee19 3a90 	vmov	r3, s19
 800f300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f304:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f308:	4656      	mov	r6, sl
 800f30a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f30e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f312:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f316:	4b74      	ldr	r3, [pc, #464]	; (800f4e8 <_dtoa_r+0x2e8>)
 800f318:	2200      	movs	r2, #0
 800f31a:	4630      	mov	r0, r6
 800f31c:	4639      	mov	r1, r7
 800f31e:	f7f0 ffc3 	bl	80002a8 <__aeabi_dsub>
 800f322:	a365      	add	r3, pc, #404	; (adr r3, 800f4b8 <_dtoa_r+0x2b8>)
 800f324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f328:	f7f1 f976 	bl	8000618 <__aeabi_dmul>
 800f32c:	a364      	add	r3, pc, #400	; (adr r3, 800f4c0 <_dtoa_r+0x2c0>)
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	f7f0 ffbb 	bl	80002ac <__adddf3>
 800f336:	4606      	mov	r6, r0
 800f338:	4628      	mov	r0, r5
 800f33a:	460f      	mov	r7, r1
 800f33c:	f7f1 f902 	bl	8000544 <__aeabi_i2d>
 800f340:	a361      	add	r3, pc, #388	; (adr r3, 800f4c8 <_dtoa_r+0x2c8>)
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	f7f1 f967 	bl	8000618 <__aeabi_dmul>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	4630      	mov	r0, r6
 800f350:	4639      	mov	r1, r7
 800f352:	f7f0 ffab 	bl	80002ac <__adddf3>
 800f356:	4606      	mov	r6, r0
 800f358:	460f      	mov	r7, r1
 800f35a:	f7f1 fc0d 	bl	8000b78 <__aeabi_d2iz>
 800f35e:	2200      	movs	r2, #0
 800f360:	9000      	str	r0, [sp, #0]
 800f362:	2300      	movs	r3, #0
 800f364:	4630      	mov	r0, r6
 800f366:	4639      	mov	r1, r7
 800f368:	f7f1 fbc8 	bl	8000afc <__aeabi_dcmplt>
 800f36c:	b150      	cbz	r0, 800f384 <_dtoa_r+0x184>
 800f36e:	9800      	ldr	r0, [sp, #0]
 800f370:	f7f1 f8e8 	bl	8000544 <__aeabi_i2d>
 800f374:	4632      	mov	r2, r6
 800f376:	463b      	mov	r3, r7
 800f378:	f7f1 fbb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f37c:	b910      	cbnz	r0, 800f384 <_dtoa_r+0x184>
 800f37e:	9b00      	ldr	r3, [sp, #0]
 800f380:	3b01      	subs	r3, #1
 800f382:	9300      	str	r3, [sp, #0]
 800f384:	9b00      	ldr	r3, [sp, #0]
 800f386:	2b16      	cmp	r3, #22
 800f388:	d85a      	bhi.n	800f440 <_dtoa_r+0x240>
 800f38a:	9a00      	ldr	r2, [sp, #0]
 800f38c:	4b57      	ldr	r3, [pc, #348]	; (800f4ec <_dtoa_r+0x2ec>)
 800f38e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f396:	ec51 0b19 	vmov	r0, r1, d9
 800f39a:	f7f1 fbaf 	bl	8000afc <__aeabi_dcmplt>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d050      	beq.n	800f444 <_dtoa_r+0x244>
 800f3a2:	9b00      	ldr	r3, [sp, #0]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3ae:	1b5d      	subs	r5, r3, r5
 800f3b0:	1e6b      	subs	r3, r5, #1
 800f3b2:	9305      	str	r3, [sp, #20]
 800f3b4:	bf45      	ittet	mi
 800f3b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f3ba:	9304      	strmi	r3, [sp, #16]
 800f3bc:	2300      	movpl	r3, #0
 800f3be:	2300      	movmi	r3, #0
 800f3c0:	bf4c      	ite	mi
 800f3c2:	9305      	strmi	r3, [sp, #20]
 800f3c4:	9304      	strpl	r3, [sp, #16]
 800f3c6:	9b00      	ldr	r3, [sp, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	db3d      	blt.n	800f448 <_dtoa_r+0x248>
 800f3cc:	9b05      	ldr	r3, [sp, #20]
 800f3ce:	9a00      	ldr	r2, [sp, #0]
 800f3d0:	920a      	str	r2, [sp, #40]	; 0x28
 800f3d2:	4413      	add	r3, r2
 800f3d4:	9305      	str	r3, [sp, #20]
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	9307      	str	r3, [sp, #28]
 800f3da:	9b06      	ldr	r3, [sp, #24]
 800f3dc:	2b09      	cmp	r3, #9
 800f3de:	f200 8089 	bhi.w	800f4f4 <_dtoa_r+0x2f4>
 800f3e2:	2b05      	cmp	r3, #5
 800f3e4:	bfc4      	itt	gt
 800f3e6:	3b04      	subgt	r3, #4
 800f3e8:	9306      	strgt	r3, [sp, #24]
 800f3ea:	9b06      	ldr	r3, [sp, #24]
 800f3ec:	f1a3 0302 	sub.w	r3, r3, #2
 800f3f0:	bfcc      	ite	gt
 800f3f2:	2500      	movgt	r5, #0
 800f3f4:	2501      	movle	r5, #1
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	f200 8087 	bhi.w	800f50a <_dtoa_r+0x30a>
 800f3fc:	e8df f003 	tbb	[pc, r3]
 800f400:	59383a2d 	.word	0x59383a2d
 800f404:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f408:	441d      	add	r5, r3
 800f40a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f40e:	2b20      	cmp	r3, #32
 800f410:	bfc1      	itttt	gt
 800f412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f416:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f41a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f41e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f422:	bfda      	itte	le
 800f424:	f1c3 0320 	rsble	r3, r3, #32
 800f428:	fa06 f003 	lslle.w	r0, r6, r3
 800f42c:	4318      	orrgt	r0, r3
 800f42e:	f7f1 f879 	bl	8000524 <__aeabi_ui2d>
 800f432:	2301      	movs	r3, #1
 800f434:	4606      	mov	r6, r0
 800f436:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f43a:	3d01      	subs	r5, #1
 800f43c:	930e      	str	r3, [sp, #56]	; 0x38
 800f43e:	e76a      	b.n	800f316 <_dtoa_r+0x116>
 800f440:	2301      	movs	r3, #1
 800f442:	e7b2      	b.n	800f3aa <_dtoa_r+0x1aa>
 800f444:	900b      	str	r0, [sp, #44]	; 0x2c
 800f446:	e7b1      	b.n	800f3ac <_dtoa_r+0x1ac>
 800f448:	9b04      	ldr	r3, [sp, #16]
 800f44a:	9a00      	ldr	r2, [sp, #0]
 800f44c:	1a9b      	subs	r3, r3, r2
 800f44e:	9304      	str	r3, [sp, #16]
 800f450:	4253      	negs	r3, r2
 800f452:	9307      	str	r3, [sp, #28]
 800f454:	2300      	movs	r3, #0
 800f456:	930a      	str	r3, [sp, #40]	; 0x28
 800f458:	e7bf      	b.n	800f3da <_dtoa_r+0x1da>
 800f45a:	2300      	movs	r3, #0
 800f45c:	9308      	str	r3, [sp, #32]
 800f45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f460:	2b00      	cmp	r3, #0
 800f462:	dc55      	bgt.n	800f510 <_dtoa_r+0x310>
 800f464:	2301      	movs	r3, #1
 800f466:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f46a:	461a      	mov	r2, r3
 800f46c:	9209      	str	r2, [sp, #36]	; 0x24
 800f46e:	e00c      	b.n	800f48a <_dtoa_r+0x28a>
 800f470:	2301      	movs	r3, #1
 800f472:	e7f3      	b.n	800f45c <_dtoa_r+0x25c>
 800f474:	2300      	movs	r3, #0
 800f476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f478:	9308      	str	r3, [sp, #32]
 800f47a:	9b00      	ldr	r3, [sp, #0]
 800f47c:	4413      	add	r3, r2
 800f47e:	9302      	str	r3, [sp, #8]
 800f480:	3301      	adds	r3, #1
 800f482:	2b01      	cmp	r3, #1
 800f484:	9303      	str	r3, [sp, #12]
 800f486:	bfb8      	it	lt
 800f488:	2301      	movlt	r3, #1
 800f48a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f48c:	2200      	movs	r2, #0
 800f48e:	6042      	str	r2, [r0, #4]
 800f490:	2204      	movs	r2, #4
 800f492:	f102 0614 	add.w	r6, r2, #20
 800f496:	429e      	cmp	r6, r3
 800f498:	6841      	ldr	r1, [r0, #4]
 800f49a:	d93d      	bls.n	800f518 <_dtoa_r+0x318>
 800f49c:	4620      	mov	r0, r4
 800f49e:	f000 fd89 	bl	800ffb4 <_Balloc>
 800f4a2:	9001      	str	r0, [sp, #4]
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d13b      	bne.n	800f520 <_dtoa_r+0x320>
 800f4a8:	4b11      	ldr	r3, [pc, #68]	; (800f4f0 <_dtoa_r+0x2f0>)
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f4b0:	e6c0      	b.n	800f234 <_dtoa_r+0x34>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e7df      	b.n	800f476 <_dtoa_r+0x276>
 800f4b6:	bf00      	nop
 800f4b8:	636f4361 	.word	0x636f4361
 800f4bc:	3fd287a7 	.word	0x3fd287a7
 800f4c0:	8b60c8b3 	.word	0x8b60c8b3
 800f4c4:	3fc68a28 	.word	0x3fc68a28
 800f4c8:	509f79fb 	.word	0x509f79fb
 800f4cc:	3fd34413 	.word	0x3fd34413
 800f4d0:	08013d09 	.word	0x08013d09
 800f4d4:	08013d20 	.word	0x08013d20
 800f4d8:	7ff00000 	.word	0x7ff00000
 800f4dc:	08013d05 	.word	0x08013d05
 800f4e0:	08013cfc 	.word	0x08013cfc
 800f4e4:	08013cd9 	.word	0x08013cd9
 800f4e8:	3ff80000 	.word	0x3ff80000
 800f4ec:	08013e10 	.word	0x08013e10
 800f4f0:	08013d7b 	.word	0x08013d7b
 800f4f4:	2501      	movs	r5, #1
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9306      	str	r3, [sp, #24]
 800f4fa:	9508      	str	r5, [sp, #32]
 800f4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f500:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f504:	2200      	movs	r2, #0
 800f506:	2312      	movs	r3, #18
 800f508:	e7b0      	b.n	800f46c <_dtoa_r+0x26c>
 800f50a:	2301      	movs	r3, #1
 800f50c:	9308      	str	r3, [sp, #32]
 800f50e:	e7f5      	b.n	800f4fc <_dtoa_r+0x2fc>
 800f510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f512:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f516:	e7b8      	b.n	800f48a <_dtoa_r+0x28a>
 800f518:	3101      	adds	r1, #1
 800f51a:	6041      	str	r1, [r0, #4]
 800f51c:	0052      	lsls	r2, r2, #1
 800f51e:	e7b8      	b.n	800f492 <_dtoa_r+0x292>
 800f520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f522:	9a01      	ldr	r2, [sp, #4]
 800f524:	601a      	str	r2, [r3, #0]
 800f526:	9b03      	ldr	r3, [sp, #12]
 800f528:	2b0e      	cmp	r3, #14
 800f52a:	f200 809d 	bhi.w	800f668 <_dtoa_r+0x468>
 800f52e:	2d00      	cmp	r5, #0
 800f530:	f000 809a 	beq.w	800f668 <_dtoa_r+0x468>
 800f534:	9b00      	ldr	r3, [sp, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	dd32      	ble.n	800f5a0 <_dtoa_r+0x3a0>
 800f53a:	4ab7      	ldr	r2, [pc, #732]	; (800f818 <_dtoa_r+0x618>)
 800f53c:	f003 030f 	and.w	r3, r3, #15
 800f540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f544:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f548:	9b00      	ldr	r3, [sp, #0]
 800f54a:	05d8      	lsls	r0, r3, #23
 800f54c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f550:	d516      	bpl.n	800f580 <_dtoa_r+0x380>
 800f552:	4bb2      	ldr	r3, [pc, #712]	; (800f81c <_dtoa_r+0x61c>)
 800f554:	ec51 0b19 	vmov	r0, r1, d9
 800f558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f55c:	f7f1 f986 	bl	800086c <__aeabi_ddiv>
 800f560:	f007 070f 	and.w	r7, r7, #15
 800f564:	4682      	mov	sl, r0
 800f566:	468b      	mov	fp, r1
 800f568:	2503      	movs	r5, #3
 800f56a:	4eac      	ldr	r6, [pc, #688]	; (800f81c <_dtoa_r+0x61c>)
 800f56c:	b957      	cbnz	r7, 800f584 <_dtoa_r+0x384>
 800f56e:	4642      	mov	r2, r8
 800f570:	464b      	mov	r3, r9
 800f572:	4650      	mov	r0, sl
 800f574:	4659      	mov	r1, fp
 800f576:	f7f1 f979 	bl	800086c <__aeabi_ddiv>
 800f57a:	4682      	mov	sl, r0
 800f57c:	468b      	mov	fp, r1
 800f57e:	e028      	b.n	800f5d2 <_dtoa_r+0x3d2>
 800f580:	2502      	movs	r5, #2
 800f582:	e7f2      	b.n	800f56a <_dtoa_r+0x36a>
 800f584:	07f9      	lsls	r1, r7, #31
 800f586:	d508      	bpl.n	800f59a <_dtoa_r+0x39a>
 800f588:	4640      	mov	r0, r8
 800f58a:	4649      	mov	r1, r9
 800f58c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f590:	f7f1 f842 	bl	8000618 <__aeabi_dmul>
 800f594:	3501      	adds	r5, #1
 800f596:	4680      	mov	r8, r0
 800f598:	4689      	mov	r9, r1
 800f59a:	107f      	asrs	r7, r7, #1
 800f59c:	3608      	adds	r6, #8
 800f59e:	e7e5      	b.n	800f56c <_dtoa_r+0x36c>
 800f5a0:	f000 809b 	beq.w	800f6da <_dtoa_r+0x4da>
 800f5a4:	9b00      	ldr	r3, [sp, #0]
 800f5a6:	4f9d      	ldr	r7, [pc, #628]	; (800f81c <_dtoa_r+0x61c>)
 800f5a8:	425e      	negs	r6, r3
 800f5aa:	4b9b      	ldr	r3, [pc, #620]	; (800f818 <_dtoa_r+0x618>)
 800f5ac:	f006 020f 	and.w	r2, r6, #15
 800f5b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	ec51 0b19 	vmov	r0, r1, d9
 800f5bc:	f7f1 f82c 	bl	8000618 <__aeabi_dmul>
 800f5c0:	1136      	asrs	r6, r6, #4
 800f5c2:	4682      	mov	sl, r0
 800f5c4:	468b      	mov	fp, r1
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	2502      	movs	r5, #2
 800f5ca:	2e00      	cmp	r6, #0
 800f5cc:	d17a      	bne.n	800f6c4 <_dtoa_r+0x4c4>
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d1d3      	bne.n	800f57a <_dtoa_r+0x37a>
 800f5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 8082 	beq.w	800f6de <_dtoa_r+0x4de>
 800f5da:	4b91      	ldr	r3, [pc, #580]	; (800f820 <_dtoa_r+0x620>)
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4650      	mov	r0, sl
 800f5e0:	4659      	mov	r1, fp
 800f5e2:	f7f1 fa8b 	bl	8000afc <__aeabi_dcmplt>
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	d079      	beq.n	800f6de <_dtoa_r+0x4de>
 800f5ea:	9b03      	ldr	r3, [sp, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d076      	beq.n	800f6de <_dtoa_r+0x4de>
 800f5f0:	9b02      	ldr	r3, [sp, #8]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	dd36      	ble.n	800f664 <_dtoa_r+0x464>
 800f5f6:	9b00      	ldr	r3, [sp, #0]
 800f5f8:	4650      	mov	r0, sl
 800f5fa:	4659      	mov	r1, fp
 800f5fc:	1e5f      	subs	r7, r3, #1
 800f5fe:	2200      	movs	r2, #0
 800f600:	4b88      	ldr	r3, [pc, #544]	; (800f824 <_dtoa_r+0x624>)
 800f602:	f7f1 f809 	bl	8000618 <__aeabi_dmul>
 800f606:	9e02      	ldr	r6, [sp, #8]
 800f608:	4682      	mov	sl, r0
 800f60a:	468b      	mov	fp, r1
 800f60c:	3501      	adds	r5, #1
 800f60e:	4628      	mov	r0, r5
 800f610:	f7f0 ff98 	bl	8000544 <__aeabi_i2d>
 800f614:	4652      	mov	r2, sl
 800f616:	465b      	mov	r3, fp
 800f618:	f7f0 fffe 	bl	8000618 <__aeabi_dmul>
 800f61c:	4b82      	ldr	r3, [pc, #520]	; (800f828 <_dtoa_r+0x628>)
 800f61e:	2200      	movs	r2, #0
 800f620:	f7f0 fe44 	bl	80002ac <__adddf3>
 800f624:	46d0      	mov	r8, sl
 800f626:	46d9      	mov	r9, fp
 800f628:	4682      	mov	sl, r0
 800f62a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f62e:	2e00      	cmp	r6, #0
 800f630:	d158      	bne.n	800f6e4 <_dtoa_r+0x4e4>
 800f632:	4b7e      	ldr	r3, [pc, #504]	; (800f82c <_dtoa_r+0x62c>)
 800f634:	2200      	movs	r2, #0
 800f636:	4640      	mov	r0, r8
 800f638:	4649      	mov	r1, r9
 800f63a:	f7f0 fe35 	bl	80002a8 <__aeabi_dsub>
 800f63e:	4652      	mov	r2, sl
 800f640:	465b      	mov	r3, fp
 800f642:	4680      	mov	r8, r0
 800f644:	4689      	mov	r9, r1
 800f646:	f7f1 fa77 	bl	8000b38 <__aeabi_dcmpgt>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	f040 8295 	bne.w	800fb7a <_dtoa_r+0x97a>
 800f650:	4652      	mov	r2, sl
 800f652:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f656:	4640      	mov	r0, r8
 800f658:	4649      	mov	r1, r9
 800f65a:	f7f1 fa4f 	bl	8000afc <__aeabi_dcmplt>
 800f65e:	2800      	cmp	r0, #0
 800f660:	f040 8289 	bne.w	800fb76 <_dtoa_r+0x976>
 800f664:	ec5b ab19 	vmov	sl, fp, d9
 800f668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f2c0 8148 	blt.w	800f900 <_dtoa_r+0x700>
 800f670:	9a00      	ldr	r2, [sp, #0]
 800f672:	2a0e      	cmp	r2, #14
 800f674:	f300 8144 	bgt.w	800f900 <_dtoa_r+0x700>
 800f678:	4b67      	ldr	r3, [pc, #412]	; (800f818 <_dtoa_r+0x618>)
 800f67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f67e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f684:	2b00      	cmp	r3, #0
 800f686:	f280 80d5 	bge.w	800f834 <_dtoa_r+0x634>
 800f68a:	9b03      	ldr	r3, [sp, #12]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f300 80d1 	bgt.w	800f834 <_dtoa_r+0x634>
 800f692:	f040 826f 	bne.w	800fb74 <_dtoa_r+0x974>
 800f696:	4b65      	ldr	r3, [pc, #404]	; (800f82c <_dtoa_r+0x62c>)
 800f698:	2200      	movs	r2, #0
 800f69a:	4640      	mov	r0, r8
 800f69c:	4649      	mov	r1, r9
 800f69e:	f7f0 ffbb 	bl	8000618 <__aeabi_dmul>
 800f6a2:	4652      	mov	r2, sl
 800f6a4:	465b      	mov	r3, fp
 800f6a6:	f7f1 fa3d 	bl	8000b24 <__aeabi_dcmpge>
 800f6aa:	9e03      	ldr	r6, [sp, #12]
 800f6ac:	4637      	mov	r7, r6
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	f040 8245 	bne.w	800fb3e <_dtoa_r+0x93e>
 800f6b4:	9d01      	ldr	r5, [sp, #4]
 800f6b6:	2331      	movs	r3, #49	; 0x31
 800f6b8:	f805 3b01 	strb.w	r3, [r5], #1
 800f6bc:	9b00      	ldr	r3, [sp, #0]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	e240      	b.n	800fb46 <_dtoa_r+0x946>
 800f6c4:	07f2      	lsls	r2, r6, #31
 800f6c6:	d505      	bpl.n	800f6d4 <_dtoa_r+0x4d4>
 800f6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6cc:	f7f0 ffa4 	bl	8000618 <__aeabi_dmul>
 800f6d0:	3501      	adds	r5, #1
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	1076      	asrs	r6, r6, #1
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	e777      	b.n	800f5ca <_dtoa_r+0x3ca>
 800f6da:	2502      	movs	r5, #2
 800f6dc:	e779      	b.n	800f5d2 <_dtoa_r+0x3d2>
 800f6de:	9f00      	ldr	r7, [sp, #0]
 800f6e0:	9e03      	ldr	r6, [sp, #12]
 800f6e2:	e794      	b.n	800f60e <_dtoa_r+0x40e>
 800f6e4:	9901      	ldr	r1, [sp, #4]
 800f6e6:	4b4c      	ldr	r3, [pc, #304]	; (800f818 <_dtoa_r+0x618>)
 800f6e8:	4431      	add	r1, r6
 800f6ea:	910d      	str	r1, [sp, #52]	; 0x34
 800f6ec:	9908      	ldr	r1, [sp, #32]
 800f6ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f6f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f6f6:	2900      	cmp	r1, #0
 800f6f8:	d043      	beq.n	800f782 <_dtoa_r+0x582>
 800f6fa:	494d      	ldr	r1, [pc, #308]	; (800f830 <_dtoa_r+0x630>)
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	f7f1 f8b5 	bl	800086c <__aeabi_ddiv>
 800f702:	4652      	mov	r2, sl
 800f704:	465b      	mov	r3, fp
 800f706:	f7f0 fdcf 	bl	80002a8 <__aeabi_dsub>
 800f70a:	9d01      	ldr	r5, [sp, #4]
 800f70c:	4682      	mov	sl, r0
 800f70e:	468b      	mov	fp, r1
 800f710:	4649      	mov	r1, r9
 800f712:	4640      	mov	r0, r8
 800f714:	f7f1 fa30 	bl	8000b78 <__aeabi_d2iz>
 800f718:	4606      	mov	r6, r0
 800f71a:	f7f0 ff13 	bl	8000544 <__aeabi_i2d>
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	4640      	mov	r0, r8
 800f724:	4649      	mov	r1, r9
 800f726:	f7f0 fdbf 	bl	80002a8 <__aeabi_dsub>
 800f72a:	3630      	adds	r6, #48	; 0x30
 800f72c:	f805 6b01 	strb.w	r6, [r5], #1
 800f730:	4652      	mov	r2, sl
 800f732:	465b      	mov	r3, fp
 800f734:	4680      	mov	r8, r0
 800f736:	4689      	mov	r9, r1
 800f738:	f7f1 f9e0 	bl	8000afc <__aeabi_dcmplt>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d163      	bne.n	800f808 <_dtoa_r+0x608>
 800f740:	4642      	mov	r2, r8
 800f742:	464b      	mov	r3, r9
 800f744:	4936      	ldr	r1, [pc, #216]	; (800f820 <_dtoa_r+0x620>)
 800f746:	2000      	movs	r0, #0
 800f748:	f7f0 fdae 	bl	80002a8 <__aeabi_dsub>
 800f74c:	4652      	mov	r2, sl
 800f74e:	465b      	mov	r3, fp
 800f750:	f7f1 f9d4 	bl	8000afc <__aeabi_dcmplt>
 800f754:	2800      	cmp	r0, #0
 800f756:	f040 80b5 	bne.w	800f8c4 <_dtoa_r+0x6c4>
 800f75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f75c:	429d      	cmp	r5, r3
 800f75e:	d081      	beq.n	800f664 <_dtoa_r+0x464>
 800f760:	4b30      	ldr	r3, [pc, #192]	; (800f824 <_dtoa_r+0x624>)
 800f762:	2200      	movs	r2, #0
 800f764:	4650      	mov	r0, sl
 800f766:	4659      	mov	r1, fp
 800f768:	f7f0 ff56 	bl	8000618 <__aeabi_dmul>
 800f76c:	4b2d      	ldr	r3, [pc, #180]	; (800f824 <_dtoa_r+0x624>)
 800f76e:	4682      	mov	sl, r0
 800f770:	468b      	mov	fp, r1
 800f772:	4640      	mov	r0, r8
 800f774:	4649      	mov	r1, r9
 800f776:	2200      	movs	r2, #0
 800f778:	f7f0 ff4e 	bl	8000618 <__aeabi_dmul>
 800f77c:	4680      	mov	r8, r0
 800f77e:	4689      	mov	r9, r1
 800f780:	e7c6      	b.n	800f710 <_dtoa_r+0x510>
 800f782:	4650      	mov	r0, sl
 800f784:	4659      	mov	r1, fp
 800f786:	f7f0 ff47 	bl	8000618 <__aeabi_dmul>
 800f78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f78c:	9d01      	ldr	r5, [sp, #4]
 800f78e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f790:	4682      	mov	sl, r0
 800f792:	468b      	mov	fp, r1
 800f794:	4649      	mov	r1, r9
 800f796:	4640      	mov	r0, r8
 800f798:	f7f1 f9ee 	bl	8000b78 <__aeabi_d2iz>
 800f79c:	4606      	mov	r6, r0
 800f79e:	f7f0 fed1 	bl	8000544 <__aeabi_i2d>
 800f7a2:	3630      	adds	r6, #48	; 0x30
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	f7f0 fd7c 	bl	80002a8 <__aeabi_dsub>
 800f7b0:	f805 6b01 	strb.w	r6, [r5], #1
 800f7b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7b6:	429d      	cmp	r5, r3
 800f7b8:	4680      	mov	r8, r0
 800f7ba:	4689      	mov	r9, r1
 800f7bc:	f04f 0200 	mov.w	r2, #0
 800f7c0:	d124      	bne.n	800f80c <_dtoa_r+0x60c>
 800f7c2:	4b1b      	ldr	r3, [pc, #108]	; (800f830 <_dtoa_r+0x630>)
 800f7c4:	4650      	mov	r0, sl
 800f7c6:	4659      	mov	r1, fp
 800f7c8:	f7f0 fd70 	bl	80002ac <__adddf3>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	4640      	mov	r0, r8
 800f7d2:	4649      	mov	r1, r9
 800f7d4:	f7f1 f9b0 	bl	8000b38 <__aeabi_dcmpgt>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d173      	bne.n	800f8c4 <_dtoa_r+0x6c4>
 800f7dc:	4652      	mov	r2, sl
 800f7de:	465b      	mov	r3, fp
 800f7e0:	4913      	ldr	r1, [pc, #76]	; (800f830 <_dtoa_r+0x630>)
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	f7f0 fd60 	bl	80002a8 <__aeabi_dsub>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	4649      	mov	r1, r9
 800f7f0:	f7f1 f984 	bl	8000afc <__aeabi_dcmplt>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	f43f af35 	beq.w	800f664 <_dtoa_r+0x464>
 800f7fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f7fc:	1e6b      	subs	r3, r5, #1
 800f7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800f800:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f804:	2b30      	cmp	r3, #48	; 0x30
 800f806:	d0f8      	beq.n	800f7fa <_dtoa_r+0x5fa>
 800f808:	9700      	str	r7, [sp, #0]
 800f80a:	e049      	b.n	800f8a0 <_dtoa_r+0x6a0>
 800f80c:	4b05      	ldr	r3, [pc, #20]	; (800f824 <_dtoa_r+0x624>)
 800f80e:	f7f0 ff03 	bl	8000618 <__aeabi_dmul>
 800f812:	4680      	mov	r8, r0
 800f814:	4689      	mov	r9, r1
 800f816:	e7bd      	b.n	800f794 <_dtoa_r+0x594>
 800f818:	08013e10 	.word	0x08013e10
 800f81c:	08013de8 	.word	0x08013de8
 800f820:	3ff00000 	.word	0x3ff00000
 800f824:	40240000 	.word	0x40240000
 800f828:	401c0000 	.word	0x401c0000
 800f82c:	40140000 	.word	0x40140000
 800f830:	3fe00000 	.word	0x3fe00000
 800f834:	9d01      	ldr	r5, [sp, #4]
 800f836:	4656      	mov	r6, sl
 800f838:	465f      	mov	r7, fp
 800f83a:	4642      	mov	r2, r8
 800f83c:	464b      	mov	r3, r9
 800f83e:	4630      	mov	r0, r6
 800f840:	4639      	mov	r1, r7
 800f842:	f7f1 f813 	bl	800086c <__aeabi_ddiv>
 800f846:	f7f1 f997 	bl	8000b78 <__aeabi_d2iz>
 800f84a:	4682      	mov	sl, r0
 800f84c:	f7f0 fe7a 	bl	8000544 <__aeabi_i2d>
 800f850:	4642      	mov	r2, r8
 800f852:	464b      	mov	r3, r9
 800f854:	f7f0 fee0 	bl	8000618 <__aeabi_dmul>
 800f858:	4602      	mov	r2, r0
 800f85a:	460b      	mov	r3, r1
 800f85c:	4630      	mov	r0, r6
 800f85e:	4639      	mov	r1, r7
 800f860:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f864:	f7f0 fd20 	bl	80002a8 <__aeabi_dsub>
 800f868:	f805 6b01 	strb.w	r6, [r5], #1
 800f86c:	9e01      	ldr	r6, [sp, #4]
 800f86e:	9f03      	ldr	r7, [sp, #12]
 800f870:	1bae      	subs	r6, r5, r6
 800f872:	42b7      	cmp	r7, r6
 800f874:	4602      	mov	r2, r0
 800f876:	460b      	mov	r3, r1
 800f878:	d135      	bne.n	800f8e6 <_dtoa_r+0x6e6>
 800f87a:	f7f0 fd17 	bl	80002ac <__adddf3>
 800f87e:	4642      	mov	r2, r8
 800f880:	464b      	mov	r3, r9
 800f882:	4606      	mov	r6, r0
 800f884:	460f      	mov	r7, r1
 800f886:	f7f1 f957 	bl	8000b38 <__aeabi_dcmpgt>
 800f88a:	b9d0      	cbnz	r0, 800f8c2 <_dtoa_r+0x6c2>
 800f88c:	4642      	mov	r2, r8
 800f88e:	464b      	mov	r3, r9
 800f890:	4630      	mov	r0, r6
 800f892:	4639      	mov	r1, r7
 800f894:	f7f1 f928 	bl	8000ae8 <__aeabi_dcmpeq>
 800f898:	b110      	cbz	r0, 800f8a0 <_dtoa_r+0x6a0>
 800f89a:	f01a 0f01 	tst.w	sl, #1
 800f89e:	d110      	bne.n	800f8c2 <_dtoa_r+0x6c2>
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	ee18 1a10 	vmov	r1, s16
 800f8a6:	f000 fbc5 	bl	8010034 <_Bfree>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	9800      	ldr	r0, [sp, #0]
 800f8ae:	702b      	strb	r3, [r5, #0]
 800f8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8b2:	3001      	adds	r0, #1
 800f8b4:	6018      	str	r0, [r3, #0]
 800f8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f43f acf1 	beq.w	800f2a0 <_dtoa_r+0xa0>
 800f8be:	601d      	str	r5, [r3, #0]
 800f8c0:	e4ee      	b.n	800f2a0 <_dtoa_r+0xa0>
 800f8c2:	9f00      	ldr	r7, [sp, #0]
 800f8c4:	462b      	mov	r3, r5
 800f8c6:	461d      	mov	r5, r3
 800f8c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8cc:	2a39      	cmp	r2, #57	; 0x39
 800f8ce:	d106      	bne.n	800f8de <_dtoa_r+0x6de>
 800f8d0:	9a01      	ldr	r2, [sp, #4]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d1f7      	bne.n	800f8c6 <_dtoa_r+0x6c6>
 800f8d6:	9901      	ldr	r1, [sp, #4]
 800f8d8:	2230      	movs	r2, #48	; 0x30
 800f8da:	3701      	adds	r7, #1
 800f8dc:	700a      	strb	r2, [r1, #0]
 800f8de:	781a      	ldrb	r2, [r3, #0]
 800f8e0:	3201      	adds	r2, #1
 800f8e2:	701a      	strb	r2, [r3, #0]
 800f8e4:	e790      	b.n	800f808 <_dtoa_r+0x608>
 800f8e6:	4ba6      	ldr	r3, [pc, #664]	; (800fb80 <_dtoa_r+0x980>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f7f0 fe95 	bl	8000618 <__aeabi_dmul>
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4606      	mov	r6, r0
 800f8f4:	460f      	mov	r7, r1
 800f8f6:	f7f1 f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d09d      	beq.n	800f83a <_dtoa_r+0x63a>
 800f8fe:	e7cf      	b.n	800f8a0 <_dtoa_r+0x6a0>
 800f900:	9a08      	ldr	r2, [sp, #32]
 800f902:	2a00      	cmp	r2, #0
 800f904:	f000 80d7 	beq.w	800fab6 <_dtoa_r+0x8b6>
 800f908:	9a06      	ldr	r2, [sp, #24]
 800f90a:	2a01      	cmp	r2, #1
 800f90c:	f300 80ba 	bgt.w	800fa84 <_dtoa_r+0x884>
 800f910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f912:	2a00      	cmp	r2, #0
 800f914:	f000 80b2 	beq.w	800fa7c <_dtoa_r+0x87c>
 800f918:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f91c:	9e07      	ldr	r6, [sp, #28]
 800f91e:	9d04      	ldr	r5, [sp, #16]
 800f920:	9a04      	ldr	r2, [sp, #16]
 800f922:	441a      	add	r2, r3
 800f924:	9204      	str	r2, [sp, #16]
 800f926:	9a05      	ldr	r2, [sp, #20]
 800f928:	2101      	movs	r1, #1
 800f92a:	441a      	add	r2, r3
 800f92c:	4620      	mov	r0, r4
 800f92e:	9205      	str	r2, [sp, #20]
 800f930:	f000 fc38 	bl	80101a4 <__i2b>
 800f934:	4607      	mov	r7, r0
 800f936:	2d00      	cmp	r5, #0
 800f938:	dd0c      	ble.n	800f954 <_dtoa_r+0x754>
 800f93a:	9b05      	ldr	r3, [sp, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	dd09      	ble.n	800f954 <_dtoa_r+0x754>
 800f940:	42ab      	cmp	r3, r5
 800f942:	9a04      	ldr	r2, [sp, #16]
 800f944:	bfa8      	it	ge
 800f946:	462b      	movge	r3, r5
 800f948:	1ad2      	subs	r2, r2, r3
 800f94a:	9204      	str	r2, [sp, #16]
 800f94c:	9a05      	ldr	r2, [sp, #20]
 800f94e:	1aed      	subs	r5, r5, r3
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	9305      	str	r3, [sp, #20]
 800f954:	9b07      	ldr	r3, [sp, #28]
 800f956:	b31b      	cbz	r3, 800f9a0 <_dtoa_r+0x7a0>
 800f958:	9b08      	ldr	r3, [sp, #32]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f000 80af 	beq.w	800fabe <_dtoa_r+0x8be>
 800f960:	2e00      	cmp	r6, #0
 800f962:	dd13      	ble.n	800f98c <_dtoa_r+0x78c>
 800f964:	4639      	mov	r1, r7
 800f966:	4632      	mov	r2, r6
 800f968:	4620      	mov	r0, r4
 800f96a:	f000 fcdb 	bl	8010324 <__pow5mult>
 800f96e:	ee18 2a10 	vmov	r2, s16
 800f972:	4601      	mov	r1, r0
 800f974:	4607      	mov	r7, r0
 800f976:	4620      	mov	r0, r4
 800f978:	f000 fc2a 	bl	80101d0 <__multiply>
 800f97c:	ee18 1a10 	vmov	r1, s16
 800f980:	4680      	mov	r8, r0
 800f982:	4620      	mov	r0, r4
 800f984:	f000 fb56 	bl	8010034 <_Bfree>
 800f988:	ee08 8a10 	vmov	s16, r8
 800f98c:	9b07      	ldr	r3, [sp, #28]
 800f98e:	1b9a      	subs	r2, r3, r6
 800f990:	d006      	beq.n	800f9a0 <_dtoa_r+0x7a0>
 800f992:	ee18 1a10 	vmov	r1, s16
 800f996:	4620      	mov	r0, r4
 800f998:	f000 fcc4 	bl	8010324 <__pow5mult>
 800f99c:	ee08 0a10 	vmov	s16, r0
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f000 fbfe 	bl	80101a4 <__i2b>
 800f9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	f340 8088 	ble.w	800fac2 <_dtoa_r+0x8c2>
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	4601      	mov	r1, r0
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f000 fcb4 	bl	8010324 <__pow5mult>
 800f9bc:	9b06      	ldr	r3, [sp, #24]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	4606      	mov	r6, r0
 800f9c2:	f340 8081 	ble.w	800fac8 <_dtoa_r+0x8c8>
 800f9c6:	f04f 0800 	mov.w	r8, #0
 800f9ca:	6933      	ldr	r3, [r6, #16]
 800f9cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f9d0:	6918      	ldr	r0, [r3, #16]
 800f9d2:	f000 fb97 	bl	8010104 <__hi0bits>
 800f9d6:	f1c0 0020 	rsb	r0, r0, #32
 800f9da:	9b05      	ldr	r3, [sp, #20]
 800f9dc:	4418      	add	r0, r3
 800f9de:	f010 001f 	ands.w	r0, r0, #31
 800f9e2:	f000 8092 	beq.w	800fb0a <_dtoa_r+0x90a>
 800f9e6:	f1c0 0320 	rsb	r3, r0, #32
 800f9ea:	2b04      	cmp	r3, #4
 800f9ec:	f340 808a 	ble.w	800fb04 <_dtoa_r+0x904>
 800f9f0:	f1c0 001c 	rsb	r0, r0, #28
 800f9f4:	9b04      	ldr	r3, [sp, #16]
 800f9f6:	4403      	add	r3, r0
 800f9f8:	9304      	str	r3, [sp, #16]
 800f9fa:	9b05      	ldr	r3, [sp, #20]
 800f9fc:	4403      	add	r3, r0
 800f9fe:	4405      	add	r5, r0
 800fa00:	9305      	str	r3, [sp, #20]
 800fa02:	9b04      	ldr	r3, [sp, #16]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	dd07      	ble.n	800fa18 <_dtoa_r+0x818>
 800fa08:	ee18 1a10 	vmov	r1, s16
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f000 fce2 	bl	80103d8 <__lshift>
 800fa14:	ee08 0a10 	vmov	s16, r0
 800fa18:	9b05      	ldr	r3, [sp, #20]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	dd05      	ble.n	800fa2a <_dtoa_r+0x82a>
 800fa1e:	4631      	mov	r1, r6
 800fa20:	461a      	mov	r2, r3
 800fa22:	4620      	mov	r0, r4
 800fa24:	f000 fcd8 	bl	80103d8 <__lshift>
 800fa28:	4606      	mov	r6, r0
 800fa2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d06e      	beq.n	800fb0e <_dtoa_r+0x90e>
 800fa30:	ee18 0a10 	vmov	r0, s16
 800fa34:	4631      	mov	r1, r6
 800fa36:	f000 fd3f 	bl	80104b8 <__mcmp>
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	da67      	bge.n	800fb0e <_dtoa_r+0x90e>
 800fa3e:	9b00      	ldr	r3, [sp, #0]
 800fa40:	3b01      	subs	r3, #1
 800fa42:	ee18 1a10 	vmov	r1, s16
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	220a      	movs	r2, #10
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f000 fb13 	bl	8010078 <__multadd>
 800fa52:	9b08      	ldr	r3, [sp, #32]
 800fa54:	ee08 0a10 	vmov	s16, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f000 81b1 	beq.w	800fdc0 <_dtoa_r+0xbc0>
 800fa5e:	2300      	movs	r3, #0
 800fa60:	4639      	mov	r1, r7
 800fa62:	220a      	movs	r2, #10
 800fa64:	4620      	mov	r0, r4
 800fa66:	f000 fb07 	bl	8010078 <__multadd>
 800fa6a:	9b02      	ldr	r3, [sp, #8]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	4607      	mov	r7, r0
 800fa70:	f300 808e 	bgt.w	800fb90 <_dtoa_r+0x990>
 800fa74:	9b06      	ldr	r3, [sp, #24]
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	dc51      	bgt.n	800fb1e <_dtoa_r+0x91e>
 800fa7a:	e089      	b.n	800fb90 <_dtoa_r+0x990>
 800fa7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa82:	e74b      	b.n	800f91c <_dtoa_r+0x71c>
 800fa84:	9b03      	ldr	r3, [sp, #12]
 800fa86:	1e5e      	subs	r6, r3, #1
 800fa88:	9b07      	ldr	r3, [sp, #28]
 800fa8a:	42b3      	cmp	r3, r6
 800fa8c:	bfbf      	itttt	lt
 800fa8e:	9b07      	ldrlt	r3, [sp, #28]
 800fa90:	9607      	strlt	r6, [sp, #28]
 800fa92:	1af2      	sublt	r2, r6, r3
 800fa94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fa96:	bfb6      	itet	lt
 800fa98:	189b      	addlt	r3, r3, r2
 800fa9a:	1b9e      	subge	r6, r3, r6
 800fa9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fa9e:	9b03      	ldr	r3, [sp, #12]
 800faa0:	bfb8      	it	lt
 800faa2:	2600      	movlt	r6, #0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	bfb7      	itett	lt
 800faa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800faac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fab0:	1a9d      	sublt	r5, r3, r2
 800fab2:	2300      	movlt	r3, #0
 800fab4:	e734      	b.n	800f920 <_dtoa_r+0x720>
 800fab6:	9e07      	ldr	r6, [sp, #28]
 800fab8:	9d04      	ldr	r5, [sp, #16]
 800faba:	9f08      	ldr	r7, [sp, #32]
 800fabc:	e73b      	b.n	800f936 <_dtoa_r+0x736>
 800fabe:	9a07      	ldr	r2, [sp, #28]
 800fac0:	e767      	b.n	800f992 <_dtoa_r+0x792>
 800fac2:	9b06      	ldr	r3, [sp, #24]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	dc18      	bgt.n	800fafa <_dtoa_r+0x8fa>
 800fac8:	f1ba 0f00 	cmp.w	sl, #0
 800facc:	d115      	bne.n	800fafa <_dtoa_r+0x8fa>
 800face:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fad2:	b993      	cbnz	r3, 800fafa <_dtoa_r+0x8fa>
 800fad4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fad8:	0d1b      	lsrs	r3, r3, #20
 800fada:	051b      	lsls	r3, r3, #20
 800fadc:	b183      	cbz	r3, 800fb00 <_dtoa_r+0x900>
 800fade:	9b04      	ldr	r3, [sp, #16]
 800fae0:	3301      	adds	r3, #1
 800fae2:	9304      	str	r3, [sp, #16]
 800fae4:	9b05      	ldr	r3, [sp, #20]
 800fae6:	3301      	adds	r3, #1
 800fae8:	9305      	str	r3, [sp, #20]
 800faea:	f04f 0801 	mov.w	r8, #1
 800faee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f47f af6a 	bne.w	800f9ca <_dtoa_r+0x7ca>
 800faf6:	2001      	movs	r0, #1
 800faf8:	e76f      	b.n	800f9da <_dtoa_r+0x7da>
 800fafa:	f04f 0800 	mov.w	r8, #0
 800fafe:	e7f6      	b.n	800faee <_dtoa_r+0x8ee>
 800fb00:	4698      	mov	r8, r3
 800fb02:	e7f4      	b.n	800faee <_dtoa_r+0x8ee>
 800fb04:	f43f af7d 	beq.w	800fa02 <_dtoa_r+0x802>
 800fb08:	4618      	mov	r0, r3
 800fb0a:	301c      	adds	r0, #28
 800fb0c:	e772      	b.n	800f9f4 <_dtoa_r+0x7f4>
 800fb0e:	9b03      	ldr	r3, [sp, #12]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	dc37      	bgt.n	800fb84 <_dtoa_r+0x984>
 800fb14:	9b06      	ldr	r3, [sp, #24]
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	dd34      	ble.n	800fb84 <_dtoa_r+0x984>
 800fb1a:	9b03      	ldr	r3, [sp, #12]
 800fb1c:	9302      	str	r3, [sp, #8]
 800fb1e:	9b02      	ldr	r3, [sp, #8]
 800fb20:	b96b      	cbnz	r3, 800fb3e <_dtoa_r+0x93e>
 800fb22:	4631      	mov	r1, r6
 800fb24:	2205      	movs	r2, #5
 800fb26:	4620      	mov	r0, r4
 800fb28:	f000 faa6 	bl	8010078 <__multadd>
 800fb2c:	4601      	mov	r1, r0
 800fb2e:	4606      	mov	r6, r0
 800fb30:	ee18 0a10 	vmov	r0, s16
 800fb34:	f000 fcc0 	bl	80104b8 <__mcmp>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	f73f adbb 	bgt.w	800f6b4 <_dtoa_r+0x4b4>
 800fb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb40:	9d01      	ldr	r5, [sp, #4]
 800fb42:	43db      	mvns	r3, r3
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	f04f 0800 	mov.w	r8, #0
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f000 fa71 	bl	8010034 <_Bfree>
 800fb52:	2f00      	cmp	r7, #0
 800fb54:	f43f aea4 	beq.w	800f8a0 <_dtoa_r+0x6a0>
 800fb58:	f1b8 0f00 	cmp.w	r8, #0
 800fb5c:	d005      	beq.n	800fb6a <_dtoa_r+0x96a>
 800fb5e:	45b8      	cmp	r8, r7
 800fb60:	d003      	beq.n	800fb6a <_dtoa_r+0x96a>
 800fb62:	4641      	mov	r1, r8
 800fb64:	4620      	mov	r0, r4
 800fb66:	f000 fa65 	bl	8010034 <_Bfree>
 800fb6a:	4639      	mov	r1, r7
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	f000 fa61 	bl	8010034 <_Bfree>
 800fb72:	e695      	b.n	800f8a0 <_dtoa_r+0x6a0>
 800fb74:	2600      	movs	r6, #0
 800fb76:	4637      	mov	r7, r6
 800fb78:	e7e1      	b.n	800fb3e <_dtoa_r+0x93e>
 800fb7a:	9700      	str	r7, [sp, #0]
 800fb7c:	4637      	mov	r7, r6
 800fb7e:	e599      	b.n	800f6b4 <_dtoa_r+0x4b4>
 800fb80:	40240000 	.word	0x40240000
 800fb84:	9b08      	ldr	r3, [sp, #32]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f000 80ca 	beq.w	800fd20 <_dtoa_r+0xb20>
 800fb8c:	9b03      	ldr	r3, [sp, #12]
 800fb8e:	9302      	str	r3, [sp, #8]
 800fb90:	2d00      	cmp	r5, #0
 800fb92:	dd05      	ble.n	800fba0 <_dtoa_r+0x9a0>
 800fb94:	4639      	mov	r1, r7
 800fb96:	462a      	mov	r2, r5
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f000 fc1d 	bl	80103d8 <__lshift>
 800fb9e:	4607      	mov	r7, r0
 800fba0:	f1b8 0f00 	cmp.w	r8, #0
 800fba4:	d05b      	beq.n	800fc5e <_dtoa_r+0xa5e>
 800fba6:	6879      	ldr	r1, [r7, #4]
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f000 fa03 	bl	800ffb4 <_Balloc>
 800fbae:	4605      	mov	r5, r0
 800fbb0:	b928      	cbnz	r0, 800fbbe <_dtoa_r+0x9be>
 800fbb2:	4b87      	ldr	r3, [pc, #540]	; (800fdd0 <_dtoa_r+0xbd0>)
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fbba:	f7ff bb3b 	b.w	800f234 <_dtoa_r+0x34>
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	3202      	adds	r2, #2
 800fbc2:	0092      	lsls	r2, r2, #2
 800fbc4:	f107 010c 	add.w	r1, r7, #12
 800fbc8:	300c      	adds	r0, #12
 800fbca:	f7fe fc78 	bl	800e4be <memcpy>
 800fbce:	2201      	movs	r2, #1
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f000 fc00 	bl	80103d8 <__lshift>
 800fbd8:	9b01      	ldr	r3, [sp, #4]
 800fbda:	f103 0901 	add.w	r9, r3, #1
 800fbde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	9305      	str	r3, [sp, #20]
 800fbe6:	f00a 0301 	and.w	r3, sl, #1
 800fbea:	46b8      	mov	r8, r7
 800fbec:	9304      	str	r3, [sp, #16]
 800fbee:	4607      	mov	r7, r0
 800fbf0:	4631      	mov	r1, r6
 800fbf2:	ee18 0a10 	vmov	r0, s16
 800fbf6:	f7ff fa77 	bl	800f0e8 <quorem>
 800fbfa:	4641      	mov	r1, r8
 800fbfc:	9002      	str	r0, [sp, #8]
 800fbfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc02:	ee18 0a10 	vmov	r0, s16
 800fc06:	f000 fc57 	bl	80104b8 <__mcmp>
 800fc0a:	463a      	mov	r2, r7
 800fc0c:	9003      	str	r0, [sp, #12]
 800fc0e:	4631      	mov	r1, r6
 800fc10:	4620      	mov	r0, r4
 800fc12:	f000 fc6d 	bl	80104f0 <__mdiff>
 800fc16:	68c2      	ldr	r2, [r0, #12]
 800fc18:	f109 3bff 	add.w	fp, r9, #4294967295
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	bb02      	cbnz	r2, 800fc62 <_dtoa_r+0xa62>
 800fc20:	4601      	mov	r1, r0
 800fc22:	ee18 0a10 	vmov	r0, s16
 800fc26:	f000 fc47 	bl	80104b8 <__mcmp>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	4620      	mov	r0, r4
 800fc30:	9207      	str	r2, [sp, #28]
 800fc32:	f000 f9ff 	bl	8010034 <_Bfree>
 800fc36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fc3a:	ea43 0102 	orr.w	r1, r3, r2
 800fc3e:	9b04      	ldr	r3, [sp, #16]
 800fc40:	430b      	orrs	r3, r1
 800fc42:	464d      	mov	r5, r9
 800fc44:	d10f      	bne.n	800fc66 <_dtoa_r+0xa66>
 800fc46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fc4a:	d02a      	beq.n	800fca2 <_dtoa_r+0xaa2>
 800fc4c:	9b03      	ldr	r3, [sp, #12]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	dd02      	ble.n	800fc58 <_dtoa_r+0xa58>
 800fc52:	9b02      	ldr	r3, [sp, #8]
 800fc54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fc58:	f88b a000 	strb.w	sl, [fp]
 800fc5c:	e775      	b.n	800fb4a <_dtoa_r+0x94a>
 800fc5e:	4638      	mov	r0, r7
 800fc60:	e7ba      	b.n	800fbd8 <_dtoa_r+0x9d8>
 800fc62:	2201      	movs	r2, #1
 800fc64:	e7e2      	b.n	800fc2c <_dtoa_r+0xa2c>
 800fc66:	9b03      	ldr	r3, [sp, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	db04      	blt.n	800fc76 <_dtoa_r+0xa76>
 800fc6c:	9906      	ldr	r1, [sp, #24]
 800fc6e:	430b      	orrs	r3, r1
 800fc70:	9904      	ldr	r1, [sp, #16]
 800fc72:	430b      	orrs	r3, r1
 800fc74:	d122      	bne.n	800fcbc <_dtoa_r+0xabc>
 800fc76:	2a00      	cmp	r2, #0
 800fc78:	ddee      	ble.n	800fc58 <_dtoa_r+0xa58>
 800fc7a:	ee18 1a10 	vmov	r1, s16
 800fc7e:	2201      	movs	r2, #1
 800fc80:	4620      	mov	r0, r4
 800fc82:	f000 fba9 	bl	80103d8 <__lshift>
 800fc86:	4631      	mov	r1, r6
 800fc88:	ee08 0a10 	vmov	s16, r0
 800fc8c:	f000 fc14 	bl	80104b8 <__mcmp>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	dc03      	bgt.n	800fc9c <_dtoa_r+0xa9c>
 800fc94:	d1e0      	bne.n	800fc58 <_dtoa_r+0xa58>
 800fc96:	f01a 0f01 	tst.w	sl, #1
 800fc9a:	d0dd      	beq.n	800fc58 <_dtoa_r+0xa58>
 800fc9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fca0:	d1d7      	bne.n	800fc52 <_dtoa_r+0xa52>
 800fca2:	2339      	movs	r3, #57	; 0x39
 800fca4:	f88b 3000 	strb.w	r3, [fp]
 800fca8:	462b      	mov	r3, r5
 800fcaa:	461d      	mov	r5, r3
 800fcac:	3b01      	subs	r3, #1
 800fcae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fcb2:	2a39      	cmp	r2, #57	; 0x39
 800fcb4:	d071      	beq.n	800fd9a <_dtoa_r+0xb9a>
 800fcb6:	3201      	adds	r2, #1
 800fcb8:	701a      	strb	r2, [r3, #0]
 800fcba:	e746      	b.n	800fb4a <_dtoa_r+0x94a>
 800fcbc:	2a00      	cmp	r2, #0
 800fcbe:	dd07      	ble.n	800fcd0 <_dtoa_r+0xad0>
 800fcc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fcc4:	d0ed      	beq.n	800fca2 <_dtoa_r+0xaa2>
 800fcc6:	f10a 0301 	add.w	r3, sl, #1
 800fcca:	f88b 3000 	strb.w	r3, [fp]
 800fcce:	e73c      	b.n	800fb4a <_dtoa_r+0x94a>
 800fcd0:	9b05      	ldr	r3, [sp, #20]
 800fcd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fcd6:	4599      	cmp	r9, r3
 800fcd8:	d047      	beq.n	800fd6a <_dtoa_r+0xb6a>
 800fcda:	ee18 1a10 	vmov	r1, s16
 800fcde:	2300      	movs	r3, #0
 800fce0:	220a      	movs	r2, #10
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 f9c8 	bl	8010078 <__multadd>
 800fce8:	45b8      	cmp	r8, r7
 800fcea:	ee08 0a10 	vmov	s16, r0
 800fcee:	f04f 0300 	mov.w	r3, #0
 800fcf2:	f04f 020a 	mov.w	r2, #10
 800fcf6:	4641      	mov	r1, r8
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	d106      	bne.n	800fd0a <_dtoa_r+0xb0a>
 800fcfc:	f000 f9bc 	bl	8010078 <__multadd>
 800fd00:	4680      	mov	r8, r0
 800fd02:	4607      	mov	r7, r0
 800fd04:	f109 0901 	add.w	r9, r9, #1
 800fd08:	e772      	b.n	800fbf0 <_dtoa_r+0x9f0>
 800fd0a:	f000 f9b5 	bl	8010078 <__multadd>
 800fd0e:	4639      	mov	r1, r7
 800fd10:	4680      	mov	r8, r0
 800fd12:	2300      	movs	r3, #0
 800fd14:	220a      	movs	r2, #10
 800fd16:	4620      	mov	r0, r4
 800fd18:	f000 f9ae 	bl	8010078 <__multadd>
 800fd1c:	4607      	mov	r7, r0
 800fd1e:	e7f1      	b.n	800fd04 <_dtoa_r+0xb04>
 800fd20:	9b03      	ldr	r3, [sp, #12]
 800fd22:	9302      	str	r3, [sp, #8]
 800fd24:	9d01      	ldr	r5, [sp, #4]
 800fd26:	ee18 0a10 	vmov	r0, s16
 800fd2a:	4631      	mov	r1, r6
 800fd2c:	f7ff f9dc 	bl	800f0e8 <quorem>
 800fd30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fd34:	9b01      	ldr	r3, [sp, #4]
 800fd36:	f805 ab01 	strb.w	sl, [r5], #1
 800fd3a:	1aea      	subs	r2, r5, r3
 800fd3c:	9b02      	ldr	r3, [sp, #8]
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	dd09      	ble.n	800fd56 <_dtoa_r+0xb56>
 800fd42:	ee18 1a10 	vmov	r1, s16
 800fd46:	2300      	movs	r3, #0
 800fd48:	220a      	movs	r2, #10
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 f994 	bl	8010078 <__multadd>
 800fd50:	ee08 0a10 	vmov	s16, r0
 800fd54:	e7e7      	b.n	800fd26 <_dtoa_r+0xb26>
 800fd56:	9b02      	ldr	r3, [sp, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	bfc8      	it	gt
 800fd5c:	461d      	movgt	r5, r3
 800fd5e:	9b01      	ldr	r3, [sp, #4]
 800fd60:	bfd8      	it	le
 800fd62:	2501      	movle	r5, #1
 800fd64:	441d      	add	r5, r3
 800fd66:	f04f 0800 	mov.w	r8, #0
 800fd6a:	ee18 1a10 	vmov	r1, s16
 800fd6e:	2201      	movs	r2, #1
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 fb31 	bl	80103d8 <__lshift>
 800fd76:	4631      	mov	r1, r6
 800fd78:	ee08 0a10 	vmov	s16, r0
 800fd7c:	f000 fb9c 	bl	80104b8 <__mcmp>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	dc91      	bgt.n	800fca8 <_dtoa_r+0xaa8>
 800fd84:	d102      	bne.n	800fd8c <_dtoa_r+0xb8c>
 800fd86:	f01a 0f01 	tst.w	sl, #1
 800fd8a:	d18d      	bne.n	800fca8 <_dtoa_r+0xaa8>
 800fd8c:	462b      	mov	r3, r5
 800fd8e:	461d      	mov	r5, r3
 800fd90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd94:	2a30      	cmp	r2, #48	; 0x30
 800fd96:	d0fa      	beq.n	800fd8e <_dtoa_r+0xb8e>
 800fd98:	e6d7      	b.n	800fb4a <_dtoa_r+0x94a>
 800fd9a:	9a01      	ldr	r2, [sp, #4]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d184      	bne.n	800fcaa <_dtoa_r+0xaaa>
 800fda0:	9b00      	ldr	r3, [sp, #0]
 800fda2:	3301      	adds	r3, #1
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	2331      	movs	r3, #49	; 0x31
 800fda8:	7013      	strb	r3, [r2, #0]
 800fdaa:	e6ce      	b.n	800fb4a <_dtoa_r+0x94a>
 800fdac:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <_dtoa_r+0xbd4>)
 800fdae:	f7ff ba95 	b.w	800f2dc <_dtoa_r+0xdc>
 800fdb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f47f aa6e 	bne.w	800f296 <_dtoa_r+0x96>
 800fdba:	4b07      	ldr	r3, [pc, #28]	; (800fdd8 <_dtoa_r+0xbd8>)
 800fdbc:	f7ff ba8e 	b.w	800f2dc <_dtoa_r+0xdc>
 800fdc0:	9b02      	ldr	r3, [sp, #8]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	dcae      	bgt.n	800fd24 <_dtoa_r+0xb24>
 800fdc6:	9b06      	ldr	r3, [sp, #24]
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	f73f aea8 	bgt.w	800fb1e <_dtoa_r+0x91e>
 800fdce:	e7a9      	b.n	800fd24 <_dtoa_r+0xb24>
 800fdd0:	08013d7b 	.word	0x08013d7b
 800fdd4:	08013cd8 	.word	0x08013cd8
 800fdd8:	08013cfc 	.word	0x08013cfc

0800fddc <__sflush_r>:
 800fddc:	898a      	ldrh	r2, [r1, #12]
 800fdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde2:	4605      	mov	r5, r0
 800fde4:	0710      	lsls	r0, r2, #28
 800fde6:	460c      	mov	r4, r1
 800fde8:	d458      	bmi.n	800fe9c <__sflush_r+0xc0>
 800fdea:	684b      	ldr	r3, [r1, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	dc05      	bgt.n	800fdfc <__sflush_r+0x20>
 800fdf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	dc02      	bgt.n	800fdfc <__sflush_r+0x20>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdfe:	2e00      	cmp	r6, #0
 800fe00:	d0f9      	beq.n	800fdf6 <__sflush_r+0x1a>
 800fe02:	2300      	movs	r3, #0
 800fe04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe08:	682f      	ldr	r7, [r5, #0]
 800fe0a:	602b      	str	r3, [r5, #0]
 800fe0c:	d032      	beq.n	800fe74 <__sflush_r+0x98>
 800fe0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	075a      	lsls	r2, r3, #29
 800fe14:	d505      	bpl.n	800fe22 <__sflush_r+0x46>
 800fe16:	6863      	ldr	r3, [r4, #4]
 800fe18:	1ac0      	subs	r0, r0, r3
 800fe1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe1c:	b10b      	cbz	r3, 800fe22 <__sflush_r+0x46>
 800fe1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe20:	1ac0      	subs	r0, r0, r3
 800fe22:	2300      	movs	r3, #0
 800fe24:	4602      	mov	r2, r0
 800fe26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe28:	6a21      	ldr	r1, [r4, #32]
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	47b0      	blx	r6
 800fe2e:	1c43      	adds	r3, r0, #1
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	d106      	bne.n	800fe42 <__sflush_r+0x66>
 800fe34:	6829      	ldr	r1, [r5, #0]
 800fe36:	291d      	cmp	r1, #29
 800fe38:	d82c      	bhi.n	800fe94 <__sflush_r+0xb8>
 800fe3a:	4a2a      	ldr	r2, [pc, #168]	; (800fee4 <__sflush_r+0x108>)
 800fe3c:	40ca      	lsrs	r2, r1
 800fe3e:	07d6      	lsls	r6, r2, #31
 800fe40:	d528      	bpl.n	800fe94 <__sflush_r+0xb8>
 800fe42:	2200      	movs	r2, #0
 800fe44:	6062      	str	r2, [r4, #4]
 800fe46:	04d9      	lsls	r1, r3, #19
 800fe48:	6922      	ldr	r2, [r4, #16]
 800fe4a:	6022      	str	r2, [r4, #0]
 800fe4c:	d504      	bpl.n	800fe58 <__sflush_r+0x7c>
 800fe4e:	1c42      	adds	r2, r0, #1
 800fe50:	d101      	bne.n	800fe56 <__sflush_r+0x7a>
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	b903      	cbnz	r3, 800fe58 <__sflush_r+0x7c>
 800fe56:	6560      	str	r0, [r4, #84]	; 0x54
 800fe58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe5a:	602f      	str	r7, [r5, #0]
 800fe5c:	2900      	cmp	r1, #0
 800fe5e:	d0ca      	beq.n	800fdf6 <__sflush_r+0x1a>
 800fe60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe64:	4299      	cmp	r1, r3
 800fe66:	d002      	beq.n	800fe6e <__sflush_r+0x92>
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f000 fc3d 	bl	80106e8 <_free_r>
 800fe6e:	2000      	movs	r0, #0
 800fe70:	6360      	str	r0, [r4, #52]	; 0x34
 800fe72:	e7c1      	b.n	800fdf8 <__sflush_r+0x1c>
 800fe74:	6a21      	ldr	r1, [r4, #32]
 800fe76:	2301      	movs	r3, #1
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47b0      	blx	r6
 800fe7c:	1c41      	adds	r1, r0, #1
 800fe7e:	d1c7      	bne.n	800fe10 <__sflush_r+0x34>
 800fe80:	682b      	ldr	r3, [r5, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d0c4      	beq.n	800fe10 <__sflush_r+0x34>
 800fe86:	2b1d      	cmp	r3, #29
 800fe88:	d001      	beq.n	800fe8e <__sflush_r+0xb2>
 800fe8a:	2b16      	cmp	r3, #22
 800fe8c:	d101      	bne.n	800fe92 <__sflush_r+0xb6>
 800fe8e:	602f      	str	r7, [r5, #0]
 800fe90:	e7b1      	b.n	800fdf6 <__sflush_r+0x1a>
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe98:	81a3      	strh	r3, [r4, #12]
 800fe9a:	e7ad      	b.n	800fdf8 <__sflush_r+0x1c>
 800fe9c:	690f      	ldr	r7, [r1, #16]
 800fe9e:	2f00      	cmp	r7, #0
 800fea0:	d0a9      	beq.n	800fdf6 <__sflush_r+0x1a>
 800fea2:	0793      	lsls	r3, r2, #30
 800fea4:	680e      	ldr	r6, [r1, #0]
 800fea6:	bf08      	it	eq
 800fea8:	694b      	ldreq	r3, [r1, #20]
 800feaa:	600f      	str	r7, [r1, #0]
 800feac:	bf18      	it	ne
 800feae:	2300      	movne	r3, #0
 800feb0:	eba6 0807 	sub.w	r8, r6, r7
 800feb4:	608b      	str	r3, [r1, #8]
 800feb6:	f1b8 0f00 	cmp.w	r8, #0
 800feba:	dd9c      	ble.n	800fdf6 <__sflush_r+0x1a>
 800febc:	6a21      	ldr	r1, [r4, #32]
 800febe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fec0:	4643      	mov	r3, r8
 800fec2:	463a      	mov	r2, r7
 800fec4:	4628      	mov	r0, r5
 800fec6:	47b0      	blx	r6
 800fec8:	2800      	cmp	r0, #0
 800feca:	dc06      	bgt.n	800feda <__sflush_r+0xfe>
 800fecc:	89a3      	ldrh	r3, [r4, #12]
 800fece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295
 800fed8:	e78e      	b.n	800fdf8 <__sflush_r+0x1c>
 800feda:	4407      	add	r7, r0
 800fedc:	eba8 0800 	sub.w	r8, r8, r0
 800fee0:	e7e9      	b.n	800feb6 <__sflush_r+0xda>
 800fee2:	bf00      	nop
 800fee4:	20400001 	.word	0x20400001

0800fee8 <_fflush_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	690b      	ldr	r3, [r1, #16]
 800feec:	4605      	mov	r5, r0
 800feee:	460c      	mov	r4, r1
 800fef0:	b913      	cbnz	r3, 800fef8 <_fflush_r+0x10>
 800fef2:	2500      	movs	r5, #0
 800fef4:	4628      	mov	r0, r5
 800fef6:	bd38      	pop	{r3, r4, r5, pc}
 800fef8:	b118      	cbz	r0, 800ff02 <_fflush_r+0x1a>
 800fefa:	6983      	ldr	r3, [r0, #24]
 800fefc:	b90b      	cbnz	r3, 800ff02 <_fflush_r+0x1a>
 800fefe:	f7fe fa19 	bl	800e334 <__sinit>
 800ff02:	4b14      	ldr	r3, [pc, #80]	; (800ff54 <_fflush_r+0x6c>)
 800ff04:	429c      	cmp	r4, r3
 800ff06:	d11b      	bne.n	800ff40 <_fflush_r+0x58>
 800ff08:	686c      	ldr	r4, [r5, #4]
 800ff0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d0ef      	beq.n	800fef2 <_fflush_r+0xa>
 800ff12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff14:	07d0      	lsls	r0, r2, #31
 800ff16:	d404      	bmi.n	800ff22 <_fflush_r+0x3a>
 800ff18:	0599      	lsls	r1, r3, #22
 800ff1a:	d402      	bmi.n	800ff22 <_fflush_r+0x3a>
 800ff1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff1e:	f7fe facc 	bl	800e4ba <__retarget_lock_acquire_recursive>
 800ff22:	4628      	mov	r0, r5
 800ff24:	4621      	mov	r1, r4
 800ff26:	f7ff ff59 	bl	800fddc <__sflush_r>
 800ff2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff2c:	07da      	lsls	r2, r3, #31
 800ff2e:	4605      	mov	r5, r0
 800ff30:	d4e0      	bmi.n	800fef4 <_fflush_r+0xc>
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	059b      	lsls	r3, r3, #22
 800ff36:	d4dd      	bmi.n	800fef4 <_fflush_r+0xc>
 800ff38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff3a:	f7fe fabf 	bl	800e4bc <__retarget_lock_release_recursive>
 800ff3e:	e7d9      	b.n	800fef4 <_fflush_r+0xc>
 800ff40:	4b05      	ldr	r3, [pc, #20]	; (800ff58 <_fflush_r+0x70>)
 800ff42:	429c      	cmp	r4, r3
 800ff44:	d101      	bne.n	800ff4a <_fflush_r+0x62>
 800ff46:	68ac      	ldr	r4, [r5, #8]
 800ff48:	e7df      	b.n	800ff0a <_fflush_r+0x22>
 800ff4a:	4b04      	ldr	r3, [pc, #16]	; (800ff5c <_fflush_r+0x74>)
 800ff4c:	429c      	cmp	r4, r3
 800ff4e:	bf08      	it	eq
 800ff50:	68ec      	ldreq	r4, [r5, #12]
 800ff52:	e7da      	b.n	800ff0a <_fflush_r+0x22>
 800ff54:	08013c84 	.word	0x08013c84
 800ff58:	08013ca4 	.word	0x08013ca4
 800ff5c:	08013c64 	.word	0x08013c64

0800ff60 <_localeconv_r>:
 800ff60:	4800      	ldr	r0, [pc, #0]	; (800ff64 <_localeconv_r+0x4>)
 800ff62:	4770      	bx	lr
 800ff64:	20000364 	.word	0x20000364

0800ff68 <_lseek_r>:
 800ff68:	b538      	push	{r3, r4, r5, lr}
 800ff6a:	4d07      	ldr	r5, [pc, #28]	; (800ff88 <_lseek_r+0x20>)
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	4608      	mov	r0, r1
 800ff70:	4611      	mov	r1, r2
 800ff72:	2200      	movs	r2, #0
 800ff74:	602a      	str	r2, [r5, #0]
 800ff76:	461a      	mov	r2, r3
 800ff78:	f7f1 fdb6 	bl	8001ae8 <_lseek>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d102      	bne.n	800ff86 <_lseek_r+0x1e>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	b103      	cbz	r3, 800ff86 <_lseek_r+0x1e>
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	200063ac 	.word	0x200063ac

0800ff8c <malloc>:
 800ff8c:	4b02      	ldr	r3, [pc, #8]	; (800ff98 <malloc+0xc>)
 800ff8e:	4601      	mov	r1, r0
 800ff90:	6818      	ldr	r0, [r3, #0]
 800ff92:	f7fe bacb 	b.w	800e52c <_malloc_r>
 800ff96:	bf00      	nop
 800ff98:	20000210 	.word	0x20000210

0800ff9c <__malloc_lock>:
 800ff9c:	4801      	ldr	r0, [pc, #4]	; (800ffa4 <__malloc_lock+0x8>)
 800ff9e:	f7fe ba8c 	b.w	800e4ba <__retarget_lock_acquire_recursive>
 800ffa2:	bf00      	nop
 800ffa4:	200063a0 	.word	0x200063a0

0800ffa8 <__malloc_unlock>:
 800ffa8:	4801      	ldr	r0, [pc, #4]	; (800ffb0 <__malloc_unlock+0x8>)
 800ffaa:	f7fe ba87 	b.w	800e4bc <__retarget_lock_release_recursive>
 800ffae:	bf00      	nop
 800ffb0:	200063a0 	.word	0x200063a0

0800ffb4 <_Balloc>:
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ffb8:	4604      	mov	r4, r0
 800ffba:	460d      	mov	r5, r1
 800ffbc:	b976      	cbnz	r6, 800ffdc <_Balloc+0x28>
 800ffbe:	2010      	movs	r0, #16
 800ffc0:	f7ff ffe4 	bl	800ff8c <malloc>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	6260      	str	r0, [r4, #36]	; 0x24
 800ffc8:	b920      	cbnz	r0, 800ffd4 <_Balloc+0x20>
 800ffca:	4b18      	ldr	r3, [pc, #96]	; (801002c <_Balloc+0x78>)
 800ffcc:	4818      	ldr	r0, [pc, #96]	; (8010030 <_Balloc+0x7c>)
 800ffce:	2166      	movs	r1, #102	; 0x66
 800ffd0:	f000 fd44 	bl	8010a5c <__assert_func>
 800ffd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffd8:	6006      	str	r6, [r0, #0]
 800ffda:	60c6      	str	r6, [r0, #12]
 800ffdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ffde:	68f3      	ldr	r3, [r6, #12]
 800ffe0:	b183      	cbz	r3, 8010004 <_Balloc+0x50>
 800ffe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ffea:	b9b8      	cbnz	r0, 801001c <_Balloc+0x68>
 800ffec:	2101      	movs	r1, #1
 800ffee:	fa01 f605 	lsl.w	r6, r1, r5
 800fff2:	1d72      	adds	r2, r6, #5
 800fff4:	0092      	lsls	r2, r2, #2
 800fff6:	4620      	mov	r0, r4
 800fff8:	f000 fb60 	bl	80106bc <_calloc_r>
 800fffc:	b160      	cbz	r0, 8010018 <_Balloc+0x64>
 800fffe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010002:	e00e      	b.n	8010022 <_Balloc+0x6e>
 8010004:	2221      	movs	r2, #33	; 0x21
 8010006:	2104      	movs	r1, #4
 8010008:	4620      	mov	r0, r4
 801000a:	f000 fb57 	bl	80106bc <_calloc_r>
 801000e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010010:	60f0      	str	r0, [r6, #12]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1e4      	bne.n	800ffe2 <_Balloc+0x2e>
 8010018:	2000      	movs	r0, #0
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	6802      	ldr	r2, [r0, #0]
 801001e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010022:	2300      	movs	r3, #0
 8010024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010028:	e7f7      	b.n	801001a <_Balloc+0x66>
 801002a:	bf00      	nop
 801002c:	08013d09 	.word	0x08013d09
 8010030:	08013d8c 	.word	0x08013d8c

08010034 <_Bfree>:
 8010034:	b570      	push	{r4, r5, r6, lr}
 8010036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010038:	4605      	mov	r5, r0
 801003a:	460c      	mov	r4, r1
 801003c:	b976      	cbnz	r6, 801005c <_Bfree+0x28>
 801003e:	2010      	movs	r0, #16
 8010040:	f7ff ffa4 	bl	800ff8c <malloc>
 8010044:	4602      	mov	r2, r0
 8010046:	6268      	str	r0, [r5, #36]	; 0x24
 8010048:	b920      	cbnz	r0, 8010054 <_Bfree+0x20>
 801004a:	4b09      	ldr	r3, [pc, #36]	; (8010070 <_Bfree+0x3c>)
 801004c:	4809      	ldr	r0, [pc, #36]	; (8010074 <_Bfree+0x40>)
 801004e:	218a      	movs	r1, #138	; 0x8a
 8010050:	f000 fd04 	bl	8010a5c <__assert_func>
 8010054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010058:	6006      	str	r6, [r0, #0]
 801005a:	60c6      	str	r6, [r0, #12]
 801005c:	b13c      	cbz	r4, 801006e <_Bfree+0x3a>
 801005e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010060:	6862      	ldr	r2, [r4, #4]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010068:	6021      	str	r1, [r4, #0]
 801006a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801006e:	bd70      	pop	{r4, r5, r6, pc}
 8010070:	08013d09 	.word	0x08013d09
 8010074:	08013d8c 	.word	0x08013d8c

08010078 <__multadd>:
 8010078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801007c:	690d      	ldr	r5, [r1, #16]
 801007e:	4607      	mov	r7, r0
 8010080:	460c      	mov	r4, r1
 8010082:	461e      	mov	r6, r3
 8010084:	f101 0c14 	add.w	ip, r1, #20
 8010088:	2000      	movs	r0, #0
 801008a:	f8dc 3000 	ldr.w	r3, [ip]
 801008e:	b299      	uxth	r1, r3
 8010090:	fb02 6101 	mla	r1, r2, r1, r6
 8010094:	0c1e      	lsrs	r6, r3, #16
 8010096:	0c0b      	lsrs	r3, r1, #16
 8010098:	fb02 3306 	mla	r3, r2, r6, r3
 801009c:	b289      	uxth	r1, r1
 801009e:	3001      	adds	r0, #1
 80100a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100a4:	4285      	cmp	r5, r0
 80100a6:	f84c 1b04 	str.w	r1, [ip], #4
 80100aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100ae:	dcec      	bgt.n	801008a <__multadd+0x12>
 80100b0:	b30e      	cbz	r6, 80100f6 <__multadd+0x7e>
 80100b2:	68a3      	ldr	r3, [r4, #8]
 80100b4:	42ab      	cmp	r3, r5
 80100b6:	dc19      	bgt.n	80100ec <__multadd+0x74>
 80100b8:	6861      	ldr	r1, [r4, #4]
 80100ba:	4638      	mov	r0, r7
 80100bc:	3101      	adds	r1, #1
 80100be:	f7ff ff79 	bl	800ffb4 <_Balloc>
 80100c2:	4680      	mov	r8, r0
 80100c4:	b928      	cbnz	r0, 80100d2 <__multadd+0x5a>
 80100c6:	4602      	mov	r2, r0
 80100c8:	4b0c      	ldr	r3, [pc, #48]	; (80100fc <__multadd+0x84>)
 80100ca:	480d      	ldr	r0, [pc, #52]	; (8010100 <__multadd+0x88>)
 80100cc:	21b5      	movs	r1, #181	; 0xb5
 80100ce:	f000 fcc5 	bl	8010a5c <__assert_func>
 80100d2:	6922      	ldr	r2, [r4, #16]
 80100d4:	3202      	adds	r2, #2
 80100d6:	f104 010c 	add.w	r1, r4, #12
 80100da:	0092      	lsls	r2, r2, #2
 80100dc:	300c      	adds	r0, #12
 80100de:	f7fe f9ee 	bl	800e4be <memcpy>
 80100e2:	4621      	mov	r1, r4
 80100e4:	4638      	mov	r0, r7
 80100e6:	f7ff ffa5 	bl	8010034 <_Bfree>
 80100ea:	4644      	mov	r4, r8
 80100ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80100f0:	3501      	adds	r5, #1
 80100f2:	615e      	str	r6, [r3, #20]
 80100f4:	6125      	str	r5, [r4, #16]
 80100f6:	4620      	mov	r0, r4
 80100f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100fc:	08013d7b 	.word	0x08013d7b
 8010100:	08013d8c 	.word	0x08013d8c

08010104 <__hi0bits>:
 8010104:	0c03      	lsrs	r3, r0, #16
 8010106:	041b      	lsls	r3, r3, #16
 8010108:	b9d3      	cbnz	r3, 8010140 <__hi0bits+0x3c>
 801010a:	0400      	lsls	r0, r0, #16
 801010c:	2310      	movs	r3, #16
 801010e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010112:	bf04      	itt	eq
 8010114:	0200      	lsleq	r0, r0, #8
 8010116:	3308      	addeq	r3, #8
 8010118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801011c:	bf04      	itt	eq
 801011e:	0100      	lsleq	r0, r0, #4
 8010120:	3304      	addeq	r3, #4
 8010122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010126:	bf04      	itt	eq
 8010128:	0080      	lsleq	r0, r0, #2
 801012a:	3302      	addeq	r3, #2
 801012c:	2800      	cmp	r0, #0
 801012e:	db05      	blt.n	801013c <__hi0bits+0x38>
 8010130:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010134:	f103 0301 	add.w	r3, r3, #1
 8010138:	bf08      	it	eq
 801013a:	2320      	moveq	r3, #32
 801013c:	4618      	mov	r0, r3
 801013e:	4770      	bx	lr
 8010140:	2300      	movs	r3, #0
 8010142:	e7e4      	b.n	801010e <__hi0bits+0xa>

08010144 <__lo0bits>:
 8010144:	6803      	ldr	r3, [r0, #0]
 8010146:	f013 0207 	ands.w	r2, r3, #7
 801014a:	4601      	mov	r1, r0
 801014c:	d00b      	beq.n	8010166 <__lo0bits+0x22>
 801014e:	07da      	lsls	r2, r3, #31
 8010150:	d423      	bmi.n	801019a <__lo0bits+0x56>
 8010152:	0798      	lsls	r0, r3, #30
 8010154:	bf49      	itett	mi
 8010156:	085b      	lsrmi	r3, r3, #1
 8010158:	089b      	lsrpl	r3, r3, #2
 801015a:	2001      	movmi	r0, #1
 801015c:	600b      	strmi	r3, [r1, #0]
 801015e:	bf5c      	itt	pl
 8010160:	600b      	strpl	r3, [r1, #0]
 8010162:	2002      	movpl	r0, #2
 8010164:	4770      	bx	lr
 8010166:	b298      	uxth	r0, r3
 8010168:	b9a8      	cbnz	r0, 8010196 <__lo0bits+0x52>
 801016a:	0c1b      	lsrs	r3, r3, #16
 801016c:	2010      	movs	r0, #16
 801016e:	b2da      	uxtb	r2, r3
 8010170:	b90a      	cbnz	r2, 8010176 <__lo0bits+0x32>
 8010172:	3008      	adds	r0, #8
 8010174:	0a1b      	lsrs	r3, r3, #8
 8010176:	071a      	lsls	r2, r3, #28
 8010178:	bf04      	itt	eq
 801017a:	091b      	lsreq	r3, r3, #4
 801017c:	3004      	addeq	r0, #4
 801017e:	079a      	lsls	r2, r3, #30
 8010180:	bf04      	itt	eq
 8010182:	089b      	lsreq	r3, r3, #2
 8010184:	3002      	addeq	r0, #2
 8010186:	07da      	lsls	r2, r3, #31
 8010188:	d403      	bmi.n	8010192 <__lo0bits+0x4e>
 801018a:	085b      	lsrs	r3, r3, #1
 801018c:	f100 0001 	add.w	r0, r0, #1
 8010190:	d005      	beq.n	801019e <__lo0bits+0x5a>
 8010192:	600b      	str	r3, [r1, #0]
 8010194:	4770      	bx	lr
 8010196:	4610      	mov	r0, r2
 8010198:	e7e9      	b.n	801016e <__lo0bits+0x2a>
 801019a:	2000      	movs	r0, #0
 801019c:	4770      	bx	lr
 801019e:	2020      	movs	r0, #32
 80101a0:	4770      	bx	lr
	...

080101a4 <__i2b>:
 80101a4:	b510      	push	{r4, lr}
 80101a6:	460c      	mov	r4, r1
 80101a8:	2101      	movs	r1, #1
 80101aa:	f7ff ff03 	bl	800ffb4 <_Balloc>
 80101ae:	4602      	mov	r2, r0
 80101b0:	b928      	cbnz	r0, 80101be <__i2b+0x1a>
 80101b2:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <__i2b+0x24>)
 80101b4:	4805      	ldr	r0, [pc, #20]	; (80101cc <__i2b+0x28>)
 80101b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80101ba:	f000 fc4f 	bl	8010a5c <__assert_func>
 80101be:	2301      	movs	r3, #1
 80101c0:	6144      	str	r4, [r0, #20]
 80101c2:	6103      	str	r3, [r0, #16]
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	bf00      	nop
 80101c8:	08013d7b 	.word	0x08013d7b
 80101cc:	08013d8c 	.word	0x08013d8c

080101d0 <__multiply>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	4691      	mov	r9, r2
 80101d6:	690a      	ldr	r2, [r1, #16]
 80101d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80101dc:	429a      	cmp	r2, r3
 80101de:	bfb8      	it	lt
 80101e0:	460b      	movlt	r3, r1
 80101e2:	460c      	mov	r4, r1
 80101e4:	bfbc      	itt	lt
 80101e6:	464c      	movlt	r4, r9
 80101e8:	4699      	movlt	r9, r3
 80101ea:	6927      	ldr	r7, [r4, #16]
 80101ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80101f0:	68a3      	ldr	r3, [r4, #8]
 80101f2:	6861      	ldr	r1, [r4, #4]
 80101f4:	eb07 060a 	add.w	r6, r7, sl
 80101f8:	42b3      	cmp	r3, r6
 80101fa:	b085      	sub	sp, #20
 80101fc:	bfb8      	it	lt
 80101fe:	3101      	addlt	r1, #1
 8010200:	f7ff fed8 	bl	800ffb4 <_Balloc>
 8010204:	b930      	cbnz	r0, 8010214 <__multiply+0x44>
 8010206:	4602      	mov	r2, r0
 8010208:	4b44      	ldr	r3, [pc, #272]	; (801031c <__multiply+0x14c>)
 801020a:	4845      	ldr	r0, [pc, #276]	; (8010320 <__multiply+0x150>)
 801020c:	f240 115d 	movw	r1, #349	; 0x15d
 8010210:	f000 fc24 	bl	8010a5c <__assert_func>
 8010214:	f100 0514 	add.w	r5, r0, #20
 8010218:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801021c:	462b      	mov	r3, r5
 801021e:	2200      	movs	r2, #0
 8010220:	4543      	cmp	r3, r8
 8010222:	d321      	bcc.n	8010268 <__multiply+0x98>
 8010224:	f104 0314 	add.w	r3, r4, #20
 8010228:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801022c:	f109 0314 	add.w	r3, r9, #20
 8010230:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010234:	9202      	str	r2, [sp, #8]
 8010236:	1b3a      	subs	r2, r7, r4
 8010238:	3a15      	subs	r2, #21
 801023a:	f022 0203 	bic.w	r2, r2, #3
 801023e:	3204      	adds	r2, #4
 8010240:	f104 0115 	add.w	r1, r4, #21
 8010244:	428f      	cmp	r7, r1
 8010246:	bf38      	it	cc
 8010248:	2204      	movcc	r2, #4
 801024a:	9201      	str	r2, [sp, #4]
 801024c:	9a02      	ldr	r2, [sp, #8]
 801024e:	9303      	str	r3, [sp, #12]
 8010250:	429a      	cmp	r2, r3
 8010252:	d80c      	bhi.n	801026e <__multiply+0x9e>
 8010254:	2e00      	cmp	r6, #0
 8010256:	dd03      	ble.n	8010260 <__multiply+0x90>
 8010258:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801025c:	2b00      	cmp	r3, #0
 801025e:	d05a      	beq.n	8010316 <__multiply+0x146>
 8010260:	6106      	str	r6, [r0, #16]
 8010262:	b005      	add	sp, #20
 8010264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010268:	f843 2b04 	str.w	r2, [r3], #4
 801026c:	e7d8      	b.n	8010220 <__multiply+0x50>
 801026e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010272:	f1ba 0f00 	cmp.w	sl, #0
 8010276:	d024      	beq.n	80102c2 <__multiply+0xf2>
 8010278:	f104 0e14 	add.w	lr, r4, #20
 801027c:	46a9      	mov	r9, r5
 801027e:	f04f 0c00 	mov.w	ip, #0
 8010282:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010286:	f8d9 1000 	ldr.w	r1, [r9]
 801028a:	fa1f fb82 	uxth.w	fp, r2
 801028e:	b289      	uxth	r1, r1
 8010290:	fb0a 110b 	mla	r1, sl, fp, r1
 8010294:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010298:	f8d9 2000 	ldr.w	r2, [r9]
 801029c:	4461      	add	r1, ip
 801029e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80102a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80102aa:	b289      	uxth	r1, r1
 80102ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80102b0:	4577      	cmp	r7, lr
 80102b2:	f849 1b04 	str.w	r1, [r9], #4
 80102b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102ba:	d8e2      	bhi.n	8010282 <__multiply+0xb2>
 80102bc:	9a01      	ldr	r2, [sp, #4]
 80102be:	f845 c002 	str.w	ip, [r5, r2]
 80102c2:	9a03      	ldr	r2, [sp, #12]
 80102c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80102c8:	3304      	adds	r3, #4
 80102ca:	f1b9 0f00 	cmp.w	r9, #0
 80102ce:	d020      	beq.n	8010312 <__multiply+0x142>
 80102d0:	6829      	ldr	r1, [r5, #0]
 80102d2:	f104 0c14 	add.w	ip, r4, #20
 80102d6:	46ae      	mov	lr, r5
 80102d8:	f04f 0a00 	mov.w	sl, #0
 80102dc:	f8bc b000 	ldrh.w	fp, [ip]
 80102e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80102e4:	fb09 220b 	mla	r2, r9, fp, r2
 80102e8:	4492      	add	sl, r2
 80102ea:	b289      	uxth	r1, r1
 80102ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80102f0:	f84e 1b04 	str.w	r1, [lr], #4
 80102f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80102f8:	f8be 1000 	ldrh.w	r1, [lr]
 80102fc:	0c12      	lsrs	r2, r2, #16
 80102fe:	fb09 1102 	mla	r1, r9, r2, r1
 8010302:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010306:	4567      	cmp	r7, ip
 8010308:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801030c:	d8e6      	bhi.n	80102dc <__multiply+0x10c>
 801030e:	9a01      	ldr	r2, [sp, #4]
 8010310:	50a9      	str	r1, [r5, r2]
 8010312:	3504      	adds	r5, #4
 8010314:	e79a      	b.n	801024c <__multiply+0x7c>
 8010316:	3e01      	subs	r6, #1
 8010318:	e79c      	b.n	8010254 <__multiply+0x84>
 801031a:	bf00      	nop
 801031c:	08013d7b 	.word	0x08013d7b
 8010320:	08013d8c 	.word	0x08013d8c

08010324 <__pow5mult>:
 8010324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010328:	4615      	mov	r5, r2
 801032a:	f012 0203 	ands.w	r2, r2, #3
 801032e:	4606      	mov	r6, r0
 8010330:	460f      	mov	r7, r1
 8010332:	d007      	beq.n	8010344 <__pow5mult+0x20>
 8010334:	4c25      	ldr	r4, [pc, #148]	; (80103cc <__pow5mult+0xa8>)
 8010336:	3a01      	subs	r2, #1
 8010338:	2300      	movs	r3, #0
 801033a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801033e:	f7ff fe9b 	bl	8010078 <__multadd>
 8010342:	4607      	mov	r7, r0
 8010344:	10ad      	asrs	r5, r5, #2
 8010346:	d03d      	beq.n	80103c4 <__pow5mult+0xa0>
 8010348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801034a:	b97c      	cbnz	r4, 801036c <__pow5mult+0x48>
 801034c:	2010      	movs	r0, #16
 801034e:	f7ff fe1d 	bl	800ff8c <malloc>
 8010352:	4602      	mov	r2, r0
 8010354:	6270      	str	r0, [r6, #36]	; 0x24
 8010356:	b928      	cbnz	r0, 8010364 <__pow5mult+0x40>
 8010358:	4b1d      	ldr	r3, [pc, #116]	; (80103d0 <__pow5mult+0xac>)
 801035a:	481e      	ldr	r0, [pc, #120]	; (80103d4 <__pow5mult+0xb0>)
 801035c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010360:	f000 fb7c 	bl	8010a5c <__assert_func>
 8010364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010368:	6004      	str	r4, [r0, #0]
 801036a:	60c4      	str	r4, [r0, #12]
 801036c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010374:	b94c      	cbnz	r4, 801038a <__pow5mult+0x66>
 8010376:	f240 2171 	movw	r1, #625	; 0x271
 801037a:	4630      	mov	r0, r6
 801037c:	f7ff ff12 	bl	80101a4 <__i2b>
 8010380:	2300      	movs	r3, #0
 8010382:	f8c8 0008 	str.w	r0, [r8, #8]
 8010386:	4604      	mov	r4, r0
 8010388:	6003      	str	r3, [r0, #0]
 801038a:	f04f 0900 	mov.w	r9, #0
 801038e:	07eb      	lsls	r3, r5, #31
 8010390:	d50a      	bpl.n	80103a8 <__pow5mult+0x84>
 8010392:	4639      	mov	r1, r7
 8010394:	4622      	mov	r2, r4
 8010396:	4630      	mov	r0, r6
 8010398:	f7ff ff1a 	bl	80101d0 <__multiply>
 801039c:	4639      	mov	r1, r7
 801039e:	4680      	mov	r8, r0
 80103a0:	4630      	mov	r0, r6
 80103a2:	f7ff fe47 	bl	8010034 <_Bfree>
 80103a6:	4647      	mov	r7, r8
 80103a8:	106d      	asrs	r5, r5, #1
 80103aa:	d00b      	beq.n	80103c4 <__pow5mult+0xa0>
 80103ac:	6820      	ldr	r0, [r4, #0]
 80103ae:	b938      	cbnz	r0, 80103c0 <__pow5mult+0x9c>
 80103b0:	4622      	mov	r2, r4
 80103b2:	4621      	mov	r1, r4
 80103b4:	4630      	mov	r0, r6
 80103b6:	f7ff ff0b 	bl	80101d0 <__multiply>
 80103ba:	6020      	str	r0, [r4, #0]
 80103bc:	f8c0 9000 	str.w	r9, [r0]
 80103c0:	4604      	mov	r4, r0
 80103c2:	e7e4      	b.n	801038e <__pow5mult+0x6a>
 80103c4:	4638      	mov	r0, r7
 80103c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ca:	bf00      	nop
 80103cc:	08013ed8 	.word	0x08013ed8
 80103d0:	08013d09 	.word	0x08013d09
 80103d4:	08013d8c 	.word	0x08013d8c

080103d8 <__lshift>:
 80103d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103dc:	460c      	mov	r4, r1
 80103de:	6849      	ldr	r1, [r1, #4]
 80103e0:	6923      	ldr	r3, [r4, #16]
 80103e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	4607      	mov	r7, r0
 80103ea:	4691      	mov	r9, r2
 80103ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80103f0:	f108 0601 	add.w	r6, r8, #1
 80103f4:	42b3      	cmp	r3, r6
 80103f6:	db0b      	blt.n	8010410 <__lshift+0x38>
 80103f8:	4638      	mov	r0, r7
 80103fa:	f7ff fddb 	bl	800ffb4 <_Balloc>
 80103fe:	4605      	mov	r5, r0
 8010400:	b948      	cbnz	r0, 8010416 <__lshift+0x3e>
 8010402:	4602      	mov	r2, r0
 8010404:	4b2a      	ldr	r3, [pc, #168]	; (80104b0 <__lshift+0xd8>)
 8010406:	482b      	ldr	r0, [pc, #172]	; (80104b4 <__lshift+0xdc>)
 8010408:	f240 11d9 	movw	r1, #473	; 0x1d9
 801040c:	f000 fb26 	bl	8010a5c <__assert_func>
 8010410:	3101      	adds	r1, #1
 8010412:	005b      	lsls	r3, r3, #1
 8010414:	e7ee      	b.n	80103f4 <__lshift+0x1c>
 8010416:	2300      	movs	r3, #0
 8010418:	f100 0114 	add.w	r1, r0, #20
 801041c:	f100 0210 	add.w	r2, r0, #16
 8010420:	4618      	mov	r0, r3
 8010422:	4553      	cmp	r3, sl
 8010424:	db37      	blt.n	8010496 <__lshift+0xbe>
 8010426:	6920      	ldr	r0, [r4, #16]
 8010428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801042c:	f104 0314 	add.w	r3, r4, #20
 8010430:	f019 091f 	ands.w	r9, r9, #31
 8010434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010438:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801043c:	d02f      	beq.n	801049e <__lshift+0xc6>
 801043e:	f1c9 0e20 	rsb	lr, r9, #32
 8010442:	468a      	mov	sl, r1
 8010444:	f04f 0c00 	mov.w	ip, #0
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	fa02 f209 	lsl.w	r2, r2, r9
 801044e:	ea42 020c 	orr.w	r2, r2, ip
 8010452:	f84a 2b04 	str.w	r2, [sl], #4
 8010456:	f853 2b04 	ldr.w	r2, [r3], #4
 801045a:	4298      	cmp	r0, r3
 801045c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010460:	d8f2      	bhi.n	8010448 <__lshift+0x70>
 8010462:	1b03      	subs	r3, r0, r4
 8010464:	3b15      	subs	r3, #21
 8010466:	f023 0303 	bic.w	r3, r3, #3
 801046a:	3304      	adds	r3, #4
 801046c:	f104 0215 	add.w	r2, r4, #21
 8010470:	4290      	cmp	r0, r2
 8010472:	bf38      	it	cc
 8010474:	2304      	movcc	r3, #4
 8010476:	f841 c003 	str.w	ip, [r1, r3]
 801047a:	f1bc 0f00 	cmp.w	ip, #0
 801047e:	d001      	beq.n	8010484 <__lshift+0xac>
 8010480:	f108 0602 	add.w	r6, r8, #2
 8010484:	3e01      	subs	r6, #1
 8010486:	4638      	mov	r0, r7
 8010488:	612e      	str	r6, [r5, #16]
 801048a:	4621      	mov	r1, r4
 801048c:	f7ff fdd2 	bl	8010034 <_Bfree>
 8010490:	4628      	mov	r0, r5
 8010492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010496:	f842 0f04 	str.w	r0, [r2, #4]!
 801049a:	3301      	adds	r3, #1
 801049c:	e7c1      	b.n	8010422 <__lshift+0x4a>
 801049e:	3904      	subs	r1, #4
 80104a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80104a8:	4298      	cmp	r0, r3
 80104aa:	d8f9      	bhi.n	80104a0 <__lshift+0xc8>
 80104ac:	e7ea      	b.n	8010484 <__lshift+0xac>
 80104ae:	bf00      	nop
 80104b0:	08013d7b 	.word	0x08013d7b
 80104b4:	08013d8c 	.word	0x08013d8c

080104b8 <__mcmp>:
 80104b8:	b530      	push	{r4, r5, lr}
 80104ba:	6902      	ldr	r2, [r0, #16]
 80104bc:	690c      	ldr	r4, [r1, #16]
 80104be:	1b12      	subs	r2, r2, r4
 80104c0:	d10e      	bne.n	80104e0 <__mcmp+0x28>
 80104c2:	f100 0314 	add.w	r3, r0, #20
 80104c6:	3114      	adds	r1, #20
 80104c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80104cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80104d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80104d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80104d8:	42a5      	cmp	r5, r4
 80104da:	d003      	beq.n	80104e4 <__mcmp+0x2c>
 80104dc:	d305      	bcc.n	80104ea <__mcmp+0x32>
 80104de:	2201      	movs	r2, #1
 80104e0:	4610      	mov	r0, r2
 80104e2:	bd30      	pop	{r4, r5, pc}
 80104e4:	4283      	cmp	r3, r0
 80104e6:	d3f3      	bcc.n	80104d0 <__mcmp+0x18>
 80104e8:	e7fa      	b.n	80104e0 <__mcmp+0x28>
 80104ea:	f04f 32ff 	mov.w	r2, #4294967295
 80104ee:	e7f7      	b.n	80104e0 <__mcmp+0x28>

080104f0 <__mdiff>:
 80104f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	460c      	mov	r4, r1
 80104f6:	4606      	mov	r6, r0
 80104f8:	4611      	mov	r1, r2
 80104fa:	4620      	mov	r0, r4
 80104fc:	4690      	mov	r8, r2
 80104fe:	f7ff ffdb 	bl	80104b8 <__mcmp>
 8010502:	1e05      	subs	r5, r0, #0
 8010504:	d110      	bne.n	8010528 <__mdiff+0x38>
 8010506:	4629      	mov	r1, r5
 8010508:	4630      	mov	r0, r6
 801050a:	f7ff fd53 	bl	800ffb4 <_Balloc>
 801050e:	b930      	cbnz	r0, 801051e <__mdiff+0x2e>
 8010510:	4b3a      	ldr	r3, [pc, #232]	; (80105fc <__mdiff+0x10c>)
 8010512:	4602      	mov	r2, r0
 8010514:	f240 2132 	movw	r1, #562	; 0x232
 8010518:	4839      	ldr	r0, [pc, #228]	; (8010600 <__mdiff+0x110>)
 801051a:	f000 fa9f 	bl	8010a5c <__assert_func>
 801051e:	2301      	movs	r3, #1
 8010520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010528:	bfa4      	itt	ge
 801052a:	4643      	movge	r3, r8
 801052c:	46a0      	movge	r8, r4
 801052e:	4630      	mov	r0, r6
 8010530:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010534:	bfa6      	itte	ge
 8010536:	461c      	movge	r4, r3
 8010538:	2500      	movge	r5, #0
 801053a:	2501      	movlt	r5, #1
 801053c:	f7ff fd3a 	bl	800ffb4 <_Balloc>
 8010540:	b920      	cbnz	r0, 801054c <__mdiff+0x5c>
 8010542:	4b2e      	ldr	r3, [pc, #184]	; (80105fc <__mdiff+0x10c>)
 8010544:	4602      	mov	r2, r0
 8010546:	f44f 7110 	mov.w	r1, #576	; 0x240
 801054a:	e7e5      	b.n	8010518 <__mdiff+0x28>
 801054c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010550:	6926      	ldr	r6, [r4, #16]
 8010552:	60c5      	str	r5, [r0, #12]
 8010554:	f104 0914 	add.w	r9, r4, #20
 8010558:	f108 0514 	add.w	r5, r8, #20
 801055c:	f100 0e14 	add.w	lr, r0, #20
 8010560:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010564:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010568:	f108 0210 	add.w	r2, r8, #16
 801056c:	46f2      	mov	sl, lr
 801056e:	2100      	movs	r1, #0
 8010570:	f859 3b04 	ldr.w	r3, [r9], #4
 8010574:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010578:	fa1f f883 	uxth.w	r8, r3
 801057c:	fa11 f18b 	uxtah	r1, r1, fp
 8010580:	0c1b      	lsrs	r3, r3, #16
 8010582:	eba1 0808 	sub.w	r8, r1, r8
 8010586:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801058a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801058e:	fa1f f888 	uxth.w	r8, r8
 8010592:	1419      	asrs	r1, r3, #16
 8010594:	454e      	cmp	r6, r9
 8010596:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801059a:	f84a 3b04 	str.w	r3, [sl], #4
 801059e:	d8e7      	bhi.n	8010570 <__mdiff+0x80>
 80105a0:	1b33      	subs	r3, r6, r4
 80105a2:	3b15      	subs	r3, #21
 80105a4:	f023 0303 	bic.w	r3, r3, #3
 80105a8:	3304      	adds	r3, #4
 80105aa:	3415      	adds	r4, #21
 80105ac:	42a6      	cmp	r6, r4
 80105ae:	bf38      	it	cc
 80105b0:	2304      	movcc	r3, #4
 80105b2:	441d      	add	r5, r3
 80105b4:	4473      	add	r3, lr
 80105b6:	469e      	mov	lr, r3
 80105b8:	462e      	mov	r6, r5
 80105ba:	4566      	cmp	r6, ip
 80105bc:	d30e      	bcc.n	80105dc <__mdiff+0xec>
 80105be:	f10c 0203 	add.w	r2, ip, #3
 80105c2:	1b52      	subs	r2, r2, r5
 80105c4:	f022 0203 	bic.w	r2, r2, #3
 80105c8:	3d03      	subs	r5, #3
 80105ca:	45ac      	cmp	ip, r5
 80105cc:	bf38      	it	cc
 80105ce:	2200      	movcc	r2, #0
 80105d0:	441a      	add	r2, r3
 80105d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80105d6:	b17b      	cbz	r3, 80105f8 <__mdiff+0x108>
 80105d8:	6107      	str	r7, [r0, #16]
 80105da:	e7a3      	b.n	8010524 <__mdiff+0x34>
 80105dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80105e0:	fa11 f288 	uxtah	r2, r1, r8
 80105e4:	1414      	asrs	r4, r2, #16
 80105e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80105ea:	b292      	uxth	r2, r2
 80105ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80105f0:	f84e 2b04 	str.w	r2, [lr], #4
 80105f4:	1421      	asrs	r1, r4, #16
 80105f6:	e7e0      	b.n	80105ba <__mdiff+0xca>
 80105f8:	3f01      	subs	r7, #1
 80105fa:	e7ea      	b.n	80105d2 <__mdiff+0xe2>
 80105fc:	08013d7b 	.word	0x08013d7b
 8010600:	08013d8c 	.word	0x08013d8c

08010604 <__d2b>:
 8010604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010608:	4689      	mov	r9, r1
 801060a:	2101      	movs	r1, #1
 801060c:	ec57 6b10 	vmov	r6, r7, d0
 8010610:	4690      	mov	r8, r2
 8010612:	f7ff fccf 	bl	800ffb4 <_Balloc>
 8010616:	4604      	mov	r4, r0
 8010618:	b930      	cbnz	r0, 8010628 <__d2b+0x24>
 801061a:	4602      	mov	r2, r0
 801061c:	4b25      	ldr	r3, [pc, #148]	; (80106b4 <__d2b+0xb0>)
 801061e:	4826      	ldr	r0, [pc, #152]	; (80106b8 <__d2b+0xb4>)
 8010620:	f240 310a 	movw	r1, #778	; 0x30a
 8010624:	f000 fa1a 	bl	8010a5c <__assert_func>
 8010628:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801062c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010630:	bb35      	cbnz	r5, 8010680 <__d2b+0x7c>
 8010632:	2e00      	cmp	r6, #0
 8010634:	9301      	str	r3, [sp, #4]
 8010636:	d028      	beq.n	801068a <__d2b+0x86>
 8010638:	4668      	mov	r0, sp
 801063a:	9600      	str	r6, [sp, #0]
 801063c:	f7ff fd82 	bl	8010144 <__lo0bits>
 8010640:	9900      	ldr	r1, [sp, #0]
 8010642:	b300      	cbz	r0, 8010686 <__d2b+0x82>
 8010644:	9a01      	ldr	r2, [sp, #4]
 8010646:	f1c0 0320 	rsb	r3, r0, #32
 801064a:	fa02 f303 	lsl.w	r3, r2, r3
 801064e:	430b      	orrs	r3, r1
 8010650:	40c2      	lsrs	r2, r0
 8010652:	6163      	str	r3, [r4, #20]
 8010654:	9201      	str	r2, [sp, #4]
 8010656:	9b01      	ldr	r3, [sp, #4]
 8010658:	61a3      	str	r3, [r4, #24]
 801065a:	2b00      	cmp	r3, #0
 801065c:	bf14      	ite	ne
 801065e:	2202      	movne	r2, #2
 8010660:	2201      	moveq	r2, #1
 8010662:	6122      	str	r2, [r4, #16]
 8010664:	b1d5      	cbz	r5, 801069c <__d2b+0x98>
 8010666:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801066a:	4405      	add	r5, r0
 801066c:	f8c9 5000 	str.w	r5, [r9]
 8010670:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010674:	f8c8 0000 	str.w	r0, [r8]
 8010678:	4620      	mov	r0, r4
 801067a:	b003      	add	sp, #12
 801067c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010684:	e7d5      	b.n	8010632 <__d2b+0x2e>
 8010686:	6161      	str	r1, [r4, #20]
 8010688:	e7e5      	b.n	8010656 <__d2b+0x52>
 801068a:	a801      	add	r0, sp, #4
 801068c:	f7ff fd5a 	bl	8010144 <__lo0bits>
 8010690:	9b01      	ldr	r3, [sp, #4]
 8010692:	6163      	str	r3, [r4, #20]
 8010694:	2201      	movs	r2, #1
 8010696:	6122      	str	r2, [r4, #16]
 8010698:	3020      	adds	r0, #32
 801069a:	e7e3      	b.n	8010664 <__d2b+0x60>
 801069c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80106a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80106a4:	f8c9 0000 	str.w	r0, [r9]
 80106a8:	6918      	ldr	r0, [r3, #16]
 80106aa:	f7ff fd2b 	bl	8010104 <__hi0bits>
 80106ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80106b2:	e7df      	b.n	8010674 <__d2b+0x70>
 80106b4:	08013d7b 	.word	0x08013d7b
 80106b8:	08013d8c 	.word	0x08013d8c

080106bc <_calloc_r>:
 80106bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106be:	fba1 2402 	umull	r2, r4, r1, r2
 80106c2:	b94c      	cbnz	r4, 80106d8 <_calloc_r+0x1c>
 80106c4:	4611      	mov	r1, r2
 80106c6:	9201      	str	r2, [sp, #4]
 80106c8:	f7fd ff30 	bl	800e52c <_malloc_r>
 80106cc:	9a01      	ldr	r2, [sp, #4]
 80106ce:	4605      	mov	r5, r0
 80106d0:	b930      	cbnz	r0, 80106e0 <_calloc_r+0x24>
 80106d2:	4628      	mov	r0, r5
 80106d4:	b003      	add	sp, #12
 80106d6:	bd30      	pop	{r4, r5, pc}
 80106d8:	220c      	movs	r2, #12
 80106da:	6002      	str	r2, [r0, #0]
 80106dc:	2500      	movs	r5, #0
 80106de:	e7f8      	b.n	80106d2 <_calloc_r+0x16>
 80106e0:	4621      	mov	r1, r4
 80106e2:	f7fd fefa 	bl	800e4da <memset>
 80106e6:	e7f4      	b.n	80106d2 <_calloc_r+0x16>

080106e8 <_free_r>:
 80106e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106ea:	2900      	cmp	r1, #0
 80106ec:	d044      	beq.n	8010778 <_free_r+0x90>
 80106ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106f2:	9001      	str	r0, [sp, #4]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f1a1 0404 	sub.w	r4, r1, #4
 80106fa:	bfb8      	it	lt
 80106fc:	18e4      	addlt	r4, r4, r3
 80106fe:	f7ff fc4d 	bl	800ff9c <__malloc_lock>
 8010702:	4a1e      	ldr	r2, [pc, #120]	; (801077c <_free_r+0x94>)
 8010704:	9801      	ldr	r0, [sp, #4]
 8010706:	6813      	ldr	r3, [r2, #0]
 8010708:	b933      	cbnz	r3, 8010718 <_free_r+0x30>
 801070a:	6063      	str	r3, [r4, #4]
 801070c:	6014      	str	r4, [r2, #0]
 801070e:	b003      	add	sp, #12
 8010710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010714:	f7ff bc48 	b.w	800ffa8 <__malloc_unlock>
 8010718:	42a3      	cmp	r3, r4
 801071a:	d908      	bls.n	801072e <_free_r+0x46>
 801071c:	6825      	ldr	r5, [r4, #0]
 801071e:	1961      	adds	r1, r4, r5
 8010720:	428b      	cmp	r3, r1
 8010722:	bf01      	itttt	eq
 8010724:	6819      	ldreq	r1, [r3, #0]
 8010726:	685b      	ldreq	r3, [r3, #4]
 8010728:	1949      	addeq	r1, r1, r5
 801072a:	6021      	streq	r1, [r4, #0]
 801072c:	e7ed      	b.n	801070a <_free_r+0x22>
 801072e:	461a      	mov	r2, r3
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	b10b      	cbz	r3, 8010738 <_free_r+0x50>
 8010734:	42a3      	cmp	r3, r4
 8010736:	d9fa      	bls.n	801072e <_free_r+0x46>
 8010738:	6811      	ldr	r1, [r2, #0]
 801073a:	1855      	adds	r5, r2, r1
 801073c:	42a5      	cmp	r5, r4
 801073e:	d10b      	bne.n	8010758 <_free_r+0x70>
 8010740:	6824      	ldr	r4, [r4, #0]
 8010742:	4421      	add	r1, r4
 8010744:	1854      	adds	r4, r2, r1
 8010746:	42a3      	cmp	r3, r4
 8010748:	6011      	str	r1, [r2, #0]
 801074a:	d1e0      	bne.n	801070e <_free_r+0x26>
 801074c:	681c      	ldr	r4, [r3, #0]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	6053      	str	r3, [r2, #4]
 8010752:	4421      	add	r1, r4
 8010754:	6011      	str	r1, [r2, #0]
 8010756:	e7da      	b.n	801070e <_free_r+0x26>
 8010758:	d902      	bls.n	8010760 <_free_r+0x78>
 801075a:	230c      	movs	r3, #12
 801075c:	6003      	str	r3, [r0, #0]
 801075e:	e7d6      	b.n	801070e <_free_r+0x26>
 8010760:	6825      	ldr	r5, [r4, #0]
 8010762:	1961      	adds	r1, r4, r5
 8010764:	428b      	cmp	r3, r1
 8010766:	bf04      	itt	eq
 8010768:	6819      	ldreq	r1, [r3, #0]
 801076a:	685b      	ldreq	r3, [r3, #4]
 801076c:	6063      	str	r3, [r4, #4]
 801076e:	bf04      	itt	eq
 8010770:	1949      	addeq	r1, r1, r5
 8010772:	6021      	streq	r1, [r4, #0]
 8010774:	6054      	str	r4, [r2, #4]
 8010776:	e7ca      	b.n	801070e <_free_r+0x26>
 8010778:	b003      	add	sp, #12
 801077a:	bd30      	pop	{r4, r5, pc}
 801077c:	200063a4 	.word	0x200063a4

08010780 <__ssputs_r>:
 8010780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010784:	688e      	ldr	r6, [r1, #8]
 8010786:	429e      	cmp	r6, r3
 8010788:	4682      	mov	sl, r0
 801078a:	460c      	mov	r4, r1
 801078c:	4690      	mov	r8, r2
 801078e:	461f      	mov	r7, r3
 8010790:	d838      	bhi.n	8010804 <__ssputs_r+0x84>
 8010792:	898a      	ldrh	r2, [r1, #12]
 8010794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010798:	d032      	beq.n	8010800 <__ssputs_r+0x80>
 801079a:	6825      	ldr	r5, [r4, #0]
 801079c:	6909      	ldr	r1, [r1, #16]
 801079e:	eba5 0901 	sub.w	r9, r5, r1
 80107a2:	6965      	ldr	r5, [r4, #20]
 80107a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107ac:	3301      	adds	r3, #1
 80107ae:	444b      	add	r3, r9
 80107b0:	106d      	asrs	r5, r5, #1
 80107b2:	429d      	cmp	r5, r3
 80107b4:	bf38      	it	cc
 80107b6:	461d      	movcc	r5, r3
 80107b8:	0553      	lsls	r3, r2, #21
 80107ba:	d531      	bpl.n	8010820 <__ssputs_r+0xa0>
 80107bc:	4629      	mov	r1, r5
 80107be:	f7fd feb5 	bl	800e52c <_malloc_r>
 80107c2:	4606      	mov	r6, r0
 80107c4:	b950      	cbnz	r0, 80107dc <__ssputs_r+0x5c>
 80107c6:	230c      	movs	r3, #12
 80107c8:	f8ca 3000 	str.w	r3, [sl]
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107d2:	81a3      	strh	r3, [r4, #12]
 80107d4:	f04f 30ff 	mov.w	r0, #4294967295
 80107d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107dc:	6921      	ldr	r1, [r4, #16]
 80107de:	464a      	mov	r2, r9
 80107e0:	f7fd fe6d 	bl	800e4be <memcpy>
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80107ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107ee:	81a3      	strh	r3, [r4, #12]
 80107f0:	6126      	str	r6, [r4, #16]
 80107f2:	6165      	str	r5, [r4, #20]
 80107f4:	444e      	add	r6, r9
 80107f6:	eba5 0509 	sub.w	r5, r5, r9
 80107fa:	6026      	str	r6, [r4, #0]
 80107fc:	60a5      	str	r5, [r4, #8]
 80107fe:	463e      	mov	r6, r7
 8010800:	42be      	cmp	r6, r7
 8010802:	d900      	bls.n	8010806 <__ssputs_r+0x86>
 8010804:	463e      	mov	r6, r7
 8010806:	6820      	ldr	r0, [r4, #0]
 8010808:	4632      	mov	r2, r6
 801080a:	4641      	mov	r1, r8
 801080c:	f000 f968 	bl	8010ae0 <memmove>
 8010810:	68a3      	ldr	r3, [r4, #8]
 8010812:	1b9b      	subs	r3, r3, r6
 8010814:	60a3      	str	r3, [r4, #8]
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	4433      	add	r3, r6
 801081a:	6023      	str	r3, [r4, #0]
 801081c:	2000      	movs	r0, #0
 801081e:	e7db      	b.n	80107d8 <__ssputs_r+0x58>
 8010820:	462a      	mov	r2, r5
 8010822:	f000 f977 	bl	8010b14 <_realloc_r>
 8010826:	4606      	mov	r6, r0
 8010828:	2800      	cmp	r0, #0
 801082a:	d1e1      	bne.n	80107f0 <__ssputs_r+0x70>
 801082c:	6921      	ldr	r1, [r4, #16]
 801082e:	4650      	mov	r0, sl
 8010830:	f7ff ff5a 	bl	80106e8 <_free_r>
 8010834:	e7c7      	b.n	80107c6 <__ssputs_r+0x46>
	...

08010838 <_svfiprintf_r>:
 8010838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801083c:	4698      	mov	r8, r3
 801083e:	898b      	ldrh	r3, [r1, #12]
 8010840:	061b      	lsls	r3, r3, #24
 8010842:	b09d      	sub	sp, #116	; 0x74
 8010844:	4607      	mov	r7, r0
 8010846:	460d      	mov	r5, r1
 8010848:	4614      	mov	r4, r2
 801084a:	d50e      	bpl.n	801086a <_svfiprintf_r+0x32>
 801084c:	690b      	ldr	r3, [r1, #16]
 801084e:	b963      	cbnz	r3, 801086a <_svfiprintf_r+0x32>
 8010850:	2140      	movs	r1, #64	; 0x40
 8010852:	f7fd fe6b 	bl	800e52c <_malloc_r>
 8010856:	6028      	str	r0, [r5, #0]
 8010858:	6128      	str	r0, [r5, #16]
 801085a:	b920      	cbnz	r0, 8010866 <_svfiprintf_r+0x2e>
 801085c:	230c      	movs	r3, #12
 801085e:	603b      	str	r3, [r7, #0]
 8010860:	f04f 30ff 	mov.w	r0, #4294967295
 8010864:	e0d1      	b.n	8010a0a <_svfiprintf_r+0x1d2>
 8010866:	2340      	movs	r3, #64	; 0x40
 8010868:	616b      	str	r3, [r5, #20]
 801086a:	2300      	movs	r3, #0
 801086c:	9309      	str	r3, [sp, #36]	; 0x24
 801086e:	2320      	movs	r3, #32
 8010870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010874:	f8cd 800c 	str.w	r8, [sp, #12]
 8010878:	2330      	movs	r3, #48	; 0x30
 801087a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010a24 <_svfiprintf_r+0x1ec>
 801087e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010882:	f04f 0901 	mov.w	r9, #1
 8010886:	4623      	mov	r3, r4
 8010888:	469a      	mov	sl, r3
 801088a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801088e:	b10a      	cbz	r2, 8010894 <_svfiprintf_r+0x5c>
 8010890:	2a25      	cmp	r2, #37	; 0x25
 8010892:	d1f9      	bne.n	8010888 <_svfiprintf_r+0x50>
 8010894:	ebba 0b04 	subs.w	fp, sl, r4
 8010898:	d00b      	beq.n	80108b2 <_svfiprintf_r+0x7a>
 801089a:	465b      	mov	r3, fp
 801089c:	4622      	mov	r2, r4
 801089e:	4629      	mov	r1, r5
 80108a0:	4638      	mov	r0, r7
 80108a2:	f7ff ff6d 	bl	8010780 <__ssputs_r>
 80108a6:	3001      	adds	r0, #1
 80108a8:	f000 80aa 	beq.w	8010a00 <_svfiprintf_r+0x1c8>
 80108ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108ae:	445a      	add	r2, fp
 80108b0:	9209      	str	r2, [sp, #36]	; 0x24
 80108b2:	f89a 3000 	ldrb.w	r3, [sl]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f000 80a2 	beq.w	8010a00 <_svfiprintf_r+0x1c8>
 80108bc:	2300      	movs	r3, #0
 80108be:	f04f 32ff 	mov.w	r2, #4294967295
 80108c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108c6:	f10a 0a01 	add.w	sl, sl, #1
 80108ca:	9304      	str	r3, [sp, #16]
 80108cc:	9307      	str	r3, [sp, #28]
 80108ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108d2:	931a      	str	r3, [sp, #104]	; 0x68
 80108d4:	4654      	mov	r4, sl
 80108d6:	2205      	movs	r2, #5
 80108d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108dc:	4851      	ldr	r0, [pc, #324]	; (8010a24 <_svfiprintf_r+0x1ec>)
 80108de:	f7ef fc8f 	bl	8000200 <memchr>
 80108e2:	9a04      	ldr	r2, [sp, #16]
 80108e4:	b9d8      	cbnz	r0, 801091e <_svfiprintf_r+0xe6>
 80108e6:	06d0      	lsls	r0, r2, #27
 80108e8:	bf44      	itt	mi
 80108ea:	2320      	movmi	r3, #32
 80108ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108f0:	0711      	lsls	r1, r2, #28
 80108f2:	bf44      	itt	mi
 80108f4:	232b      	movmi	r3, #43	; 0x2b
 80108f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108fa:	f89a 3000 	ldrb.w	r3, [sl]
 80108fe:	2b2a      	cmp	r3, #42	; 0x2a
 8010900:	d015      	beq.n	801092e <_svfiprintf_r+0xf6>
 8010902:	9a07      	ldr	r2, [sp, #28]
 8010904:	4654      	mov	r4, sl
 8010906:	2000      	movs	r0, #0
 8010908:	f04f 0c0a 	mov.w	ip, #10
 801090c:	4621      	mov	r1, r4
 801090e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010912:	3b30      	subs	r3, #48	; 0x30
 8010914:	2b09      	cmp	r3, #9
 8010916:	d94e      	bls.n	80109b6 <_svfiprintf_r+0x17e>
 8010918:	b1b0      	cbz	r0, 8010948 <_svfiprintf_r+0x110>
 801091a:	9207      	str	r2, [sp, #28]
 801091c:	e014      	b.n	8010948 <_svfiprintf_r+0x110>
 801091e:	eba0 0308 	sub.w	r3, r0, r8
 8010922:	fa09 f303 	lsl.w	r3, r9, r3
 8010926:	4313      	orrs	r3, r2
 8010928:	9304      	str	r3, [sp, #16]
 801092a:	46a2      	mov	sl, r4
 801092c:	e7d2      	b.n	80108d4 <_svfiprintf_r+0x9c>
 801092e:	9b03      	ldr	r3, [sp, #12]
 8010930:	1d19      	adds	r1, r3, #4
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	9103      	str	r1, [sp, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	bfbb      	ittet	lt
 801093a:	425b      	neglt	r3, r3
 801093c:	f042 0202 	orrlt.w	r2, r2, #2
 8010940:	9307      	strge	r3, [sp, #28]
 8010942:	9307      	strlt	r3, [sp, #28]
 8010944:	bfb8      	it	lt
 8010946:	9204      	strlt	r2, [sp, #16]
 8010948:	7823      	ldrb	r3, [r4, #0]
 801094a:	2b2e      	cmp	r3, #46	; 0x2e
 801094c:	d10c      	bne.n	8010968 <_svfiprintf_r+0x130>
 801094e:	7863      	ldrb	r3, [r4, #1]
 8010950:	2b2a      	cmp	r3, #42	; 0x2a
 8010952:	d135      	bne.n	80109c0 <_svfiprintf_r+0x188>
 8010954:	9b03      	ldr	r3, [sp, #12]
 8010956:	1d1a      	adds	r2, r3, #4
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	9203      	str	r2, [sp, #12]
 801095c:	2b00      	cmp	r3, #0
 801095e:	bfb8      	it	lt
 8010960:	f04f 33ff 	movlt.w	r3, #4294967295
 8010964:	3402      	adds	r4, #2
 8010966:	9305      	str	r3, [sp, #20]
 8010968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010a34 <_svfiprintf_r+0x1fc>
 801096c:	7821      	ldrb	r1, [r4, #0]
 801096e:	2203      	movs	r2, #3
 8010970:	4650      	mov	r0, sl
 8010972:	f7ef fc45 	bl	8000200 <memchr>
 8010976:	b140      	cbz	r0, 801098a <_svfiprintf_r+0x152>
 8010978:	2340      	movs	r3, #64	; 0x40
 801097a:	eba0 000a 	sub.w	r0, r0, sl
 801097e:	fa03 f000 	lsl.w	r0, r3, r0
 8010982:	9b04      	ldr	r3, [sp, #16]
 8010984:	4303      	orrs	r3, r0
 8010986:	3401      	adds	r4, #1
 8010988:	9304      	str	r3, [sp, #16]
 801098a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801098e:	4826      	ldr	r0, [pc, #152]	; (8010a28 <_svfiprintf_r+0x1f0>)
 8010990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010994:	2206      	movs	r2, #6
 8010996:	f7ef fc33 	bl	8000200 <memchr>
 801099a:	2800      	cmp	r0, #0
 801099c:	d038      	beq.n	8010a10 <_svfiprintf_r+0x1d8>
 801099e:	4b23      	ldr	r3, [pc, #140]	; (8010a2c <_svfiprintf_r+0x1f4>)
 80109a0:	bb1b      	cbnz	r3, 80109ea <_svfiprintf_r+0x1b2>
 80109a2:	9b03      	ldr	r3, [sp, #12]
 80109a4:	3307      	adds	r3, #7
 80109a6:	f023 0307 	bic.w	r3, r3, #7
 80109aa:	3308      	adds	r3, #8
 80109ac:	9303      	str	r3, [sp, #12]
 80109ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b0:	4433      	add	r3, r6
 80109b2:	9309      	str	r3, [sp, #36]	; 0x24
 80109b4:	e767      	b.n	8010886 <_svfiprintf_r+0x4e>
 80109b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80109ba:	460c      	mov	r4, r1
 80109bc:	2001      	movs	r0, #1
 80109be:	e7a5      	b.n	801090c <_svfiprintf_r+0xd4>
 80109c0:	2300      	movs	r3, #0
 80109c2:	3401      	adds	r4, #1
 80109c4:	9305      	str	r3, [sp, #20]
 80109c6:	4619      	mov	r1, r3
 80109c8:	f04f 0c0a 	mov.w	ip, #10
 80109cc:	4620      	mov	r0, r4
 80109ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109d2:	3a30      	subs	r2, #48	; 0x30
 80109d4:	2a09      	cmp	r2, #9
 80109d6:	d903      	bls.n	80109e0 <_svfiprintf_r+0x1a8>
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d0c5      	beq.n	8010968 <_svfiprintf_r+0x130>
 80109dc:	9105      	str	r1, [sp, #20]
 80109de:	e7c3      	b.n	8010968 <_svfiprintf_r+0x130>
 80109e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80109e4:	4604      	mov	r4, r0
 80109e6:	2301      	movs	r3, #1
 80109e8:	e7f0      	b.n	80109cc <_svfiprintf_r+0x194>
 80109ea:	ab03      	add	r3, sp, #12
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	462a      	mov	r2, r5
 80109f0:	4b0f      	ldr	r3, [pc, #60]	; (8010a30 <_svfiprintf_r+0x1f8>)
 80109f2:	a904      	add	r1, sp, #16
 80109f4:	4638      	mov	r0, r7
 80109f6:	f7fd fead 	bl	800e754 <_printf_float>
 80109fa:	1c42      	adds	r2, r0, #1
 80109fc:	4606      	mov	r6, r0
 80109fe:	d1d6      	bne.n	80109ae <_svfiprintf_r+0x176>
 8010a00:	89ab      	ldrh	r3, [r5, #12]
 8010a02:	065b      	lsls	r3, r3, #25
 8010a04:	f53f af2c 	bmi.w	8010860 <_svfiprintf_r+0x28>
 8010a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a0a:	b01d      	add	sp, #116	; 0x74
 8010a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a10:	ab03      	add	r3, sp, #12
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	462a      	mov	r2, r5
 8010a16:	4b06      	ldr	r3, [pc, #24]	; (8010a30 <_svfiprintf_r+0x1f8>)
 8010a18:	a904      	add	r1, sp, #16
 8010a1a:	4638      	mov	r0, r7
 8010a1c:	f7fe f93e 	bl	800ec9c <_printf_i>
 8010a20:	e7eb      	b.n	80109fa <_svfiprintf_r+0x1c2>
 8010a22:	bf00      	nop
 8010a24:	08013ee4 	.word	0x08013ee4
 8010a28:	08013eee 	.word	0x08013eee
 8010a2c:	0800e755 	.word	0x0800e755
 8010a30:	08010781 	.word	0x08010781
 8010a34:	08013eea 	.word	0x08013eea

08010a38 <_read_r>:
 8010a38:	b538      	push	{r3, r4, r5, lr}
 8010a3a:	4d07      	ldr	r5, [pc, #28]	; (8010a58 <_read_r+0x20>)
 8010a3c:	4604      	mov	r4, r0
 8010a3e:	4608      	mov	r0, r1
 8010a40:	4611      	mov	r1, r2
 8010a42:	2200      	movs	r2, #0
 8010a44:	602a      	str	r2, [r5, #0]
 8010a46:	461a      	mov	r2, r3
 8010a48:	f7f0 ffee 	bl	8001a28 <_read>
 8010a4c:	1c43      	adds	r3, r0, #1
 8010a4e:	d102      	bne.n	8010a56 <_read_r+0x1e>
 8010a50:	682b      	ldr	r3, [r5, #0]
 8010a52:	b103      	cbz	r3, 8010a56 <_read_r+0x1e>
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	bd38      	pop	{r3, r4, r5, pc}
 8010a58:	200063ac 	.word	0x200063ac

08010a5c <__assert_func>:
 8010a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a5e:	4614      	mov	r4, r2
 8010a60:	461a      	mov	r2, r3
 8010a62:	4b09      	ldr	r3, [pc, #36]	; (8010a88 <__assert_func+0x2c>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4605      	mov	r5, r0
 8010a68:	68d8      	ldr	r0, [r3, #12]
 8010a6a:	b14c      	cbz	r4, 8010a80 <__assert_func+0x24>
 8010a6c:	4b07      	ldr	r3, [pc, #28]	; (8010a8c <__assert_func+0x30>)
 8010a6e:	9100      	str	r1, [sp, #0]
 8010a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a74:	4906      	ldr	r1, [pc, #24]	; (8010a90 <__assert_func+0x34>)
 8010a76:	462b      	mov	r3, r5
 8010a78:	f000 f80e 	bl	8010a98 <fiprintf>
 8010a7c:	f000 faa0 	bl	8010fc0 <abort>
 8010a80:	4b04      	ldr	r3, [pc, #16]	; (8010a94 <__assert_func+0x38>)
 8010a82:	461c      	mov	r4, r3
 8010a84:	e7f3      	b.n	8010a6e <__assert_func+0x12>
 8010a86:	bf00      	nop
 8010a88:	20000210 	.word	0x20000210
 8010a8c:	08013ef5 	.word	0x08013ef5
 8010a90:	08013f02 	.word	0x08013f02
 8010a94:	08013f30 	.word	0x08013f30

08010a98 <fiprintf>:
 8010a98:	b40e      	push	{r1, r2, r3}
 8010a9a:	b503      	push	{r0, r1, lr}
 8010a9c:	4601      	mov	r1, r0
 8010a9e:	ab03      	add	r3, sp, #12
 8010aa0:	4805      	ldr	r0, [pc, #20]	; (8010ab8 <fiprintf+0x20>)
 8010aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa6:	6800      	ldr	r0, [r0, #0]
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	f000 f88b 	bl	8010bc4 <_vfiprintf_r>
 8010aae:	b002      	add	sp, #8
 8010ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ab4:	b003      	add	sp, #12
 8010ab6:	4770      	bx	lr
 8010ab8:	20000210 	.word	0x20000210

08010abc <__ascii_mbtowc>:
 8010abc:	b082      	sub	sp, #8
 8010abe:	b901      	cbnz	r1, 8010ac2 <__ascii_mbtowc+0x6>
 8010ac0:	a901      	add	r1, sp, #4
 8010ac2:	b142      	cbz	r2, 8010ad6 <__ascii_mbtowc+0x1a>
 8010ac4:	b14b      	cbz	r3, 8010ada <__ascii_mbtowc+0x1e>
 8010ac6:	7813      	ldrb	r3, [r2, #0]
 8010ac8:	600b      	str	r3, [r1, #0]
 8010aca:	7812      	ldrb	r2, [r2, #0]
 8010acc:	1e10      	subs	r0, r2, #0
 8010ace:	bf18      	it	ne
 8010ad0:	2001      	movne	r0, #1
 8010ad2:	b002      	add	sp, #8
 8010ad4:	4770      	bx	lr
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	e7fb      	b.n	8010ad2 <__ascii_mbtowc+0x16>
 8010ada:	f06f 0001 	mvn.w	r0, #1
 8010ade:	e7f8      	b.n	8010ad2 <__ascii_mbtowc+0x16>

08010ae0 <memmove>:
 8010ae0:	4288      	cmp	r0, r1
 8010ae2:	b510      	push	{r4, lr}
 8010ae4:	eb01 0402 	add.w	r4, r1, r2
 8010ae8:	d902      	bls.n	8010af0 <memmove+0x10>
 8010aea:	4284      	cmp	r4, r0
 8010aec:	4623      	mov	r3, r4
 8010aee:	d807      	bhi.n	8010b00 <memmove+0x20>
 8010af0:	1e43      	subs	r3, r0, #1
 8010af2:	42a1      	cmp	r1, r4
 8010af4:	d008      	beq.n	8010b08 <memmove+0x28>
 8010af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010afe:	e7f8      	b.n	8010af2 <memmove+0x12>
 8010b00:	4402      	add	r2, r0
 8010b02:	4601      	mov	r1, r0
 8010b04:	428a      	cmp	r2, r1
 8010b06:	d100      	bne.n	8010b0a <memmove+0x2a>
 8010b08:	bd10      	pop	{r4, pc}
 8010b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b12:	e7f7      	b.n	8010b04 <memmove+0x24>

08010b14 <_realloc_r>:
 8010b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b18:	4680      	mov	r8, r0
 8010b1a:	4614      	mov	r4, r2
 8010b1c:	460e      	mov	r6, r1
 8010b1e:	b921      	cbnz	r1, 8010b2a <_realloc_r+0x16>
 8010b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b24:	4611      	mov	r1, r2
 8010b26:	f7fd bd01 	b.w	800e52c <_malloc_r>
 8010b2a:	b92a      	cbnz	r2, 8010b38 <_realloc_r+0x24>
 8010b2c:	f7ff fddc 	bl	80106e8 <_free_r>
 8010b30:	4625      	mov	r5, r4
 8010b32:	4628      	mov	r0, r5
 8010b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b38:	f000 faae 	bl	8011098 <_malloc_usable_size_r>
 8010b3c:	4284      	cmp	r4, r0
 8010b3e:	4607      	mov	r7, r0
 8010b40:	d802      	bhi.n	8010b48 <_realloc_r+0x34>
 8010b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b46:	d812      	bhi.n	8010b6e <_realloc_r+0x5a>
 8010b48:	4621      	mov	r1, r4
 8010b4a:	4640      	mov	r0, r8
 8010b4c:	f7fd fcee 	bl	800e52c <_malloc_r>
 8010b50:	4605      	mov	r5, r0
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d0ed      	beq.n	8010b32 <_realloc_r+0x1e>
 8010b56:	42bc      	cmp	r4, r7
 8010b58:	4622      	mov	r2, r4
 8010b5a:	4631      	mov	r1, r6
 8010b5c:	bf28      	it	cs
 8010b5e:	463a      	movcs	r2, r7
 8010b60:	f7fd fcad 	bl	800e4be <memcpy>
 8010b64:	4631      	mov	r1, r6
 8010b66:	4640      	mov	r0, r8
 8010b68:	f7ff fdbe 	bl	80106e8 <_free_r>
 8010b6c:	e7e1      	b.n	8010b32 <_realloc_r+0x1e>
 8010b6e:	4635      	mov	r5, r6
 8010b70:	e7df      	b.n	8010b32 <_realloc_r+0x1e>

08010b72 <__sfputc_r>:
 8010b72:	6893      	ldr	r3, [r2, #8]
 8010b74:	3b01      	subs	r3, #1
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	b410      	push	{r4}
 8010b7a:	6093      	str	r3, [r2, #8]
 8010b7c:	da08      	bge.n	8010b90 <__sfputc_r+0x1e>
 8010b7e:	6994      	ldr	r4, [r2, #24]
 8010b80:	42a3      	cmp	r3, r4
 8010b82:	db01      	blt.n	8010b88 <__sfputc_r+0x16>
 8010b84:	290a      	cmp	r1, #10
 8010b86:	d103      	bne.n	8010b90 <__sfputc_r+0x1e>
 8010b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b8c:	f000 b94a 	b.w	8010e24 <__swbuf_r>
 8010b90:	6813      	ldr	r3, [r2, #0]
 8010b92:	1c58      	adds	r0, r3, #1
 8010b94:	6010      	str	r0, [r2, #0]
 8010b96:	7019      	strb	r1, [r3, #0]
 8010b98:	4608      	mov	r0, r1
 8010b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <__sfputs_r>:
 8010ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	460f      	mov	r7, r1
 8010ba6:	4614      	mov	r4, r2
 8010ba8:	18d5      	adds	r5, r2, r3
 8010baa:	42ac      	cmp	r4, r5
 8010bac:	d101      	bne.n	8010bb2 <__sfputs_r+0x12>
 8010bae:	2000      	movs	r0, #0
 8010bb0:	e007      	b.n	8010bc2 <__sfputs_r+0x22>
 8010bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb6:	463a      	mov	r2, r7
 8010bb8:	4630      	mov	r0, r6
 8010bba:	f7ff ffda 	bl	8010b72 <__sfputc_r>
 8010bbe:	1c43      	adds	r3, r0, #1
 8010bc0:	d1f3      	bne.n	8010baa <__sfputs_r+0xa>
 8010bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010bc4 <_vfiprintf_r>:
 8010bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc8:	460d      	mov	r5, r1
 8010bca:	b09d      	sub	sp, #116	; 0x74
 8010bcc:	4614      	mov	r4, r2
 8010bce:	4698      	mov	r8, r3
 8010bd0:	4606      	mov	r6, r0
 8010bd2:	b118      	cbz	r0, 8010bdc <_vfiprintf_r+0x18>
 8010bd4:	6983      	ldr	r3, [r0, #24]
 8010bd6:	b90b      	cbnz	r3, 8010bdc <_vfiprintf_r+0x18>
 8010bd8:	f7fd fbac 	bl	800e334 <__sinit>
 8010bdc:	4b89      	ldr	r3, [pc, #548]	; (8010e04 <_vfiprintf_r+0x240>)
 8010bde:	429d      	cmp	r5, r3
 8010be0:	d11b      	bne.n	8010c1a <_vfiprintf_r+0x56>
 8010be2:	6875      	ldr	r5, [r6, #4]
 8010be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010be6:	07d9      	lsls	r1, r3, #31
 8010be8:	d405      	bmi.n	8010bf6 <_vfiprintf_r+0x32>
 8010bea:	89ab      	ldrh	r3, [r5, #12]
 8010bec:	059a      	lsls	r2, r3, #22
 8010bee:	d402      	bmi.n	8010bf6 <_vfiprintf_r+0x32>
 8010bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bf2:	f7fd fc62 	bl	800e4ba <__retarget_lock_acquire_recursive>
 8010bf6:	89ab      	ldrh	r3, [r5, #12]
 8010bf8:	071b      	lsls	r3, r3, #28
 8010bfa:	d501      	bpl.n	8010c00 <_vfiprintf_r+0x3c>
 8010bfc:	692b      	ldr	r3, [r5, #16]
 8010bfe:	b9eb      	cbnz	r3, 8010c3c <_vfiprintf_r+0x78>
 8010c00:	4629      	mov	r1, r5
 8010c02:	4630      	mov	r0, r6
 8010c04:	f000 f96e 	bl	8010ee4 <__swsetup_r>
 8010c08:	b1c0      	cbz	r0, 8010c3c <_vfiprintf_r+0x78>
 8010c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c0c:	07dc      	lsls	r4, r3, #31
 8010c0e:	d50e      	bpl.n	8010c2e <_vfiprintf_r+0x6a>
 8010c10:	f04f 30ff 	mov.w	r0, #4294967295
 8010c14:	b01d      	add	sp, #116	; 0x74
 8010c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1a:	4b7b      	ldr	r3, [pc, #492]	; (8010e08 <_vfiprintf_r+0x244>)
 8010c1c:	429d      	cmp	r5, r3
 8010c1e:	d101      	bne.n	8010c24 <_vfiprintf_r+0x60>
 8010c20:	68b5      	ldr	r5, [r6, #8]
 8010c22:	e7df      	b.n	8010be4 <_vfiprintf_r+0x20>
 8010c24:	4b79      	ldr	r3, [pc, #484]	; (8010e0c <_vfiprintf_r+0x248>)
 8010c26:	429d      	cmp	r5, r3
 8010c28:	bf08      	it	eq
 8010c2a:	68f5      	ldreq	r5, [r6, #12]
 8010c2c:	e7da      	b.n	8010be4 <_vfiprintf_r+0x20>
 8010c2e:	89ab      	ldrh	r3, [r5, #12]
 8010c30:	0598      	lsls	r0, r3, #22
 8010c32:	d4ed      	bmi.n	8010c10 <_vfiprintf_r+0x4c>
 8010c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c36:	f7fd fc41 	bl	800e4bc <__retarget_lock_release_recursive>
 8010c3a:	e7e9      	b.n	8010c10 <_vfiprintf_r+0x4c>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c40:	2320      	movs	r3, #32
 8010c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c4a:	2330      	movs	r3, #48	; 0x30
 8010c4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e10 <_vfiprintf_r+0x24c>
 8010c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c54:	f04f 0901 	mov.w	r9, #1
 8010c58:	4623      	mov	r3, r4
 8010c5a:	469a      	mov	sl, r3
 8010c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c60:	b10a      	cbz	r2, 8010c66 <_vfiprintf_r+0xa2>
 8010c62:	2a25      	cmp	r2, #37	; 0x25
 8010c64:	d1f9      	bne.n	8010c5a <_vfiprintf_r+0x96>
 8010c66:	ebba 0b04 	subs.w	fp, sl, r4
 8010c6a:	d00b      	beq.n	8010c84 <_vfiprintf_r+0xc0>
 8010c6c:	465b      	mov	r3, fp
 8010c6e:	4622      	mov	r2, r4
 8010c70:	4629      	mov	r1, r5
 8010c72:	4630      	mov	r0, r6
 8010c74:	f7ff ff94 	bl	8010ba0 <__sfputs_r>
 8010c78:	3001      	adds	r0, #1
 8010c7a:	f000 80aa 	beq.w	8010dd2 <_vfiprintf_r+0x20e>
 8010c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c80:	445a      	add	r2, fp
 8010c82:	9209      	str	r2, [sp, #36]	; 0x24
 8010c84:	f89a 3000 	ldrb.w	r3, [sl]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 80a2 	beq.w	8010dd2 <_vfiprintf_r+0x20e>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	f04f 32ff 	mov.w	r2, #4294967295
 8010c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c98:	f10a 0a01 	add.w	sl, sl, #1
 8010c9c:	9304      	str	r3, [sp, #16]
 8010c9e:	9307      	str	r3, [sp, #28]
 8010ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ca6:	4654      	mov	r4, sl
 8010ca8:	2205      	movs	r2, #5
 8010caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cae:	4858      	ldr	r0, [pc, #352]	; (8010e10 <_vfiprintf_r+0x24c>)
 8010cb0:	f7ef faa6 	bl	8000200 <memchr>
 8010cb4:	9a04      	ldr	r2, [sp, #16]
 8010cb6:	b9d8      	cbnz	r0, 8010cf0 <_vfiprintf_r+0x12c>
 8010cb8:	06d1      	lsls	r1, r2, #27
 8010cba:	bf44      	itt	mi
 8010cbc:	2320      	movmi	r3, #32
 8010cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cc2:	0713      	lsls	r3, r2, #28
 8010cc4:	bf44      	itt	mi
 8010cc6:	232b      	movmi	r3, #43	; 0x2b
 8010cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8010cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8010cd2:	d015      	beq.n	8010d00 <_vfiprintf_r+0x13c>
 8010cd4:	9a07      	ldr	r2, [sp, #28]
 8010cd6:	4654      	mov	r4, sl
 8010cd8:	2000      	movs	r0, #0
 8010cda:	f04f 0c0a 	mov.w	ip, #10
 8010cde:	4621      	mov	r1, r4
 8010ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ce4:	3b30      	subs	r3, #48	; 0x30
 8010ce6:	2b09      	cmp	r3, #9
 8010ce8:	d94e      	bls.n	8010d88 <_vfiprintf_r+0x1c4>
 8010cea:	b1b0      	cbz	r0, 8010d1a <_vfiprintf_r+0x156>
 8010cec:	9207      	str	r2, [sp, #28]
 8010cee:	e014      	b.n	8010d1a <_vfiprintf_r+0x156>
 8010cf0:	eba0 0308 	sub.w	r3, r0, r8
 8010cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	9304      	str	r3, [sp, #16]
 8010cfc:	46a2      	mov	sl, r4
 8010cfe:	e7d2      	b.n	8010ca6 <_vfiprintf_r+0xe2>
 8010d00:	9b03      	ldr	r3, [sp, #12]
 8010d02:	1d19      	adds	r1, r3, #4
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	9103      	str	r1, [sp, #12]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	bfbb      	ittet	lt
 8010d0c:	425b      	neglt	r3, r3
 8010d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8010d12:	9307      	strge	r3, [sp, #28]
 8010d14:	9307      	strlt	r3, [sp, #28]
 8010d16:	bfb8      	it	lt
 8010d18:	9204      	strlt	r2, [sp, #16]
 8010d1a:	7823      	ldrb	r3, [r4, #0]
 8010d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8010d1e:	d10c      	bne.n	8010d3a <_vfiprintf_r+0x176>
 8010d20:	7863      	ldrb	r3, [r4, #1]
 8010d22:	2b2a      	cmp	r3, #42	; 0x2a
 8010d24:	d135      	bne.n	8010d92 <_vfiprintf_r+0x1ce>
 8010d26:	9b03      	ldr	r3, [sp, #12]
 8010d28:	1d1a      	adds	r2, r3, #4
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	9203      	str	r2, [sp, #12]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	bfb8      	it	lt
 8010d32:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d36:	3402      	adds	r4, #2
 8010d38:	9305      	str	r3, [sp, #20]
 8010d3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010e20 <_vfiprintf_r+0x25c>
 8010d3e:	7821      	ldrb	r1, [r4, #0]
 8010d40:	2203      	movs	r2, #3
 8010d42:	4650      	mov	r0, sl
 8010d44:	f7ef fa5c 	bl	8000200 <memchr>
 8010d48:	b140      	cbz	r0, 8010d5c <_vfiprintf_r+0x198>
 8010d4a:	2340      	movs	r3, #64	; 0x40
 8010d4c:	eba0 000a 	sub.w	r0, r0, sl
 8010d50:	fa03 f000 	lsl.w	r0, r3, r0
 8010d54:	9b04      	ldr	r3, [sp, #16]
 8010d56:	4303      	orrs	r3, r0
 8010d58:	3401      	adds	r4, #1
 8010d5a:	9304      	str	r3, [sp, #16]
 8010d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d60:	482c      	ldr	r0, [pc, #176]	; (8010e14 <_vfiprintf_r+0x250>)
 8010d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d66:	2206      	movs	r2, #6
 8010d68:	f7ef fa4a 	bl	8000200 <memchr>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	d03f      	beq.n	8010df0 <_vfiprintf_r+0x22c>
 8010d70:	4b29      	ldr	r3, [pc, #164]	; (8010e18 <_vfiprintf_r+0x254>)
 8010d72:	bb1b      	cbnz	r3, 8010dbc <_vfiprintf_r+0x1f8>
 8010d74:	9b03      	ldr	r3, [sp, #12]
 8010d76:	3307      	adds	r3, #7
 8010d78:	f023 0307 	bic.w	r3, r3, #7
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	9303      	str	r3, [sp, #12]
 8010d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d82:	443b      	add	r3, r7
 8010d84:	9309      	str	r3, [sp, #36]	; 0x24
 8010d86:	e767      	b.n	8010c58 <_vfiprintf_r+0x94>
 8010d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d8c:	460c      	mov	r4, r1
 8010d8e:	2001      	movs	r0, #1
 8010d90:	e7a5      	b.n	8010cde <_vfiprintf_r+0x11a>
 8010d92:	2300      	movs	r3, #0
 8010d94:	3401      	adds	r4, #1
 8010d96:	9305      	str	r3, [sp, #20]
 8010d98:	4619      	mov	r1, r3
 8010d9a:	f04f 0c0a 	mov.w	ip, #10
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010da4:	3a30      	subs	r2, #48	; 0x30
 8010da6:	2a09      	cmp	r2, #9
 8010da8:	d903      	bls.n	8010db2 <_vfiprintf_r+0x1ee>
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d0c5      	beq.n	8010d3a <_vfiprintf_r+0x176>
 8010dae:	9105      	str	r1, [sp, #20]
 8010db0:	e7c3      	b.n	8010d3a <_vfiprintf_r+0x176>
 8010db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010db6:	4604      	mov	r4, r0
 8010db8:	2301      	movs	r3, #1
 8010dba:	e7f0      	b.n	8010d9e <_vfiprintf_r+0x1da>
 8010dbc:	ab03      	add	r3, sp, #12
 8010dbe:	9300      	str	r3, [sp, #0]
 8010dc0:	462a      	mov	r2, r5
 8010dc2:	4b16      	ldr	r3, [pc, #88]	; (8010e1c <_vfiprintf_r+0x258>)
 8010dc4:	a904      	add	r1, sp, #16
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	f7fd fcc4 	bl	800e754 <_printf_float>
 8010dcc:	4607      	mov	r7, r0
 8010dce:	1c78      	adds	r0, r7, #1
 8010dd0:	d1d6      	bne.n	8010d80 <_vfiprintf_r+0x1bc>
 8010dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010dd4:	07d9      	lsls	r1, r3, #31
 8010dd6:	d405      	bmi.n	8010de4 <_vfiprintf_r+0x220>
 8010dd8:	89ab      	ldrh	r3, [r5, #12]
 8010dda:	059a      	lsls	r2, r3, #22
 8010ddc:	d402      	bmi.n	8010de4 <_vfiprintf_r+0x220>
 8010dde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010de0:	f7fd fb6c 	bl	800e4bc <__retarget_lock_release_recursive>
 8010de4:	89ab      	ldrh	r3, [r5, #12]
 8010de6:	065b      	lsls	r3, r3, #25
 8010de8:	f53f af12 	bmi.w	8010c10 <_vfiprintf_r+0x4c>
 8010dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dee:	e711      	b.n	8010c14 <_vfiprintf_r+0x50>
 8010df0:	ab03      	add	r3, sp, #12
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	462a      	mov	r2, r5
 8010df6:	4b09      	ldr	r3, [pc, #36]	; (8010e1c <_vfiprintf_r+0x258>)
 8010df8:	a904      	add	r1, sp, #16
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f7fd ff4e 	bl	800ec9c <_printf_i>
 8010e00:	e7e4      	b.n	8010dcc <_vfiprintf_r+0x208>
 8010e02:	bf00      	nop
 8010e04:	08013c84 	.word	0x08013c84
 8010e08:	08013ca4 	.word	0x08013ca4
 8010e0c:	08013c64 	.word	0x08013c64
 8010e10:	08013ee4 	.word	0x08013ee4
 8010e14:	08013eee 	.word	0x08013eee
 8010e18:	0800e755 	.word	0x0800e755
 8010e1c:	08010ba1 	.word	0x08010ba1
 8010e20:	08013eea 	.word	0x08013eea

08010e24 <__swbuf_r>:
 8010e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e26:	460e      	mov	r6, r1
 8010e28:	4614      	mov	r4, r2
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	b118      	cbz	r0, 8010e36 <__swbuf_r+0x12>
 8010e2e:	6983      	ldr	r3, [r0, #24]
 8010e30:	b90b      	cbnz	r3, 8010e36 <__swbuf_r+0x12>
 8010e32:	f7fd fa7f 	bl	800e334 <__sinit>
 8010e36:	4b21      	ldr	r3, [pc, #132]	; (8010ebc <__swbuf_r+0x98>)
 8010e38:	429c      	cmp	r4, r3
 8010e3a:	d12b      	bne.n	8010e94 <__swbuf_r+0x70>
 8010e3c:	686c      	ldr	r4, [r5, #4]
 8010e3e:	69a3      	ldr	r3, [r4, #24]
 8010e40:	60a3      	str	r3, [r4, #8]
 8010e42:	89a3      	ldrh	r3, [r4, #12]
 8010e44:	071a      	lsls	r2, r3, #28
 8010e46:	d52f      	bpl.n	8010ea8 <__swbuf_r+0x84>
 8010e48:	6923      	ldr	r3, [r4, #16]
 8010e4a:	b36b      	cbz	r3, 8010ea8 <__swbuf_r+0x84>
 8010e4c:	6923      	ldr	r3, [r4, #16]
 8010e4e:	6820      	ldr	r0, [r4, #0]
 8010e50:	1ac0      	subs	r0, r0, r3
 8010e52:	6963      	ldr	r3, [r4, #20]
 8010e54:	b2f6      	uxtb	r6, r6
 8010e56:	4283      	cmp	r3, r0
 8010e58:	4637      	mov	r7, r6
 8010e5a:	dc04      	bgt.n	8010e66 <__swbuf_r+0x42>
 8010e5c:	4621      	mov	r1, r4
 8010e5e:	4628      	mov	r0, r5
 8010e60:	f7ff f842 	bl	800fee8 <_fflush_r>
 8010e64:	bb30      	cbnz	r0, 8010eb4 <__swbuf_r+0x90>
 8010e66:	68a3      	ldr	r3, [r4, #8]
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	60a3      	str	r3, [r4, #8]
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	1c5a      	adds	r2, r3, #1
 8010e70:	6022      	str	r2, [r4, #0]
 8010e72:	701e      	strb	r6, [r3, #0]
 8010e74:	6963      	ldr	r3, [r4, #20]
 8010e76:	3001      	adds	r0, #1
 8010e78:	4283      	cmp	r3, r0
 8010e7a:	d004      	beq.n	8010e86 <__swbuf_r+0x62>
 8010e7c:	89a3      	ldrh	r3, [r4, #12]
 8010e7e:	07db      	lsls	r3, r3, #31
 8010e80:	d506      	bpl.n	8010e90 <__swbuf_r+0x6c>
 8010e82:	2e0a      	cmp	r6, #10
 8010e84:	d104      	bne.n	8010e90 <__swbuf_r+0x6c>
 8010e86:	4621      	mov	r1, r4
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f7ff f82d 	bl	800fee8 <_fflush_r>
 8010e8e:	b988      	cbnz	r0, 8010eb4 <__swbuf_r+0x90>
 8010e90:	4638      	mov	r0, r7
 8010e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e94:	4b0a      	ldr	r3, [pc, #40]	; (8010ec0 <__swbuf_r+0x9c>)
 8010e96:	429c      	cmp	r4, r3
 8010e98:	d101      	bne.n	8010e9e <__swbuf_r+0x7a>
 8010e9a:	68ac      	ldr	r4, [r5, #8]
 8010e9c:	e7cf      	b.n	8010e3e <__swbuf_r+0x1a>
 8010e9e:	4b09      	ldr	r3, [pc, #36]	; (8010ec4 <__swbuf_r+0xa0>)
 8010ea0:	429c      	cmp	r4, r3
 8010ea2:	bf08      	it	eq
 8010ea4:	68ec      	ldreq	r4, [r5, #12]
 8010ea6:	e7ca      	b.n	8010e3e <__swbuf_r+0x1a>
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 f81a 	bl	8010ee4 <__swsetup_r>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	d0cb      	beq.n	8010e4c <__swbuf_r+0x28>
 8010eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8010eb8:	e7ea      	b.n	8010e90 <__swbuf_r+0x6c>
 8010eba:	bf00      	nop
 8010ebc:	08013c84 	.word	0x08013c84
 8010ec0:	08013ca4 	.word	0x08013ca4
 8010ec4:	08013c64 	.word	0x08013c64

08010ec8 <__ascii_wctomb>:
 8010ec8:	b149      	cbz	r1, 8010ede <__ascii_wctomb+0x16>
 8010eca:	2aff      	cmp	r2, #255	; 0xff
 8010ecc:	bf85      	ittet	hi
 8010ece:	238a      	movhi	r3, #138	; 0x8a
 8010ed0:	6003      	strhi	r3, [r0, #0]
 8010ed2:	700a      	strbls	r2, [r1, #0]
 8010ed4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ed8:	bf98      	it	ls
 8010eda:	2001      	movls	r0, #1
 8010edc:	4770      	bx	lr
 8010ede:	4608      	mov	r0, r1
 8010ee0:	4770      	bx	lr
	...

08010ee4 <__swsetup_r>:
 8010ee4:	4b32      	ldr	r3, [pc, #200]	; (8010fb0 <__swsetup_r+0xcc>)
 8010ee6:	b570      	push	{r4, r5, r6, lr}
 8010ee8:	681d      	ldr	r5, [r3, #0]
 8010eea:	4606      	mov	r6, r0
 8010eec:	460c      	mov	r4, r1
 8010eee:	b125      	cbz	r5, 8010efa <__swsetup_r+0x16>
 8010ef0:	69ab      	ldr	r3, [r5, #24]
 8010ef2:	b913      	cbnz	r3, 8010efa <__swsetup_r+0x16>
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f7fd fa1d 	bl	800e334 <__sinit>
 8010efa:	4b2e      	ldr	r3, [pc, #184]	; (8010fb4 <__swsetup_r+0xd0>)
 8010efc:	429c      	cmp	r4, r3
 8010efe:	d10f      	bne.n	8010f20 <__swsetup_r+0x3c>
 8010f00:	686c      	ldr	r4, [r5, #4]
 8010f02:	89a3      	ldrh	r3, [r4, #12]
 8010f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f08:	0719      	lsls	r1, r3, #28
 8010f0a:	d42c      	bmi.n	8010f66 <__swsetup_r+0x82>
 8010f0c:	06dd      	lsls	r5, r3, #27
 8010f0e:	d411      	bmi.n	8010f34 <__swsetup_r+0x50>
 8010f10:	2309      	movs	r3, #9
 8010f12:	6033      	str	r3, [r6, #0]
 8010f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f1e:	e03e      	b.n	8010f9e <__swsetup_r+0xba>
 8010f20:	4b25      	ldr	r3, [pc, #148]	; (8010fb8 <__swsetup_r+0xd4>)
 8010f22:	429c      	cmp	r4, r3
 8010f24:	d101      	bne.n	8010f2a <__swsetup_r+0x46>
 8010f26:	68ac      	ldr	r4, [r5, #8]
 8010f28:	e7eb      	b.n	8010f02 <__swsetup_r+0x1e>
 8010f2a:	4b24      	ldr	r3, [pc, #144]	; (8010fbc <__swsetup_r+0xd8>)
 8010f2c:	429c      	cmp	r4, r3
 8010f2e:	bf08      	it	eq
 8010f30:	68ec      	ldreq	r4, [r5, #12]
 8010f32:	e7e6      	b.n	8010f02 <__swsetup_r+0x1e>
 8010f34:	0758      	lsls	r0, r3, #29
 8010f36:	d512      	bpl.n	8010f5e <__swsetup_r+0x7a>
 8010f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f3a:	b141      	cbz	r1, 8010f4e <__swsetup_r+0x6a>
 8010f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f40:	4299      	cmp	r1, r3
 8010f42:	d002      	beq.n	8010f4a <__swsetup_r+0x66>
 8010f44:	4630      	mov	r0, r6
 8010f46:	f7ff fbcf 	bl	80106e8 <_free_r>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8010f4e:	89a3      	ldrh	r3, [r4, #12]
 8010f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f54:	81a3      	strh	r3, [r4, #12]
 8010f56:	2300      	movs	r3, #0
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	6923      	ldr	r3, [r4, #16]
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	89a3      	ldrh	r3, [r4, #12]
 8010f60:	f043 0308 	orr.w	r3, r3, #8
 8010f64:	81a3      	strh	r3, [r4, #12]
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	b94b      	cbnz	r3, 8010f7e <__swsetup_r+0x9a>
 8010f6a:	89a3      	ldrh	r3, [r4, #12]
 8010f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f74:	d003      	beq.n	8010f7e <__swsetup_r+0x9a>
 8010f76:	4621      	mov	r1, r4
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f000 f84d 	bl	8011018 <__smakebuf_r>
 8010f7e:	89a0      	ldrh	r0, [r4, #12]
 8010f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f84:	f010 0301 	ands.w	r3, r0, #1
 8010f88:	d00a      	beq.n	8010fa0 <__swsetup_r+0xbc>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	60a3      	str	r3, [r4, #8]
 8010f8e:	6963      	ldr	r3, [r4, #20]
 8010f90:	425b      	negs	r3, r3
 8010f92:	61a3      	str	r3, [r4, #24]
 8010f94:	6923      	ldr	r3, [r4, #16]
 8010f96:	b943      	cbnz	r3, 8010faa <__swsetup_r+0xc6>
 8010f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f9c:	d1ba      	bne.n	8010f14 <__swsetup_r+0x30>
 8010f9e:	bd70      	pop	{r4, r5, r6, pc}
 8010fa0:	0781      	lsls	r1, r0, #30
 8010fa2:	bf58      	it	pl
 8010fa4:	6963      	ldrpl	r3, [r4, #20]
 8010fa6:	60a3      	str	r3, [r4, #8]
 8010fa8:	e7f4      	b.n	8010f94 <__swsetup_r+0xb0>
 8010faa:	2000      	movs	r0, #0
 8010fac:	e7f7      	b.n	8010f9e <__swsetup_r+0xba>
 8010fae:	bf00      	nop
 8010fb0:	20000210 	.word	0x20000210
 8010fb4:	08013c84 	.word	0x08013c84
 8010fb8:	08013ca4 	.word	0x08013ca4
 8010fbc:	08013c64 	.word	0x08013c64

08010fc0 <abort>:
 8010fc0:	b508      	push	{r3, lr}
 8010fc2:	2006      	movs	r0, #6
 8010fc4:	f000 f898 	bl	80110f8 <raise>
 8010fc8:	2001      	movs	r0, #1
 8010fca:	f7f0 fd23 	bl	8001a14 <_exit>

08010fce <__swhatbuf_r>:
 8010fce:	b570      	push	{r4, r5, r6, lr}
 8010fd0:	460e      	mov	r6, r1
 8010fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fd6:	2900      	cmp	r1, #0
 8010fd8:	b096      	sub	sp, #88	; 0x58
 8010fda:	4614      	mov	r4, r2
 8010fdc:	461d      	mov	r5, r3
 8010fde:	da08      	bge.n	8010ff2 <__swhatbuf_r+0x24>
 8010fe0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	602a      	str	r2, [r5, #0]
 8010fe8:	061a      	lsls	r2, r3, #24
 8010fea:	d410      	bmi.n	801100e <__swhatbuf_r+0x40>
 8010fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ff0:	e00e      	b.n	8011010 <__swhatbuf_r+0x42>
 8010ff2:	466a      	mov	r2, sp
 8010ff4:	f000 f89c 	bl	8011130 <_fstat_r>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	dbf1      	blt.n	8010fe0 <__swhatbuf_r+0x12>
 8010ffc:	9a01      	ldr	r2, [sp, #4]
 8010ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011006:	425a      	negs	r2, r3
 8011008:	415a      	adcs	r2, r3
 801100a:	602a      	str	r2, [r5, #0]
 801100c:	e7ee      	b.n	8010fec <__swhatbuf_r+0x1e>
 801100e:	2340      	movs	r3, #64	; 0x40
 8011010:	2000      	movs	r0, #0
 8011012:	6023      	str	r3, [r4, #0]
 8011014:	b016      	add	sp, #88	; 0x58
 8011016:	bd70      	pop	{r4, r5, r6, pc}

08011018 <__smakebuf_r>:
 8011018:	898b      	ldrh	r3, [r1, #12]
 801101a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801101c:	079d      	lsls	r5, r3, #30
 801101e:	4606      	mov	r6, r0
 8011020:	460c      	mov	r4, r1
 8011022:	d507      	bpl.n	8011034 <__smakebuf_r+0x1c>
 8011024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011028:	6023      	str	r3, [r4, #0]
 801102a:	6123      	str	r3, [r4, #16]
 801102c:	2301      	movs	r3, #1
 801102e:	6163      	str	r3, [r4, #20]
 8011030:	b002      	add	sp, #8
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	ab01      	add	r3, sp, #4
 8011036:	466a      	mov	r2, sp
 8011038:	f7ff ffc9 	bl	8010fce <__swhatbuf_r>
 801103c:	9900      	ldr	r1, [sp, #0]
 801103e:	4605      	mov	r5, r0
 8011040:	4630      	mov	r0, r6
 8011042:	f7fd fa73 	bl	800e52c <_malloc_r>
 8011046:	b948      	cbnz	r0, 801105c <__smakebuf_r+0x44>
 8011048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801104c:	059a      	lsls	r2, r3, #22
 801104e:	d4ef      	bmi.n	8011030 <__smakebuf_r+0x18>
 8011050:	f023 0303 	bic.w	r3, r3, #3
 8011054:	f043 0302 	orr.w	r3, r3, #2
 8011058:	81a3      	strh	r3, [r4, #12]
 801105a:	e7e3      	b.n	8011024 <__smakebuf_r+0xc>
 801105c:	4b0d      	ldr	r3, [pc, #52]	; (8011094 <__smakebuf_r+0x7c>)
 801105e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011060:	89a3      	ldrh	r3, [r4, #12]
 8011062:	6020      	str	r0, [r4, #0]
 8011064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011068:	81a3      	strh	r3, [r4, #12]
 801106a:	9b00      	ldr	r3, [sp, #0]
 801106c:	6163      	str	r3, [r4, #20]
 801106e:	9b01      	ldr	r3, [sp, #4]
 8011070:	6120      	str	r0, [r4, #16]
 8011072:	b15b      	cbz	r3, 801108c <__smakebuf_r+0x74>
 8011074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011078:	4630      	mov	r0, r6
 801107a:	f000 f86b 	bl	8011154 <_isatty_r>
 801107e:	b128      	cbz	r0, 801108c <__smakebuf_r+0x74>
 8011080:	89a3      	ldrh	r3, [r4, #12]
 8011082:	f023 0303 	bic.w	r3, r3, #3
 8011086:	f043 0301 	orr.w	r3, r3, #1
 801108a:	81a3      	strh	r3, [r4, #12]
 801108c:	89a0      	ldrh	r0, [r4, #12]
 801108e:	4305      	orrs	r5, r0
 8011090:	81a5      	strh	r5, [r4, #12]
 8011092:	e7cd      	b.n	8011030 <__smakebuf_r+0x18>
 8011094:	0800e2cd 	.word	0x0800e2cd

08011098 <_malloc_usable_size_r>:
 8011098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801109c:	1f18      	subs	r0, r3, #4
 801109e:	2b00      	cmp	r3, #0
 80110a0:	bfbc      	itt	lt
 80110a2:	580b      	ldrlt	r3, [r1, r0]
 80110a4:	18c0      	addlt	r0, r0, r3
 80110a6:	4770      	bx	lr

080110a8 <_raise_r>:
 80110a8:	291f      	cmp	r1, #31
 80110aa:	b538      	push	{r3, r4, r5, lr}
 80110ac:	4604      	mov	r4, r0
 80110ae:	460d      	mov	r5, r1
 80110b0:	d904      	bls.n	80110bc <_raise_r+0x14>
 80110b2:	2316      	movs	r3, #22
 80110b4:	6003      	str	r3, [r0, #0]
 80110b6:	f04f 30ff 	mov.w	r0, #4294967295
 80110ba:	bd38      	pop	{r3, r4, r5, pc}
 80110bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80110be:	b112      	cbz	r2, 80110c6 <_raise_r+0x1e>
 80110c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110c4:	b94b      	cbnz	r3, 80110da <_raise_r+0x32>
 80110c6:	4620      	mov	r0, r4
 80110c8:	f000 f830 	bl	801112c <_getpid_r>
 80110cc:	462a      	mov	r2, r5
 80110ce:	4601      	mov	r1, r0
 80110d0:	4620      	mov	r0, r4
 80110d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110d6:	f000 b817 	b.w	8011108 <_kill_r>
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d00a      	beq.n	80110f4 <_raise_r+0x4c>
 80110de:	1c59      	adds	r1, r3, #1
 80110e0:	d103      	bne.n	80110ea <_raise_r+0x42>
 80110e2:	2316      	movs	r3, #22
 80110e4:	6003      	str	r3, [r0, #0]
 80110e6:	2001      	movs	r0, #1
 80110e8:	e7e7      	b.n	80110ba <_raise_r+0x12>
 80110ea:	2400      	movs	r4, #0
 80110ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110f0:	4628      	mov	r0, r5
 80110f2:	4798      	blx	r3
 80110f4:	2000      	movs	r0, #0
 80110f6:	e7e0      	b.n	80110ba <_raise_r+0x12>

080110f8 <raise>:
 80110f8:	4b02      	ldr	r3, [pc, #8]	; (8011104 <raise+0xc>)
 80110fa:	4601      	mov	r1, r0
 80110fc:	6818      	ldr	r0, [r3, #0]
 80110fe:	f7ff bfd3 	b.w	80110a8 <_raise_r>
 8011102:	bf00      	nop
 8011104:	20000210 	.word	0x20000210

08011108 <_kill_r>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	4d07      	ldr	r5, [pc, #28]	; (8011128 <_kill_r+0x20>)
 801110c:	2300      	movs	r3, #0
 801110e:	4604      	mov	r4, r0
 8011110:	4608      	mov	r0, r1
 8011112:	4611      	mov	r1, r2
 8011114:	602b      	str	r3, [r5, #0]
 8011116:	f7f0 fc6d 	bl	80019f4 <_kill>
 801111a:	1c43      	adds	r3, r0, #1
 801111c:	d102      	bne.n	8011124 <_kill_r+0x1c>
 801111e:	682b      	ldr	r3, [r5, #0]
 8011120:	b103      	cbz	r3, 8011124 <_kill_r+0x1c>
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	bd38      	pop	{r3, r4, r5, pc}
 8011126:	bf00      	nop
 8011128:	200063ac 	.word	0x200063ac

0801112c <_getpid_r>:
 801112c:	f7f0 bc5a 	b.w	80019e4 <_getpid>

08011130 <_fstat_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	4d07      	ldr	r5, [pc, #28]	; (8011150 <_fstat_r+0x20>)
 8011134:	2300      	movs	r3, #0
 8011136:	4604      	mov	r4, r0
 8011138:	4608      	mov	r0, r1
 801113a:	4611      	mov	r1, r2
 801113c:	602b      	str	r3, [r5, #0]
 801113e:	f7f0 fcb8 	bl	8001ab2 <_fstat>
 8011142:	1c43      	adds	r3, r0, #1
 8011144:	d102      	bne.n	801114c <_fstat_r+0x1c>
 8011146:	682b      	ldr	r3, [r5, #0]
 8011148:	b103      	cbz	r3, 801114c <_fstat_r+0x1c>
 801114a:	6023      	str	r3, [r4, #0]
 801114c:	bd38      	pop	{r3, r4, r5, pc}
 801114e:	bf00      	nop
 8011150:	200063ac 	.word	0x200063ac

08011154 <_isatty_r>:
 8011154:	b538      	push	{r3, r4, r5, lr}
 8011156:	4d06      	ldr	r5, [pc, #24]	; (8011170 <_isatty_r+0x1c>)
 8011158:	2300      	movs	r3, #0
 801115a:	4604      	mov	r4, r0
 801115c:	4608      	mov	r0, r1
 801115e:	602b      	str	r3, [r5, #0]
 8011160:	f7f0 fcb7 	bl	8001ad2 <_isatty>
 8011164:	1c43      	adds	r3, r0, #1
 8011166:	d102      	bne.n	801116e <_isatty_r+0x1a>
 8011168:	682b      	ldr	r3, [r5, #0]
 801116a:	b103      	cbz	r3, 801116e <_isatty_r+0x1a>
 801116c:	6023      	str	r3, [r4, #0]
 801116e:	bd38      	pop	{r3, r4, r5, pc}
 8011170:	200063ac 	.word	0x200063ac

08011174 <_init>:
 8011174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011176:	bf00      	nop
 8011178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117a:	bc08      	pop	{r3}
 801117c:	469e      	mov	lr, r3
 801117e:	4770      	bx	lr

08011180 <_fini>:
 8011180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011182:	bf00      	nop
 8011184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011186:	bc08      	pop	{r3}
 8011188:	469e      	mov	lr, r3
 801118a:	4770      	bx	lr
